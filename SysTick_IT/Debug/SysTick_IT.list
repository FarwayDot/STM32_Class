
SysTick_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000638  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080007cc  080007cc  000017cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007dc  080007dc  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080007dc  080007dc  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007dc  080007dc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007dc  080007dc  000017dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007e0  080007e0  000017e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080007e4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080007e8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080007e8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000134b  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000059b  00000000  00000000  0000337f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00003920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d5  00000000  00000000  00003a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ebf1  00000000  00000000  00003b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ec9  00000000  00000000  00012726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053f09  00000000  00000000  000145ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000684f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002e8  00000000  00000000  0006853c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00068824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080007b4 	.word	0x080007b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080007b4 	.word	0x080007b4

080001d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b06      	ldr	r3, [pc, #24]	@ (80001f4 <SystemInit+0x20>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001de:	4a05      	ldr	r2, [pc, #20]	@ (80001f4 <SystemInit+0x20>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b087      	sub	sp, #28
 80001fc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]
 8000206:	2302      	movs	r3, #2
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	2300      	movs	r3, #0
 800020c:	60bb      	str	r3, [r7, #8]
 800020e:	2302      	movs	r3, #2
 8000210:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000212:	4b34      	ldr	r3, [pc, #208]	@ (80002e4 <SystemCoreClockUpdate+0xec>)
 8000214:	689b      	ldr	r3, [r3, #8]
 8000216:	f003 030c 	and.w	r3, r3, #12
 800021a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800021c:	693b      	ldr	r3, [r7, #16]
 800021e:	2b08      	cmp	r3, #8
 8000220:	d011      	beq.n	8000246 <SystemCoreClockUpdate+0x4e>
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	2b08      	cmp	r3, #8
 8000226:	d844      	bhi.n	80002b2 <SystemCoreClockUpdate+0xba>
 8000228:	693b      	ldr	r3, [r7, #16]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d003      	beq.n	8000236 <SystemCoreClockUpdate+0x3e>
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	2b04      	cmp	r3, #4
 8000232:	d004      	beq.n	800023e <SystemCoreClockUpdate+0x46>
 8000234:	e03d      	b.n	80002b2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000236:	4b2c      	ldr	r3, [pc, #176]	@ (80002e8 <SystemCoreClockUpdate+0xf0>)
 8000238:	4a2c      	ldr	r2, [pc, #176]	@ (80002ec <SystemCoreClockUpdate+0xf4>)
 800023a:	601a      	str	r2, [r3, #0]
      break;
 800023c:	e03d      	b.n	80002ba <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800023e:	4b2a      	ldr	r3, [pc, #168]	@ (80002e8 <SystemCoreClockUpdate+0xf0>)
 8000240:	4a2b      	ldr	r2, [pc, #172]	@ (80002f0 <SystemCoreClockUpdate+0xf8>)
 8000242:	601a      	str	r2, [r3, #0]
      break;
 8000244:	e039      	b.n	80002ba <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000246:	4b27      	ldr	r3, [pc, #156]	@ (80002e4 <SystemCoreClockUpdate+0xec>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	0d9b      	lsrs	r3, r3, #22
 800024c:	f003 0301 	and.w	r3, r3, #1
 8000250:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000252:	4b24      	ldr	r3, [pc, #144]	@ (80002e4 <SystemCoreClockUpdate+0xec>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800025a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d00c      	beq.n	800027c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000262:	4a23      	ldr	r2, [pc, #140]	@ (80002f0 <SystemCoreClockUpdate+0xf8>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	fbb2 f3f3 	udiv	r3, r2, r3
 800026a:	4a1e      	ldr	r2, [pc, #120]	@ (80002e4 <SystemCoreClockUpdate+0xec>)
 800026c:	6852      	ldr	r2, [r2, #4]
 800026e:	0992      	lsrs	r2, r2, #6
 8000270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000274:	fb02 f303 	mul.w	r3, r2, r3
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	e00b      	b.n	8000294 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800027c:	4a1b      	ldr	r2, [pc, #108]	@ (80002ec <SystemCoreClockUpdate+0xf4>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	fbb2 f3f3 	udiv	r3, r2, r3
 8000284:	4a17      	ldr	r2, [pc, #92]	@ (80002e4 <SystemCoreClockUpdate+0xec>)
 8000286:	6852      	ldr	r2, [r2, #4]
 8000288:	0992      	lsrs	r2, r2, #6
 800028a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800028e:	fb02 f303 	mul.w	r3, r2, r3
 8000292:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000294:	4b13      	ldr	r3, [pc, #76]	@ (80002e4 <SystemCoreClockUpdate+0xec>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	0c1b      	lsrs	r3, r3, #16
 800029a:	f003 0303 	and.w	r3, r3, #3
 800029e:	3301      	adds	r3, #1
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ac:	4a0e      	ldr	r2, [pc, #56]	@ (80002e8 <SystemCoreClockUpdate+0xf0>)
 80002ae:	6013      	str	r3, [r2, #0]
      break;
 80002b0:	e003      	b.n	80002ba <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002b2:	4b0d      	ldr	r3, [pc, #52]	@ (80002e8 <SystemCoreClockUpdate+0xf0>)
 80002b4:	4a0d      	ldr	r2, [pc, #52]	@ (80002ec <SystemCoreClockUpdate+0xf4>)
 80002b6:	601a      	str	r2, [r3, #0]
      break;
 80002b8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002ba:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <SystemCoreClockUpdate+0xec>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	091b      	lsrs	r3, r3, #4
 80002c0:	f003 030f 	and.w	r3, r3, #15
 80002c4:	4a0b      	ldr	r2, [pc, #44]	@ (80002f4 <SystemCoreClockUpdate+0xfc>)
 80002c6:	5cd3      	ldrb	r3, [r2, r3]
 80002c8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80002ca:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <SystemCoreClockUpdate+0xf0>)
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	fa22 f303 	lsr.w	r3, r2, r3
 80002d4:	4a04      	ldr	r2, [pc, #16]	@ (80002e8 <SystemCoreClockUpdate+0xf0>)
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	bf00      	nop
 80002da:	371c      	adds	r7, #28
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40023800 	.word	0x40023800
 80002e8:	20000000 	.word	0x20000000
 80002ec:	00f42400 	.word	0x00f42400
 80002f0:	007a1200 	.word	0x007a1200
 80002f4:	080007cc 	.word	0x080007cc

080002f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b00      	cmp	r3, #0
 800030a:	db0a      	blt.n	8000322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b2da      	uxtb	r2, r3
 8000310:	490c      	ldr	r1, [pc, #48]	@ (8000344 <__NVIC_SetPriority+0x4c>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	0112      	lsls	r2, r2, #4
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	440b      	add	r3, r1
 800031c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000320:	e00a      	b.n	8000338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4908      	ldr	r1, [pc, #32]	@ (8000348 <__NVIC_SetPriority+0x50>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	f003 030f 	and.w	r3, r3, #15
 800032e:	3b04      	subs	r3, #4
 8000330:	0112      	lsls	r2, r2, #4
 8000332:	b2d2      	uxtb	r2, r2
 8000334:	440b      	add	r3, r1
 8000336:	761a      	strb	r2, [r3, #24]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000e100 	.word	0xe000e100
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <GetTick>:
#include "Delay.h"

uint32_t uwTick = 0;

static uint32_t GetTick(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	return uwTick;
 8000350:	4b03      	ldr	r3, [pc, #12]	@ (8000360 <GetTick+0x14>)
 8000352:	681b      	ldr	r3, [r3, #0]
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20000020 	.word	0x20000020

08000364 <Delay_Init>:

void Delay_Init(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	SysTick -> CTRL &= ~SysTick_CTRL_ENABLE_Msk;	//Dehabilitamos systick
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <Delay_Init+0x54>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a11      	ldr	r2, [pc, #68]	@ (80003b8 <Delay_Init+0x54>)
 8000372:	f023 0301 	bic.w	r3, r3, #1
 8000376:	6013      	str	r3, [r2, #0]
	SysTick -> LOAD = ticks - 1;				 	//Cargamos valor LOAD
 8000378:	4a0f      	ldr	r2, [pc, #60]	@ (80003b8 <Delay_Init+0x54>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3b01      	subs	r3, #1
 800037e:	6053      	str	r3, [r2, #4]
	SysTick -> CTRL |= 1U<<2; 						//Escogemos fuente de reloj
 8000380:	4b0d      	ldr	r3, [pc, #52]	@ (80003b8 <Delay_Init+0x54>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a0c      	ldr	r2, [pc, #48]	@ (80003b8 <Delay_Init+0x54>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(SysTick_IRQn, 7);				//Asignamos prioridad de 7
 800038c:	2107      	movs	r1, #7
 800038e:	f04f 30ff 	mov.w	r0, #4294967295
 8000392:	f7ff ffb1 	bl	80002f8 <__NVIC_SetPriority>
	SysTick -> CTRL |= 1<<1;						//Activamos interrupción por conteo
 8000396:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <Delay_Init+0x54>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a07      	ldr	r2, [pc, #28]	@ (80003b8 <Delay_Init+0x54>)
 800039c:	f043 0302 	orr.w	r3, r3, #2
 80003a0:	6013      	str	r3, [r2, #0]
	SysTick -> CTRL |= SysTick_CTRL_ENABLE_Msk;		//Habilitamos conteo
 80003a2:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <Delay_Init+0x54>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a04      	ldr	r2, [pc, #16]	@ (80003b8 <Delay_Init+0x54>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6013      	str	r3, [r2, #0]
	return;
 80003ae:	bf00      	nop
}
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	e000e010 	.word	0xe000e010

080003bc <delay_us>:

#if USE_DELAY_US == 1

void delay_us(uint32_t delay)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	int32_t tickstart = GetTick();
 80003c4:	f7ff ffc2 	bl	800034c <GetTick>
 80003c8:	4603      	mov	r3, r0
 80003ca:	60fb      	str	r3, [r7, #12]
	uint32_t wait = delay;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	60bb      	str	r3, [r7, #8]
	while((GetTick() - tickstart) < wait);
 80003d0:	bf00      	nop
 80003d2:	f7ff ffbb 	bl	800034c <GetTick>
 80003d6:	4602      	mov	r2, r0
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	429a      	cmp	r2, r3
 80003e0:	d8f7      	bhi.n	80003d2 <delay_us+0x16>
	return;
 80003e2:	bf00      	nop
}
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <delay_ms>:

#endif

void delay_ms(uint32_t delay)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	b084      	sub	sp, #16
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]

#if USE_DELAY_US == 1
	uint32_t i=0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
	for(i=0; i<delay; i++)
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	e006      	b.n	800040a <delay_ms+0x20>
	{
		delay_us(1000);
 80003fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000400:	f7ff ffdc 	bl	80003bc <delay_us>
	for(i=0; i<delay; i++)
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	3301      	adds	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fa      	ldr	r2, [r7, #12]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	429a      	cmp	r2, r3
 8000410:	d3f4      	bcc.n	80003fc <delay_ms+0x12>
	uint32_t wait = delay;
	while((GetTick() - tickstart) < wait);

#endif

}
 8000412:	bf00      	nop
 8000414:	bf00      	nop
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <HSI_Config_PLL>:
#endif

#ifdef PLL_ON

void HSI_Config_PLL(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	/*Activamos el HSE*/
	RCC->CR |= RCC_CR_HSION;
 8000420:	4b0b      	ldr	r3, [pc, #44]	@ (8000450 <HSI_Config_PLL+0x34>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <HSI_Config_PLL+0x34>)
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6013      	str	r3, [r2, #0]
	/*Esperamos a que esté listo el oscilador*/
	while(!(RCC->CR & RCC_CR_HSIRDY));
 800042c:	bf00      	nop
 800042e:	4b08      	ldr	r3, [pc, #32]	@ (8000450 <HSI_Config_PLL+0x34>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f003 0302 	and.w	r3, r3, #2
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f9      	beq.n	800042e <HSI_Config_PLL+0x12>
	/*Limpiamos la anterior fuente de reloj*/
	RCC->CFGR &=~ RCC_CFGR_SW_Msk;
 800043a:	4b05      	ldr	r3, [pc, #20]	@ (8000450 <HSI_Config_PLL+0x34>)
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	4a04      	ldr	r2, [pc, #16]	@ (8000450 <HSI_Config_PLL+0x34>)
 8000440:	f023 0303 	bic.w	r3, r3, #3
 8000444:	6093      	str	r3, [r2, #8]
	/*Actualiza SystemCoreClock*/
	SystemCoreClockUpdate();
 8000446:	f7ff fed7 	bl	80001f8 <SystemCoreClockUpdate>
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40023800 	.word	0x40023800

08000454 <HSE_Config_PLL>:

void HSE_Config_PLL(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	/*Activamos el HSE*/
	RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8000458:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <HSE_Config_PLL+0x34>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <HSE_Config_PLL+0x34>)
 800045e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000462:	6013      	str	r3, [r2, #0]
	/*Esperamos a que esté listo el oscilador*/
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000464:	bf00      	nop
 8000466:	4b08      	ldr	r3, [pc, #32]	@ (8000488 <HSE_Config_PLL+0x34>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f9      	beq.n	8000466 <HSE_Config_PLL+0x12>
	/*Limpiamos la anterior fuente de reloj*/
	RCC->CFGR &=~ RCC_CFGR_SW_Msk;
 8000472:	4b05      	ldr	r3, [pc, #20]	@ (8000488 <HSE_Config_PLL+0x34>)
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	4a04      	ldr	r2, [pc, #16]	@ (8000488 <HSE_Config_PLL+0x34>)
 8000478:	f023 0303 	bic.w	r3, r3, #3
 800047c:	6093      	str	r3, [r2, #8]
	/*Actualiza SystemCoreClock*/
	SystemCoreClockUpdate();
 800047e:	f7ff febb 	bl	80001f8 <SystemCoreClockUpdate>
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40023800 	.word	0x40023800

0800048c <PLL_Config>:

void PLL_Config(uint8_t Source)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
	/*Apagamos el PLL  por las dudas*/
	RCC -> CR &= ~RCC_CR_PLLON_Msk;
 8000496:	4b58      	ldr	r3, [pc, #352]	@ (80005f8 <PLL_Config+0x16c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a57      	ldr	r2, [pc, #348]	@ (80005f8 <PLL_Config+0x16c>)
 800049c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004a0:	6013      	str	r3, [r2, #0]

	/*Escojemos fuente de reloj para PLL*/

	switch(Source)
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d030      	beq.n	800050a <PLL_Config+0x7e>
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d15b      	bne.n	8000564 <PLL_Config+0xd8>
	{
		case HSE_SOURCE:

			HSE_Config_PLL(); //FOSC= 8Mhz, M=/4, N=*168, P=1(/4)
 80004ac:	f7ff ffd2 	bl	8000454 <HSE_Config_PLL>
			/*Configurar la fuente de reloj de PLL*/
			RCC -> PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 80004b0:	4b51      	ldr	r3, [pc, #324]	@ (80005f8 <PLL_Config+0x16c>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	4a50      	ldr	r2, [pc, #320]	@ (80005f8 <PLL_Config+0x16c>)
 80004b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004ba:	6053      	str	r3, [r2, #4]

			/*Configurar M,N,P,Q*/

			// 8Mhz / 4 = 2Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 80004bc:	4b4e      	ldr	r3, [pc, #312]	@ (80005f8 <PLL_Config+0x16c>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	4a4d      	ldr	r2, [pc, #308]	@ (80005f8 <PLL_Config+0x16c>)
 80004c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004c6:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (4<<0); //M 1-2Mhz
 80004c8:	4b4b      	ldr	r3, [pc, #300]	@ (80005f8 <PLL_Config+0x16c>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	4a4a      	ldr	r2, [pc, #296]	@ (80005f8 <PLL_Config+0x16c>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6053      	str	r3, [r2, #4]

			//2Mhz * 84 = 168Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 80004d4:	4b48      	ldr	r3, [pc, #288]	@ (80005f8 <PLL_Config+0x16c>)
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	4a47      	ldr	r2, [pc, #284]	@ (80005f8 <PLL_Config+0x16c>)
 80004da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80004de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004e2:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (168<<6);//N 192-472Mhz
 80004e4:	4b44      	ldr	r3, [pc, #272]	@ (80005f8 <PLL_Config+0x16c>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	4a43      	ldr	r2, [pc, #268]	@ (80005f8 <PLL_Config+0x16c>)
 80004ea:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 80004ee:	6053      	str	r3, [r2, #4]

			//336Mhz / 2 = 84Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 80004f0:	4b41      	ldr	r3, [pc, #260]	@ (80005f8 <PLL_Config+0x16c>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	4a40      	ldr	r2, [pc, #256]	@ (80005f8 <PLL_Config+0x16c>)
 80004f6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80004fa:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (1<<16);//P <=84Mhz
 80004fc:	4b3e      	ldr	r3, [pc, #248]	@ (80005f8 <PLL_Config+0x16c>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	4a3d      	ldr	r2, [pc, #244]	@ (80005f8 <PLL_Config+0x16c>)
 8000502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000506:	6053      	str	r3, [r2, #4]

			//Q <= 48Mhz (Opcional Configurar
			//RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLQ;
			//RCC -> PLLCFGR |= (4<<24);

			break;
 8000508:	e02d      	b.n	8000566 <PLL_Config+0xda>

		case HSI_SOURCE:

			HSI_Config_PLL(); //FOSC= 16Mhz, M=/8, N=*168, P=1(/4)
 800050a:	f7ff ff87 	bl	800041c <HSI_Config_PLL>
			/*Configurar la fuente de reloj de PLL*/
			RCC -> PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;
 800050e:	4b3a      	ldr	r3, [pc, #232]	@ (80005f8 <PLL_Config+0x16c>)
 8000510:	4a39      	ldr	r2, [pc, #228]	@ (80005f8 <PLL_Config+0x16c>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	6053      	str	r3, [r2, #4]

			/*Configurar M,N,P,Q*/

			// 8Mhz / 4 = 2Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 8000516:	4b38      	ldr	r3, [pc, #224]	@ (80005f8 <PLL_Config+0x16c>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	4a37      	ldr	r2, [pc, #220]	@ (80005f8 <PLL_Config+0x16c>)
 800051c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000520:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (8<<0); //M 1-2Mhz
 8000522:	4b35      	ldr	r3, [pc, #212]	@ (80005f8 <PLL_Config+0x16c>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	4a34      	ldr	r2, [pc, #208]	@ (80005f8 <PLL_Config+0x16c>)
 8000528:	f043 0308 	orr.w	r3, r3, #8
 800052c:	6053      	str	r3, [r2, #4]

			//2Mhz * 84 = 168Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 800052e:	4b32      	ldr	r3, [pc, #200]	@ (80005f8 <PLL_Config+0x16c>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	4a31      	ldr	r2, [pc, #196]	@ (80005f8 <PLL_Config+0x16c>)
 8000534:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800053c:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (168<<6);//N 192-472Mhz
 800053e:	4b2e      	ldr	r3, [pc, #184]	@ (80005f8 <PLL_Config+0x16c>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	4a2d      	ldr	r2, [pc, #180]	@ (80005f8 <PLL_Config+0x16c>)
 8000544:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 8000548:	6053      	str	r3, [r2, #4]

			//336Mhz / 2 = 84Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 800054a:	4b2b      	ldr	r3, [pc, #172]	@ (80005f8 <PLL_Config+0x16c>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	4a2a      	ldr	r2, [pc, #168]	@ (80005f8 <PLL_Config+0x16c>)
 8000550:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000554:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (1<<16);//P <=84Mhz
 8000556:	4b28      	ldr	r3, [pc, #160]	@ (80005f8 <PLL_Config+0x16c>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	4a27      	ldr	r2, [pc, #156]	@ (80005f8 <PLL_Config+0x16c>)
 800055c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000560:	6053      	str	r3, [r2, #4]

			//Q <= 48Mhz (Opcional Configurar
			//RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLQ;
			//RCC -> PLLCFGR |= (4<<24);

			break;
 8000562:	e000      	b.n	8000566 <PLL_Config+0xda>
		default: break;
 8000564:	bf00      	nop
	}

	/*Habilitar el PLL*/
	RCC -> CR |= RCC_CR_PLLON;
 8000566:	4b24      	ldr	r3, [pc, #144]	@ (80005f8 <PLL_Config+0x16c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a23      	ldr	r2, [pc, #140]	@ (80005f8 <PLL_Config+0x16c>)
 800056c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000570:	6013      	str	r3, [r2, #0]

	/*Esperamos a que esté listo el cambio de oscilador*/
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000572:	bf00      	nop
 8000574:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <PLL_Config+0x16c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0f9      	beq.n	8000574 <PLL_Config+0xe8>

	/*Configurar Prescalers*/

	RCC -> CFGR &= ~RCC_CFGR_PPRE2_Msk;
 8000580:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <PLL_Config+0x16c>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	4a1c      	ldr	r2, [pc, #112]	@ (80005f8 <PLL_Config+0x16c>)
 8000586:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800058a:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV1; //APB2 <=84Mhz
 800058c:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <PLL_Config+0x16c>)
 800058e:	4a1a      	ldr	r2, [pc, #104]	@ (80005f8 <PLL_Config+0x16c>)
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	6093      	str	r3, [r2, #8]

	RCC -> CFGR &= ~RCC_CFGR_PPRE1_Msk;
 8000594:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <PLL_Config+0x16c>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	4a17      	ldr	r2, [pc, #92]	@ (80005f8 <PLL_Config+0x16c>)
 800059a:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800059e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV2; //APB1 <=42Mhz
 80005a0:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <PLL_Config+0x16c>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	4a14      	ldr	r2, [pc, #80]	@ (80005f8 <PLL_Config+0x16c>)
 80005a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005aa:	6093      	str	r3, [r2, #8]

	/*Configurar la latencia de la flash (Revisar Pag. 46 ref. manual STM32F401X)*/
	FLASH -> ACR &= ~FLASH_ACR_LATENCY;
 80005ac:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <PLL_Config+0x170>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a12      	ldr	r2, [pc, #72]	@ (80005fc <PLL_Config+0x170>)
 80005b2:	f023 0307 	bic.w	r3, r3, #7
 80005b6:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_LATENCY_2WS;
 80005b8:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <PLL_Config+0x170>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0f      	ldr	r2, [pc, #60]	@ (80005fc <PLL_Config+0x170>)
 80005be:	f043 0302 	orr.w	r3, r3, #2
 80005c2:	6013      	str	r3, [r2, #0]

	/*Seleccionar la fuente dek sysclk*/
	RCC->CFGR 	&= ~RCC_CFGR_SW_Msk;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <PLL_Config+0x16c>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	4a0b      	ldr	r2, [pc, #44]	@ (80005f8 <PLL_Config+0x16c>)
 80005ca:	f023 0303 	bic.w	r3, r3, #3
 80005ce:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80005d0:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <PLL_Config+0x16c>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	4a08      	ldr	r2, [pc, #32]	@ (80005f8 <PLL_Config+0x16c>)
 80005d6:	f043 0302 	orr.w	r3, r3, #2
 80005da:	6093      	str	r3, [r2, #8]

	/*Esperamos a que esté listo el cambio de oscilador*/
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 80005dc:	bf00      	nop
 80005de:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <PLL_Config+0x16c>)
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	f003 0308 	and.w	r3, r3, #8
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0f9      	beq.n	80005de <PLL_Config+0x152>

	/*Actualiza SystemCoreClock*/
	SystemCoreClockUpdate();
 80005ea:	f7ff fe05 	bl	80001f8 <SystemCoreClockUpdate>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40023c00 	.word	0x40023c00

08000600 <main>:
/* Prototipo de funciones */

/*Función principal */

int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	PLL_Config(HSE_SOURCE);
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff ff41 	bl	800048c <PLL_Config>

	#if USE_DELAY_US == 1
		Delay_Init(SystemCoreClock/1000000);
 800060a:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <main+0x90>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <main+0x94>)
 8000610:	fba2 2303 	umull	r2, r3, r2, r3
 8000614:	0c9b      	lsrs	r3, r3, #18
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fea4 	bl	8000364 <Delay_Init>
	#else
		Delay_Init(SystemCoreClock/1000);
	#endif

	GPIO_CLOCK_ENABLE(A); //Habilita el clock del puerto A
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <main+0x98>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000620:	4a1d      	ldr	r2, [pc, #116]	@ (8000698 <main+0x98>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIO_CLOCK_ENABLE(C);  //Habilita el clock del puerto B
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <main+0x98>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062c:	4a1a      	ldr	r2, [pc, #104]	@ (8000698 <main+0x98>)
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	6313      	str	r3, [r2, #48]	@ 0x30

	//LED
	GPIOX_MODER(MODE_OUT, LED); //Pin del led como salida
 8000634:	4b19      	ldr	r3, [pc, #100]	@ (800069c <main+0x9c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800063c:	4a17      	ldr	r2, [pc, #92]	@ (800069c <main+0x9c>)
 800063e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000642:	6013      	str	r3, [r2, #0]
	GPIOX_PUPDR(MODE_PU_NONE, LED); //Pin del led como salida
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <main+0x9c>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	4a14      	ldr	r2, [pc, #80]	@ (800069c <main+0x9c>)
 800064a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800064e:	60d3      	str	r3, [r2, #12]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, LED); //Very High
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <main+0x9c>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4a11      	ldr	r2, [pc, #68]	@ (800069c <main+0x9c>)
 8000656:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800065a:	6093      	str	r3, [r2, #8]

	//BUTTON
	// Por si no sabemos a que puerto pertenece, la definición BUTTON se encarga de activar el clock en GPIOX_CLOCK
	//RCC->AHB1ENR |= GPIOX_CLOCK(BUTTON);
	GPIOX_MODER(MODE_DIGITAL_INPUT, BUTTON);
 800065c:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <main+0xa0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a0f      	ldr	r2, [pc, #60]	@ (80006a0 <main+0xa0>)
 8000662:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000666:	6013      	str	r3, [r2, #0]
	GPIOX_PUPDR(MODE_PU_NONE, BUTTON);
 8000668:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <main+0xa0>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	4a0c      	ldr	r2, [pc, #48]	@ (80006a0 <main+0xa0>)
 800066e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000672:	60d3      	str	r3, [r2, #12]
		//Esto es bit banding
		//BIT2 = 1;
		//BIT2 = 0;

		//De la misma forma se puede para los periféricos
		PA5 = 1;
 8000674:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <main+0xa4>)
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
		//PA5 = 0;
		delay_ms(100);
 800067a:	2064      	movs	r0, #100	@ 0x64
 800067c:	f7ff feb5 	bl	80003ea <delay_ms>
		GPIOX_ODR(LED) = 0;
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <main+0xa4>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
		delay_ms(100);
 8000686:	2064      	movs	r0, #100	@ 0x64
 8000688:	f7ff feaf 	bl	80003ea <delay_ms>
		PA5 = 1;
 800068c:	bf00      	nop
 800068e:	e7f1      	b.n	8000674 <main+0x74>
 8000690:	20000000 	.word	0x20000000
 8000694:	431bde83 	.word	0x431bde83
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020800 	.word	0x40020800
 80006a4:	42400294 	.word	0x42400294

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <NMI_Handler+0x4>

080006b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <HardFault_Handler+0x4>

080006b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <MemManage_Handler+0x4>

080006c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <BusFault_Handler+0x4>

080006c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <UsageFault_Handler+0x4>

080006d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
	...

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	uwTick++;
 8000700:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <SysTick_Handler+0x18>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	4a03      	ldr	r2, [pc, #12]	@ (8000714 <SysTick_Handler+0x18>)
 8000708:	6013      	str	r3, [r2, #0]
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	20000020 	.word	0x20000020

08000718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000718:	480d      	ldr	r0, [pc, #52]	@ (8000750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800071c:	f7ff fd5a 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	@ (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	@ (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	@ (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	@ (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000746:	f000 f811 	bl	800076c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f7ff ff59 	bl	8000600 <main>

0800074e <LoopForever>:

LoopForever:
  b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   r0, =_estack
 8000750:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800075c:	080007e4 	.word	0x080007e4
  ldr r2, =_sbss
 8000760:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000764:	20000024 	.word	0x20000024

08000768 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC_IRQHandler>
	...

0800076c <__libc_init_array>:
 800076c:	b570      	push	{r4, r5, r6, lr}
 800076e:	4d0d      	ldr	r5, [pc, #52]	@ (80007a4 <__libc_init_array+0x38>)
 8000770:	4c0d      	ldr	r4, [pc, #52]	@ (80007a8 <__libc_init_array+0x3c>)
 8000772:	1b64      	subs	r4, r4, r5
 8000774:	10a4      	asrs	r4, r4, #2
 8000776:	2600      	movs	r6, #0
 8000778:	42a6      	cmp	r6, r4
 800077a:	d109      	bne.n	8000790 <__libc_init_array+0x24>
 800077c:	4d0b      	ldr	r5, [pc, #44]	@ (80007ac <__libc_init_array+0x40>)
 800077e:	4c0c      	ldr	r4, [pc, #48]	@ (80007b0 <__libc_init_array+0x44>)
 8000780:	f000 f818 	bl	80007b4 <_init>
 8000784:	1b64      	subs	r4, r4, r5
 8000786:	10a4      	asrs	r4, r4, #2
 8000788:	2600      	movs	r6, #0
 800078a:	42a6      	cmp	r6, r4
 800078c:	d105      	bne.n	800079a <__libc_init_array+0x2e>
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f855 3b04 	ldr.w	r3, [r5], #4
 8000794:	4798      	blx	r3
 8000796:	3601      	adds	r6, #1
 8000798:	e7ee      	b.n	8000778 <__libc_init_array+0xc>
 800079a:	f855 3b04 	ldr.w	r3, [r5], #4
 800079e:	4798      	blx	r3
 80007a0:	3601      	adds	r6, #1
 80007a2:	e7f2      	b.n	800078a <__libc_init_array+0x1e>
 80007a4:	080007dc 	.word	0x080007dc
 80007a8:	080007dc 	.word	0x080007dc
 80007ac:	080007dc 	.word	0x080007dc
 80007b0:	080007e0 	.word	0x080007e0

080007b4 <_init>:
 80007b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b6:	bf00      	nop
 80007b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ba:	bc08      	pop	{r3}
 80007bc:	469e      	mov	lr, r3
 80007be:	4770      	bx	lr

080007c0 <_fini>:
 80007c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c2:	bf00      	nop
 80007c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c6:	bc08      	pop	{r3}
 80007c8:	469e      	mov	lr, r3
 80007ca:	4770      	bx	lr
