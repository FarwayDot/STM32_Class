
nucleo-f401re-freertos-digikey.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005954  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005af4  08005af4  00006af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc0  08005bc0  00007018  2**0
                  CONTENTS
  4 .ARM          00000008  08005bc0  08005bc0  00006bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc8  08005bc8  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc8  08005bc8  00006bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bcc  08005bcc  00006bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005bd0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a10  20000018  08005be8  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a28  08005be8  00007a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177e4  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ade  00000000  00000000  0001e82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00022310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101f  00000000  00000000  000237f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019308  00000000  00000000  0002480f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018be4  00000000  00000000  0003db17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f2e  00000000  00000000  000566fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee629  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005680  00000000  00000000  000ee66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f3cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005adc 	.word	0x08005adc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	08005adc 	.word	0x08005adc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_task_read_entry>:
 */

#include "freertos_config_defines.h"

void button_task_read_entry(void *params)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	app_button_t *obj;
	obj = (app_button_t *)params;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	613b      	str	r3, [r7, #16]

	//uint8_t cont = 0;
	uint8_t state;
	uint8_t pin_read = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]
	uint32_t ticks = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]

	osEventFlagsWait(Event01Handle, SYS_READY, osFlagsWaitAny, osWaitForever);
 80004e4:	4b47      	ldr	r3, [pc, #284]	@ (8000604 <button_task_read_entry+0x134>)
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	f04f 33ff 	mov.w	r3, #4294967295
 80004ec:	2200      	movs	r2, #0
 80004ee:	2101      	movs	r1, #1
 80004f0:	f002 fa80 	bl	80029f4 <osEventFlagsWait>
	osEventFlagsSet(Event01Handle,SYS_TASK_A);
 80004f4:	4b43      	ldr	r3, [pc, #268]	@ (8000604 <button_task_read_entry+0x134>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2104      	movs	r1, #4
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 f9e6 	bl	80028cc <osEventFlagsSet>

	for(;;)
	{
		pin_read = HAL_GPIO_ReadPin(obj->port, obj->pin);
 8000500:	693b      	ldr	r3, [r7, #16]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	889b      	ldrh	r3, [r3, #4]
 8000508:	4619      	mov	r1, r3
 800050a:	4610      	mov	r0, r2
 800050c:	f000 fe16 	bl	800113c <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	73fb      	strb	r3, [r7, #15]
		state = obj->state;
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	799b      	ldrb	r3, [r3, #6]
 8000518:	73bb      	strb	r3, [r7, #14]
		switch(state)
 800051a:	7bbb      	ldrb	r3, [r7, #14]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d866      	bhi.n	80005ee <button_task_read_entry+0x11e>
 8000520:	a201      	add	r2, pc, #4	@ (adr r2, 8000528 <button_task_read_entry+0x58>)
 8000522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000526:	bf00      	nop
 8000528:	0800053d 	.word	0x0800053d
 800052c:	08000551 	.word	0x08000551
 8000530:	0800056d 	.word	0x0800056d
 8000534:	08000593 	.word	0x08000593
 8000538:	080005a1 	.word	0x080005a1
		{
			case BUTTON_FREE:
				/*Action*/

				/*Si detecta que se presiona (En 0)*/
				if(pin_read == GPIO_PIN_RESET)
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d157      	bne.n	80005f2 <button_task_read_entry+0x122>
				{
					vTaskDelay(pdMS_TO_TICKS(30));
 8000542:	201e      	movs	r0, #30
 8000544:	f003 fcb8 	bl	8003eb8 <vTaskDelay>
					obj->state = BUTTON_DEBOUNCE;
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	2201      	movs	r2, #1
 800054c:	719a      	strb	r2, [r3, #6]
				}
				break;
 800054e:	e050      	b.n	80005f2 <button_task_read_entry+0x122>

			case BUTTON_DEBOUNCE:
				/*Action*/

				/*Si se mantiene presionado*/
				if(pin_read == GPIO_PIN_RESET)
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d106      	bne.n	8000564 <button_task_read_entry+0x94>
				{
					ticks = xTaskGetTickCount();
 8000556:	f003 fdf9 	bl	800414c <xTaskGetTickCount>
 800055a:	6178      	str	r0, [r7, #20]
					obj->state = BUTTON_ONPRESS;
 800055c:	693b      	ldr	r3, [r7, #16]
 800055e:	2202      	movs	r2, #2
 8000560:	719a      	strb	r2, [r3, #6]
				else /*Si se suelta rápidamente*/
				{
					//Event
					obj->state = BUTTON_ONRELEASE;
				}
				break;
 8000562:	e04b      	b.n	80005fc <button_task_read_entry+0x12c>
					obj->state = BUTTON_ONRELEASE;
 8000564:	693b      	ldr	r3, [r7, #16]
 8000566:	2204      	movs	r2, #4
 8000568:	719a      	strb	r2, [r3, #6]
				break;
 800056a:	e047      	b.n	80005fc <button_task_read_entry+0x12c>

			case BUTTON_ONPRESS:
				/*Action*/

				/*Confirmando que sigue presionado*/
				if(pin_read == GPIO_PIN_RESET)
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d10b      	bne.n	800058a <button_task_read_entry+0xba>
				{
					/*Esperamos un tiempo*/
					if((xTaskGetTickCount() - ticks) >= pdMS_TO_TICKS(2000))
 8000572:	f003 fdeb 	bl	800414c <xTaskGetTickCount>
 8000576:	4602      	mov	r2, r0
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000580:	d339      	bcc.n	80005f6 <button_task_read_entry+0x126>
					{
						obj->state = BUTTON_KEEPALIVE;
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	2203      	movs	r2, #3
 8000586:	719a      	strb	r2, [r3, #6]
				}
				else /*Si se soltó el botón*/
				{
					obj->state = BUTTON_ONRELEASE;
				}
				break;
 8000588:	e035      	b.n	80005f6 <button_task_read_entry+0x126>
					obj->state = BUTTON_ONRELEASE;
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	2204      	movs	r2, #4
 800058e:	719a      	strb	r2, [r3, #6]
				break;
 8000590:	e031      	b.n	80005f6 <button_task_read_entry+0x126>

			case BUTTON_KEEPALIVE:
				/*Action*/

				/*Si soltamos el botón*/
				if(pin_read == GPIO_PIN_SET)
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d130      	bne.n	80005fa <button_task_read_entry+0x12a>
				{
					/*Cambiamos a on_release*/
					obj->state = BUTTON_ONRELEASE;
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	2204      	movs	r2, #4
 800059c:	719a      	strb	r2, [r3, #6]
				}
				break;
 800059e:	e02c      	b.n	80005fa <button_task_read_entry+0x12a>

			case BUTTON_ONRELEASE:
				/*Action*/
				if(!(osEventFlagsGet(Event01Handle)& SYS_TASK_A))
 80005a0:	4b18      	ldr	r3, [pc, #96]	@ (8000604 <button_task_read_entry+0x134>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fa04 	bl	80029b2 <osEventFlagsGet>
 80005aa:	4603      	mov	r3, r0
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d10c      	bne.n	80005ce <button_task_read_entry+0xfe>
				{
					osEventFlagsClear(Event01Handle, SYS_TASK_B);
 80005b4:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <button_task_read_entry+0x134>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2108      	movs	r1, #8
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 f9c8 	bl	8002950 <osEventFlagsClear>
					osEventFlagsSet(Event01Handle, SYS_TASK_A);
 80005c0:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <button_task_read_entry+0x134>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 f980 	bl	80028cc <osEventFlagsSet>
 80005cc:	e00b      	b.n	80005e6 <button_task_read_entry+0x116>
				}
				else
				{
					osEventFlagsClear(Event01Handle, SYS_TASK_A);
 80005ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <button_task_read_entry+0x134>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2104      	movs	r1, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 f9bb 	bl	8002950 <osEventFlagsClear>
					osEventFlagsSet(Event01Handle, SYS_TASK_B);
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <button_task_read_entry+0x134>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2108      	movs	r1, #8
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 f973 	bl	80028cc <osEventFlagsSet>
				}
				/*Volvemos a FREE*/
				obj->state = BUTTON_FREE;
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	2200      	movs	r2, #0
 80005ea:	719a      	strb	r2, [r3, #6]
				break;
 80005ec:	e006      	b.n	80005fc <button_task_read_entry+0x12c>
			default:
				break;
 80005ee:	bf00      	nop
 80005f0:	e004      	b.n	80005fc <button_task_read_entry+0x12c>
				break;
 80005f2:	bf00      	nop
 80005f4:	e002      	b.n	80005fc <button_task_read_entry+0x12c>
				break;
 80005f6:	bf00      	nop
 80005f8:	e000      	b.n	80005fc <button_task_read_entry+0x12c>
				break;
 80005fa:	bf00      	nop
		}
		vTaskDelay(pdMS_TO_TICKS(20));
 80005fc:	2014      	movs	r0, #20
 80005fe:	f003 fc5b 	bl	8003eb8 <vTaskDelay>
		pin_read = HAL_GPIO_ReadPin(obj->port, obj->pin);
 8000602:	e77d      	b.n	8000500 <button_task_read_entry+0x30>
 8000604:	20000040 	.word	0x20000040

08000608 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task01 */
  task01Handle = osThreadNew(Start_Task01, NULL, &task01_attributes);
 800060c:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <MX_FREERTOS_Init+0x44>)
 800060e:	2100      	movs	r1, #0
 8000610:	480f      	ldr	r0, [pc, #60]	@ (8000650 <MX_FREERTOS_Init+0x48>)
 8000612:	f002 f86f 	bl	80026f4 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0e      	ldr	r2, [pc, #56]	@ (8000654 <MX_FREERTOS_Init+0x4c>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of task02 */
  task02Handle = osThreadNew(Start_Task02, NULL, &task02_attributes);
 800061c:	4a0e      	ldr	r2, [pc, #56]	@ (8000658 <MX_FREERTOS_Init+0x50>)
 800061e:	2100      	movs	r1, #0
 8000620:	480e      	ldr	r0, [pc, #56]	@ (800065c <MX_FREERTOS_Init+0x54>)
 8000622:	f002 f867 	bl	80026f4 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <MX_FREERTOS_Init+0x58>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of task03 */
  task03Handle = osThreadNew(button_task_read_entry, (void*)&button, &task03_attributes);
 800062c:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <MX_FREERTOS_Init+0x5c>)
 800062e:	490e      	ldr	r1, [pc, #56]	@ (8000668 <MX_FREERTOS_Init+0x60>)
 8000630:	480e      	ldr	r0, [pc, #56]	@ (800066c <MX_FREERTOS_Init+0x64>)
 8000632:	f002 f85f 	bl	80026f4 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0d      	ldr	r2, [pc, #52]	@ (8000670 <MX_FREERTOS_Init+0x68>)
 800063a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of Event01 */
  Event01Handle = osEventFlagsNew(&Event01_attributes);
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_FREERTOS_Init+0x6c>)
 800063e:	f002 f906 	bl	800284e <osEventFlagsNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <MX_FREERTOS_Init+0x70>)
 8000646:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	08005b2c 	.word	0x08005b2c
 8000650:	08000a31 	.word	0x08000a31
 8000654:	20000034 	.word	0x20000034
 8000658:	08005b50 	.word	0x08005b50
 800065c:	08000a71 	.word	0x08000a71
 8000660:	20000038 	.word	0x20000038
 8000664:	08005b74 	.word	0x08005b74
 8000668:	20000000 	.word	0x20000000
 800066c:	080004d1 	.word	0x080004d1
 8000670:	2000003c 	.word	0x2000003c
 8000674:	08005b98 	.word	0x08005b98
 8000678:	20000040 	.word	0x20000040

0800067c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b2d      	ldr	r3, [pc, #180]	@ (800074c <MX_GPIO_Init+0xd0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a2c      	ldr	r2, [pc, #176]	@ (800074c <MX_GPIO_Init+0xd0>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b2a      	ldr	r3, [pc, #168]	@ (800074c <MX_GPIO_Init+0xd0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b26      	ldr	r3, [pc, #152]	@ (800074c <MX_GPIO_Init+0xd0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a25      	ldr	r2, [pc, #148]	@ (800074c <MX_GPIO_Init+0xd0>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b23      	ldr	r3, [pc, #140]	@ (800074c <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <MX_GPIO_Init+0xd0>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a17      	ldr	r2, [pc, #92]	@ (800074c <MX_GPIO_Init+0xd0>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2120      	movs	r1, #32
 8000706:	4812      	ldr	r0, [pc, #72]	@ (8000750 <MX_GPIO_Init+0xd4>)
 8000708:	f000 fd30 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000712:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	480c      	ldr	r0, [pc, #48]	@ (8000754 <MX_GPIO_Init+0xd8>)
 8000724:	f000 fb86 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000728:	2320      	movs	r3, #32
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_GPIO_Init+0xd4>)
 8000740:	f000 fb78 	bl	8000e34 <HAL_GPIO_Init>

}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	@ 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000
 8000754:	40020800 	.word	0x40020800

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075c:	f000 fa46 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f80c 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f7ff ff8a 	bl	800067c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000768:	f000 f9a4 	bl	8000ab4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800076c:	f001 ff78 	bl	8002660 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000770:	f7ff ff4a 	bl	8000608 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000774:	f001 ff98 	bl	80026a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <main+0x20>

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	@ 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f005 f96c 	bl	8005a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b29      	ldr	r3, [pc, #164]	@ (800084c <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	4a28      	ldr	r2, [pc, #160]	@ (800084c <SystemClock_Config+0xd0>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <SystemClock_Config+0xd0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <SystemClock_Config+0xd4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c8:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <SystemClock_Config+0xd4>)
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <SystemClock_Config+0xd4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007f0:	2310      	movs	r3, #16
 80007f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007fe:	2307      	movs	r3, #7
 8000800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fce4 	bl	80011d4 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000812:	f000 f831 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2102      	movs	r1, #2
 8000832:	4618      	mov	r0, r3
 8000834:	f000 ff46 	bl	80016c4 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800083e:	f000 f81b 	bl	8000878 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	@ 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a04      	ldr	r2, [pc, #16]	@ (8000874 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d101      	bne.n	800086a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000866:	f000 f9e3 	bl	8000c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40014400 	.word	0x40014400

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <Error_Handler+0x8>

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_MspInit+0x54>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	4a11      	ldr	r2, [pc, #68]	@ (80008d8 <HAL_MspInit+0x54>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000898:	6453      	str	r3, [r2, #68]	@ 0x44
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <HAL_MspInit+0x54>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <HAL_MspInit+0x54>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <HAL_MspInit+0x54>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <HAL_MspInit+0x54>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	210f      	movs	r1, #15
 80008c6:	f06f 0001 	mvn.w	r0, #1
 80008ca:	f000 fa89 	bl	8000de0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	4b2e      	ldr	r3, [pc, #184]	@ (80009ac <HAL_InitTick+0xd0>)
 80008f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f4:	4a2d      	ldr	r2, [pc, #180]	@ (80009ac <HAL_InitTick+0xd0>)
 80008f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fc:	4b2b      	ldr	r3, [pc, #172]	@ (80009ac <HAL_InitTick+0xd0>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000908:	f107 020c 	add.w	r2, r7, #12
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f001 f8f6 	bl	8001b04 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000918:	f001 f8e0 	bl	8001adc <HAL_RCC_GetPCLK2Freq>
 800091c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000920:	4a23      	ldr	r2, [pc, #140]	@ (80009b0 <HAL_InitTick+0xd4>)
 8000922:	fba2 2303 	umull	r2, r3, r2, r3
 8000926:	0c9b      	lsrs	r3, r3, #18
 8000928:	3b01      	subs	r3, #1
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800092c:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <HAL_InitTick+0xd8>)
 800092e:	4a22      	ldr	r2, [pc, #136]	@ (80009b8 <HAL_InitTick+0xdc>)
 8000930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000932:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <HAL_InitTick+0xd8>)
 8000934:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000938:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800093a:	4a1e      	ldr	r2, [pc, #120]	@ (80009b4 <HAL_InitTick+0xd8>)
 800093c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000940:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <HAL_InitTick+0xd8>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b1b      	ldr	r3, [pc, #108]	@ (80009b4 <HAL_InitTick+0xd8>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <HAL_InitTick+0xd8>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000952:	4818      	ldr	r0, [pc, #96]	@ (80009b4 <HAL_InitTick+0xd8>)
 8000954:	f001 f908 	bl	8001b68 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800095e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000962:	2b00      	cmp	r3, #0
 8000964:	d11b      	bne.n	800099e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000966:	4813      	ldr	r0, [pc, #76]	@ (80009b4 <HAL_InitTick+0xd8>)
 8000968:	f001 f958 	bl	8001c1c <HAL_TIM_Base_Start_IT>
 800096c:	4603      	mov	r3, r0
 800096e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000972:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000976:	2b00      	cmp	r3, #0
 8000978:	d111      	bne.n	800099e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800097a:	2019      	movs	r0, #25
 800097c:	f000 fa4c 	bl	8000e18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b0f      	cmp	r3, #15
 8000984:	d808      	bhi.n	8000998 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000986:	2200      	movs	r2, #0
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	2019      	movs	r0, #25
 800098c:	f000 fa28 	bl	8000de0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000990:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_InitTick+0xe0>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
 8000996:	e002      	b.n	800099e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800099e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3730      	adds	r7, #48	@ 0x30
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	431bde83 	.word	0x431bde83
 80009b4:	20000044 	.word	0x20000044
 80009b8:	40014400 	.word	0x40014400
 80009bc:	2000000c 	.word	0x2000000c

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009fe:	f001 f96f 	bl	8001ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000044 	.word	0x20000044

08000a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <Start_Task01>:

#include "freertos_config_defines.h"


void Start_Task01(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(Event01Handle, SYS_READY);
 8000a38:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <Start_Task01+0x38>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 ff44 	bl	80028cc <osEventFlagsSet>

	for(;;)
	{
		if(osEventFlagsGet(Event01Handle) & SYS_TASK_A)
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <Start_Task01+0x38>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 ffb2 	bl	80029b2 <osEventFlagsGet>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0f5      	beq.n	8000a44 <Start_Task01+0x14>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a58:	2120      	movs	r1, #32
 8000a5a:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <Start_Task01+0x3c>)
 8000a5c:	f000 fb9f 	bl	800119e <HAL_GPIO_TogglePin>
			osDelay(250);
 8000a60:	20fa      	movs	r0, #250	@ 0xfa
 8000a62:	f001 fed9 	bl	8002818 <osDelay>
		if(osEventFlagsGet(Event01Handle) & SYS_TASK_A)
 8000a66:	e7ed      	b.n	8000a44 <Start_Task01+0x14>
 8000a68:	20000040 	.word	0x20000040
 8000a6c:	40020000 	.word	0x40020000

08000a70 <Start_Task02>:

	}
}

void Start_Task02(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(Event01Handle, SYS_READY);
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <Start_Task02+0x3c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 ff24 	bl	80028cc <osEventFlagsSet>

	for(;;)
	{
		if(osEventFlagsGet(Event01Handle) & SYS_TASK_B)
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <Start_Task02+0x3c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 ff92 	bl	80029b2 <osEventFlagsGet>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f003 0308 	and.w	r3, r3, #8
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0f5      	beq.n	8000a84 <Start_Task02+0x14>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a98:	2120      	movs	r1, #32
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <Start_Task02+0x40>)
 8000a9c:	f000 fb7f 	bl	800119e <HAL_GPIO_TogglePin>
			osDelay(1000);
 8000aa0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aa4:	f001 feb8 	bl	8002818 <osDelay>
		if(osEventFlagsGet(Event01Handle) & SYS_TASK_B)
 8000aa8:	e7ec      	b.n	8000a84 <Start_Task02+0x14>
 8000aaa:	bf00      	nop
 8000aac:	20000040 	.word	0x20000040
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <MX_USART2_UART_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000aec:	f001 fab0 	bl	8002050 <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000af6:	f7ff febf 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000008c 	.word	0x2000008c
 8000b04:	40004400 	.word	0x40004400

08000b08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a19      	ldr	r2, [pc, #100]	@ (8000b8c <HAL_UART_MspInit+0x84>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12b      	bne.n	8000b82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <HAL_UART_MspInit+0x88>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	4a17      	ldr	r2, [pc, #92]	@ (8000b90 <HAL_UART_MspInit+0x88>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <HAL_UART_MspInit+0x88>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <HAL_UART_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a10      	ldr	r2, [pc, #64]	@ (8000b90 <HAL_UART_MspInit+0x88>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <HAL_UART_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b62:	230c      	movs	r3, #12
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b72:	2307      	movs	r3, #7
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <HAL_UART_MspInit+0x8c>)
 8000b7e:	f000 f959 	bl	8000e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	@ 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40004400 	.word	0x40004400
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b9c:	f7ff ff36 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	@ (8000bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	@ (8000bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f004 ff57 	bl	8005a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fdc5 	bl	8000758 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000bdc:	08005bd0 	.word	0x08005bd0
  ldr r2, =_sbss
 8000be0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000be4:	20004a28 	.word	0x20004a28

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f8d8 	bl	8000dca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f7ff fe5e 	bl	80008dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe30 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000010 	.word	0x20000010
 8000c54:	200000d4 	.word	0x200000d4

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200000d4 	.word	0x200000d4

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	@ (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	@ (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	@ (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	@ 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	@ 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff4c 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df2:	f7ff ff61 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000df6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	6978      	ldr	r0, [r7, #20]
 8000dfe:	f7ff ffb1 	bl	8000d64 <NVIC_EncodePriority>
 8000e02:	4602      	mov	r2, r0
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff80 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff54 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	@ 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	e159      	b.n	8001104 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 8148 	bne.w	80010fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d005      	beq.n	8000e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d130      	bne.n	8000ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d017      	beq.n	8000f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d123      	bne.n	8000f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	69b9      	ldr	r1, [r7, #24]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0203 	and.w	r2, r3, #3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80a2 	beq.w	80010fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b57      	ldr	r3, [pc, #348]	@ (800111c <HAL_GPIO_Init+0x2e8>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	4a56      	ldr	r2, [pc, #344]	@ (800111c <HAL_GPIO_Init+0x2e8>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fca:	4b54      	ldr	r3, [pc, #336]	@ (800111c <HAL_GPIO_Init+0x2e8>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd6:	4a52      	ldr	r2, [pc, #328]	@ (8001120 <HAL_GPIO_Init+0x2ec>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a49      	ldr	r2, [pc, #292]	@ (8001124 <HAL_GPIO_Init+0x2f0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0x202>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a48      	ldr	r2, [pc, #288]	@ (8001128 <HAL_GPIO_Init+0x2f4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x1fe>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a47      	ldr	r2, [pc, #284]	@ (800112c <HAL_GPIO_Init+0x2f8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x1fa>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a46      	ldr	r2, [pc, #280]	@ (8001130 <HAL_GPIO_Init+0x2fc>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x1f6>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a45      	ldr	r2, [pc, #276]	@ (8001134 <HAL_GPIO_Init+0x300>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x1f2>
 8001022:	2304      	movs	r3, #4
 8001024:	e008      	b.n	8001038 <HAL_GPIO_Init+0x204>
 8001026:	2307      	movs	r3, #7
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x204>
 800102a:	2303      	movs	r3, #3
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x204>
 800102e:	2302      	movs	r3, #2
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x204>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x204>
 8001036:	2300      	movs	r3, #0
 8001038:	69fa      	ldr	r2, [r7, #28]
 800103a:	f002 0203 	and.w	r2, r2, #3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4093      	lsls	r3, r2
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001048:	4935      	ldr	r1, [pc, #212]	@ (8001120 <HAL_GPIO_Init+0x2ec>)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	4b38      	ldr	r3, [pc, #224]	@ (8001138 <HAL_GPIO_Init+0x304>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107a:	4a2f      	ldr	r2, [pc, #188]	@ (8001138 <HAL_GPIO_Init+0x304>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001080:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <HAL_GPIO_Init+0x304>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a4:	4a24      	ldr	r2, [pc, #144]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010aa:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3301      	adds	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	f67f aea2 	bls.w	8000e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3724      	adds	r7, #36	@ 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40013800 	.word	0x40013800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40020800 	.word	0x40020800
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40021000 	.word	0x40021000
 8001138:	40013c00 	.word	0x40013c00

0800113c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	4013      	ands	r3, r2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e001      	b.n	800115e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001188:	e003      	b.n	8001192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	619a      	str	r2, [r3, #24]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b0:	887a      	ldrh	r2, [r7, #2]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	041a      	lsls	r2, r3, #16
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	400b      	ands	r3, r1
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e267      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d075      	beq.n	80012de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011f2:	4b88      	ldr	r3, [pc, #544]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 030c 	and.w	r3, r3, #12
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d00c      	beq.n	8001218 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fe:	4b85      	ldr	r3, [pc, #532]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001206:	2b08      	cmp	r3, #8
 8001208:	d112      	bne.n	8001230 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120a:	4b82      	ldr	r3, [pc, #520]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001212:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001216:	d10b      	bne.n	8001230 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	4b7e      	ldr	r3, [pc, #504]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d05b      	beq.n	80012dc <HAL_RCC_OscConfig+0x108>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d157      	bne.n	80012dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e242      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001238:	d106      	bne.n	8001248 <HAL_RCC_OscConfig+0x74>
 800123a:	4b76      	ldr	r3, [pc, #472]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a75      	ldr	r2, [pc, #468]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e01d      	b.n	8001284 <HAL_RCC_OscConfig+0xb0>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0x98>
 8001252:	4b70      	ldr	r3, [pc, #448]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a6f      	ldr	r2, [pc, #444]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b6d      	ldr	r3, [pc, #436]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a6c      	ldr	r2, [pc, #432]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e00b      	b.n	8001284 <HAL_RCC_OscConfig+0xb0>
 800126c:	4b69      	ldr	r3, [pc, #420]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a68      	ldr	r2, [pc, #416]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b66      	ldr	r3, [pc, #408]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a65      	ldr	r2, [pc, #404]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 800127e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d013      	beq.n	80012b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fce4 	bl	8000c58 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fce0 	bl	8000c58 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	@ 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e207      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0xc0>
 80012b2:	e014      	b.n	80012de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fcd0 	bl	8000c58 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fccc 	bl	8000c58 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	@ 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e1f3      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	4b51      	ldr	r3, [pc, #324]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0xe8>
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d063      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f6:	4b47      	ldr	r3, [pc, #284]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d11c      	bne.n	800133c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001302:	4b44      	ldr	r3, [pc, #272]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d116      	bne.n	800133c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	4b41      	ldr	r3, [pc, #260]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_RCC_OscConfig+0x152>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e1c7      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001326:	4b3b      	ldr	r3, [pc, #236]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4937      	ldr	r1, [pc, #220]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	e03a      	b.n	80013b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d020      	beq.n	8001386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001344:	4b34      	ldr	r3, [pc, #208]	@ (8001418 <HAL_RCC_OscConfig+0x244>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134a:	f7ff fc85 	bl	8000c58 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fc81 	bl	8000c58 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e1a8      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001364:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4925      	ldr	r1, [pc, #148]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
 8001384:	e015      	b.n	80013b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001386:	4b24      	ldr	r3, [pc, #144]	@ (8001418 <HAL_RCC_OscConfig+0x244>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fc64 	bl	8000c58 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fc60 	bl	8000c58 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e187      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d036      	beq.n	800142c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d016      	beq.n	80013f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_RCC_OscConfig+0x248>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013cc:	f7ff fc44 	bl	8000c58 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fc40 	bl	8000c58 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e167      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <HAL_RCC_OscConfig+0x240>)
 80013e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x200>
 80013f2:	e01b      	b.n	800142c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f4:	4b09      	ldr	r3, [pc, #36]	@ (800141c <HAL_RCC_OscConfig+0x248>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fc2d 	bl	8000c58 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	e00e      	b.n	8001420 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001402:	f7ff fc29 	bl	8000c58 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d907      	bls.n	8001420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e150      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
 8001414:	40023800 	.word	0x40023800
 8001418:	42470000 	.word	0x42470000
 800141c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	4b88      	ldr	r3, [pc, #544]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 8001422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1ea      	bne.n	8001402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 8097 	beq.w	8001568 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143e:	4b81      	ldr	r3, [pc, #516]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10f      	bne.n	800146a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b7d      	ldr	r3, [pc, #500]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	4a7c      	ldr	r2, [pc, #496]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	@ 0x40
 800145a:	4b7a      	ldr	r3, [pc, #488]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001466:	2301      	movs	r3, #1
 8001468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146a:	4b77      	ldr	r3, [pc, #476]	@ (8001648 <HAL_RCC_OscConfig+0x474>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001472:	2b00      	cmp	r3, #0
 8001474:	d118      	bne.n	80014a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001476:	4b74      	ldr	r3, [pc, #464]	@ (8001648 <HAL_RCC_OscConfig+0x474>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a73      	ldr	r2, [pc, #460]	@ (8001648 <HAL_RCC_OscConfig+0x474>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001482:	f7ff fbe9 	bl	8000c58 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148a:	f7ff fbe5 	bl	8000c58 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e10c      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	4b6a      	ldr	r3, [pc, #424]	@ (8001648 <HAL_RCC_OscConfig+0x474>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d106      	bne.n	80014be <HAL_RCC_OscConfig+0x2ea>
 80014b0:	4b64      	ldr	r3, [pc, #400]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80014b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014b4:	4a63      	ldr	r2, [pc, #396]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80014bc:	e01c      	b.n	80014f8 <HAL_RCC_OscConfig+0x324>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d10c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x30c>
 80014c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80014d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0x324>
 80014e0:	4b58      	ldr	r3, [pc, #352]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e4:	4a57      	ldr	r2, [pc, #348]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ec:	4b55      	ldr	r3, [pc, #340]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f0:	4a54      	ldr	r2, [pc, #336]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80014f2:	f023 0304 	bic.w	r3, r3, #4
 80014f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d015      	beq.n	800152c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001500:	f7ff fbaa 	bl	8000c58 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001506:	e00a      	b.n	800151e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001508:	f7ff fba6 	bl	8000c58 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e0cb      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151e:	4b49      	ldr	r3, [pc, #292]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0ee      	beq.n	8001508 <HAL_RCC_OscConfig+0x334>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152c:	f7ff fb94 	bl	8000c58 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fb90 	bl	8000c58 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0b5      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154a:	4b3e      	ldr	r3, [pc, #248]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1ee      	bne.n	8001534 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155c:	4b39      	ldr	r3, [pc, #228]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	4a38      	ldr	r2, [pc, #224]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001566:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a1 	beq.w	80016b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001572:	4b34      	ldr	r3, [pc, #208]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b08      	cmp	r3, #8
 800157c:	d05c      	beq.n	8001638 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d141      	bne.n	800160a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	4b31      	ldr	r3, [pc, #196]	@ (800164c <HAL_RCC_OscConfig+0x478>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fb64 	bl	8000c58 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fb60 	bl	8000c58 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e087      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a6:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69da      	ldr	r2, [r3, #28]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c0:	019b      	lsls	r3, r3, #6
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	3b01      	subs	r3, #1
 80015cc:	041b      	lsls	r3, r3, #16
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d4:	061b      	lsls	r3, r3, #24
 80015d6:	491b      	ldr	r1, [pc, #108]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015dc:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_RCC_OscConfig+0x478>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb39 	bl	8000c58 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ea:	f7ff fb35 	bl	8000c58 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e05c      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x416>
 8001608:	e054      	b.n	80016b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_RCC_OscConfig+0x478>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fb22 	bl	8000c58 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fb1e 	bl	8000c58 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e045      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_RCC_OscConfig+0x470>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x444>
 8001636:	e03d      	b.n	80016b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d107      	bne.n	8001650 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e038      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
 8001644:	40023800 	.word	0x40023800
 8001648:	40007000 	.word	0x40007000
 800164c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <HAL_RCC_OscConfig+0x4ec>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d028      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d121      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d11a      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001680:	4013      	ands	r3, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001688:	4293      	cmp	r3, r2
 800168a:	d111      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	3b01      	subs	r3, #1
 800169a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0cc      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d8:	4b68      	ldr	r3, [pc, #416]	@ (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d90c      	bls.n	8001700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b65      	ldr	r3, [pc, #404]	@ (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b63      	ldr	r3, [pc, #396]	@ (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0b8      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001718:	4b59      	ldr	r3, [pc, #356]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a58      	ldr	r2, [pc, #352]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001722:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001730:	4b53      	ldr	r3, [pc, #332]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4a52      	ldr	r2, [pc, #328]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800173a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173c:	4b50      	ldr	r3, [pc, #320]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	494d      	ldr	r1, [pc, #308]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d044      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b47      	ldr	r3, [pc, #284]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d119      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e07f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d003      	beq.n	8001782 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177e:	2b03      	cmp	r3, #3
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001782:	4b3f      	ldr	r3, [pc, #252]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e06f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	4b3b      	ldr	r3, [pc, #236]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e067      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a2:	4b37      	ldr	r3, [pc, #220]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f023 0203 	bic.w	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4934      	ldr	r1, [pc, #208]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b4:	f7ff fa50 	bl	8000c58 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017bc:	f7ff fa4c 	bl	8000c58 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e04f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 020c 	and.w	r2, r3, #12
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d1eb      	bne.n	80017bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017e4:	4b25      	ldr	r3, [pc, #148]	@ (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d20c      	bcs.n	800180c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b22      	ldr	r3, [pc, #136]	@ (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b20      	ldr	r3, [pc, #128]	@ (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e032      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4916      	ldr	r1, [pc, #88]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001836:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	490e      	ldr	r1, [pc, #56]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800184a:	f000 f821 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 800184e:	4602      	mov	r2, r0
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	490a      	ldr	r1, [pc, #40]	@ (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	5ccb      	ldrb	r3, [r1, r3]
 800185e:	fa22 f303 	lsr.w	r3, r2, r3
 8001862:	4a09      	ldr	r2, [pc, #36]	@ (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <HAL_RCC_ClockConfig+0x1c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f836 	bl	80008dc <HAL_InitTick>

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00
 8001880:	40023800 	.word	0x40023800
 8001884:	08005ba8 	.word	0x08005ba8
 8001888:	20000008 	.word	0x20000008
 800188c:	2000000c 	.word	0x2000000c

08001890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001894:	b094      	sub	sp, #80	@ 0x50
 8001896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a8:	4b79      	ldr	r3, [pc, #484]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d00d      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x40>
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	f200 80e1 	bhi.w	8001a7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x34>
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d003      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x3a>
 80018c2:	e0db      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c4:	4b73      	ldr	r3, [pc, #460]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0x204>)
 80018c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018c8:	e0db      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ca:	4b73      	ldr	r3, [pc, #460]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x208>)
 80018cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018ce:	e0d8      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018da:	4b6d      	ldr	r3, [pc, #436]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d063      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	099b      	lsrs	r3, r3, #6
 80018ec:	2200      	movs	r2, #0
 80018ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80018fa:	2300      	movs	r3, #0
 80018fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80018fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001902:	4622      	mov	r2, r4
 8001904:	462b      	mov	r3, r5
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	0159      	lsls	r1, r3, #5
 8001910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001914:	0150      	lsls	r0, r2, #5
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4621      	mov	r1, r4
 800191c:	1a51      	subs	r1, r2, r1
 800191e:	6139      	str	r1, [r7, #16]
 8001920:	4629      	mov	r1, r5
 8001922:	eb63 0301 	sbc.w	r3, r3, r1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001934:	4659      	mov	r1, fp
 8001936:	018b      	lsls	r3, r1, #6
 8001938:	4651      	mov	r1, sl
 800193a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193e:	4651      	mov	r1, sl
 8001940:	018a      	lsls	r2, r1, #6
 8001942:	4651      	mov	r1, sl
 8001944:	ebb2 0801 	subs.w	r8, r2, r1
 8001948:	4659      	mov	r1, fp
 800194a:	eb63 0901 	sbc.w	r9, r3, r1
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800195a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800195e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001962:	4690      	mov	r8, r2
 8001964:	4699      	mov	r9, r3
 8001966:	4623      	mov	r3, r4
 8001968:	eb18 0303 	adds.w	r3, r8, r3
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	462b      	mov	r3, r5
 8001970:	eb49 0303 	adc.w	r3, r9, r3
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001982:	4629      	mov	r1, r5
 8001984:	024b      	lsls	r3, r1, #9
 8001986:	4621      	mov	r1, r4
 8001988:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800198c:	4621      	mov	r1, r4
 800198e:	024a      	lsls	r2, r1, #9
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001996:	2200      	movs	r2, #0
 8001998:	62bb      	str	r3, [r7, #40]	@ 0x28
 800199a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800199c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019a0:	f7fe fc1e 	bl	80001e0 <__aeabi_uldivmod>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4613      	mov	r3, r2
 80019aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ac:	e058      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ae:	4b38      	ldr	r3, [pc, #224]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	099b      	lsrs	r3, r3, #6
 80019b4:	2200      	movs	r2, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	4611      	mov	r1, r2
 80019ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019be:	623b      	str	r3, [r7, #32]
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019c8:	4642      	mov	r2, r8
 80019ca:	464b      	mov	r3, r9
 80019cc:	f04f 0000 	mov.w	r0, #0
 80019d0:	f04f 0100 	mov.w	r1, #0
 80019d4:	0159      	lsls	r1, r3, #5
 80019d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019da:	0150      	lsls	r0, r2, #5
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4641      	mov	r1, r8
 80019e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80019e6:	4649      	mov	r1, r9
 80019e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a00:	ebb2 040a 	subs.w	r4, r2, sl
 8001a04:	eb63 050b 	sbc.w	r5, r3, fp
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	00eb      	lsls	r3, r5, #3
 8001a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a16:	00e2      	lsls	r2, r4, #3
 8001a18:	4614      	mov	r4, r2
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	4643      	mov	r3, r8
 8001a1e:	18e3      	adds	r3, r4, r3
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	464b      	mov	r3, r9
 8001a24:	eb45 0303 	adc.w	r3, r5, r3
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a36:	4629      	mov	r1, r5
 8001a38:	028b      	lsls	r3, r1, #10
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a40:	4621      	mov	r1, r4
 8001a42:	028a      	lsls	r2, r1, #10
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	61fa      	str	r2, [r7, #28]
 8001a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a54:	f7fe fbc4 	bl	80001e0 <__aeabi_uldivmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	0c1b      	lsrs	r3, r3, #16
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a7a:	e002      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3750      	adds	r7, #80	@ 0x50
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	00f42400 	.word	0x00f42400
 8001a98:	007a1200 	.word	0x007a1200

08001a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab8:	f7ff fff0 	bl	8001a9c <HAL_RCC_GetHCLKFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	0a9b      	lsrs	r3, r3, #10
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4903      	ldr	r1, [pc, #12]	@ (8001ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aca:	5ccb      	ldrb	r3, [r1, r3]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08005bb8 	.word	0x08005bb8

08001adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ae0:	f7ff ffdc 	bl	8001a9c <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0b5b      	lsrs	r3, r3, #13
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4903      	ldr	r1, [pc, #12]	@ (8001b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	08005bb8 	.word	0x08005bb8

08001b04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	220f      	movs	r2, #15
 8001b12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_RCC_GetClockConfig+0x5c>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <HAL_RCC_GetClockConfig+0x5c>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b38:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	08db      	lsrs	r3, r3, #3
 8001b3e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <HAL_RCC_GetClockConfig+0x60>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0207 	and.w	r2, r3, #7
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40023c00 	.word	0x40023c00

08001b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e041      	b.n	8001bfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f839 	bl	8001c06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	f000 f9b2 	bl	8001f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d001      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e044      	b.n	8001cbe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1e      	ldr	r2, [pc, #120]	@ (8001ccc <HAL_TIM_Base_Start_IT+0xb0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d018      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x6c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c5e:	d013      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x6c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00e      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x6c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a19      	ldr	r2, [pc, #100]	@ (8001cd4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d009      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x6c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a17      	ldr	r2, [pc, #92]	@ (8001cd8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d004      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x6c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a16      	ldr	r2, [pc, #88]	@ (8001cdc <HAL_TIM_Base_Start_IT+0xc0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d111      	bne.n	8001cac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d010      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001caa:	e007      	b.n	8001cbc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40010000 	.word	0x40010000
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40000800 	.word	0x40000800
 8001cd8:	40000c00 	.word	0x40000c00
 8001cdc:	40014000 	.word	0x40014000

08001ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d020      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01b      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0202 	mvn.w	r2, #2
 8001d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8d2 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8c4 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f8d5 	bl	8001ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d020      	beq.n	8001d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01b      	beq.n	8001d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0204 	mvn.w	r2, #4
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2202      	movs	r2, #2
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8ac 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f89e 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f8af 	bl	8001ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d020      	beq.n	8001ddc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01b      	beq.n	8001ddc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0208 	mvn.w	r2, #8
 8001dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2204      	movs	r2, #4
 8001db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f886 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f878 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f889 	bl	8001ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d020      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01b      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0210 	mvn.w	r2, #16
 8001df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f860 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8001e14:	e005      	b.n	8001e22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f852 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f863 	bl	8001ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0201 	mvn.w	r2, #1
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fd04 	bl	8000854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00c      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8e6 	bl	800203c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00c      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f834 	bl	8001efc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0220 	mvn.w	r2, #32
 8001eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8b8 	bl	8002028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a3a      	ldr	r2, [pc, #232]	@ (800200c <TIM_Base_SetConfig+0xfc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00f      	beq.n	8001f48 <TIM_Base_SetConfig+0x38>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f2e:	d00b      	beq.n	8001f48 <TIM_Base_SetConfig+0x38>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a37      	ldr	r2, [pc, #220]	@ (8002010 <TIM_Base_SetConfig+0x100>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d007      	beq.n	8001f48 <TIM_Base_SetConfig+0x38>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a36      	ldr	r2, [pc, #216]	@ (8002014 <TIM_Base_SetConfig+0x104>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d003      	beq.n	8001f48 <TIM_Base_SetConfig+0x38>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a35      	ldr	r2, [pc, #212]	@ (8002018 <TIM_Base_SetConfig+0x108>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d108      	bne.n	8001f5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800200c <TIM_Base_SetConfig+0xfc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01b      	beq.n	8001f9a <TIM_Base_SetConfig+0x8a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f68:	d017      	beq.n	8001f9a <TIM_Base_SetConfig+0x8a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a28      	ldr	r2, [pc, #160]	@ (8002010 <TIM_Base_SetConfig+0x100>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <TIM_Base_SetConfig+0x8a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a27      	ldr	r2, [pc, #156]	@ (8002014 <TIM_Base_SetConfig+0x104>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00f      	beq.n	8001f9a <TIM_Base_SetConfig+0x8a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a26      	ldr	r2, [pc, #152]	@ (8002018 <TIM_Base_SetConfig+0x108>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00b      	beq.n	8001f9a <TIM_Base_SetConfig+0x8a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a25      	ldr	r2, [pc, #148]	@ (800201c <TIM_Base_SetConfig+0x10c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <TIM_Base_SetConfig+0x8a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a24      	ldr	r2, [pc, #144]	@ (8002020 <TIM_Base_SetConfig+0x110>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d003      	beq.n	8001f9a <TIM_Base_SetConfig+0x8a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a23      	ldr	r2, [pc, #140]	@ (8002024 <TIM_Base_SetConfig+0x114>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d108      	bne.n	8001fac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <TIM_Base_SetConfig+0xfc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d103      	bne.n	8001fe0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d105      	bne.n	8001ffe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f023 0201 	bic.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	611a      	str	r2, [r3, #16]
  }
}
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40010000 	.word	0x40010000
 8002010:	40000400 	.word	0x40000400
 8002014:	40000800 	.word	0x40000800
 8002018:	40000c00 	.word	0x40000c00
 800201c:	40014000 	.word	0x40014000
 8002020:	40014400 	.word	0x40014400
 8002024:	40014800 	.word	0x40014800

08002028 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e042      	b.n	80020e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fd46 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2224      	movs	r2, #36	@ 0x24
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f82b 	bl	80020f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f4:	b0c0      	sub	sp, #256	@ 0x100
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800210c:	68d9      	ldr	r1, [r3, #12]
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	ea40 0301 	orr.w	r3, r0, r1
 8002118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800211a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	431a      	orrs	r2, r3
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	431a      	orrs	r2, r3
 8002130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800213c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002148:	f021 010c 	bic.w	r1, r1, #12
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002156:	430b      	orrs	r3, r1
 8002158:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800215a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800216a:	6999      	ldr	r1, [r3, #24]
 800216c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	ea40 0301 	orr.w	r3, r0, r1
 8002176:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b8f      	ldr	r3, [pc, #572]	@ (80023bc <UART_SetConfig+0x2cc>)
 8002180:	429a      	cmp	r2, r3
 8002182:	d005      	beq.n	8002190 <UART_SetConfig+0xa0>
 8002184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4b8d      	ldr	r3, [pc, #564]	@ (80023c0 <UART_SetConfig+0x2d0>)
 800218c:	429a      	cmp	r2, r3
 800218e:	d104      	bne.n	800219a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002190:	f7ff fca4 	bl	8001adc <HAL_RCC_GetPCLK2Freq>
 8002194:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002198:	e003      	b.n	80021a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800219a:	f7ff fc8b 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 800219e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021ac:	f040 810c 	bne.w	80023c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021b4:	2200      	movs	r2, #0
 80021b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80021ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80021be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80021c2:	4622      	mov	r2, r4
 80021c4:	462b      	mov	r3, r5
 80021c6:	1891      	adds	r1, r2, r2
 80021c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80021ca:	415b      	adcs	r3, r3
 80021cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80021ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021d2:	4621      	mov	r1, r4
 80021d4:	eb12 0801 	adds.w	r8, r2, r1
 80021d8:	4629      	mov	r1, r5
 80021da:	eb43 0901 	adc.w	r9, r3, r1
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021f2:	4690      	mov	r8, r2
 80021f4:	4699      	mov	r9, r3
 80021f6:	4623      	mov	r3, r4
 80021f8:	eb18 0303 	adds.w	r3, r8, r3
 80021fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002200:	462b      	mov	r3, r5
 8002202:	eb49 0303 	adc.w	r3, r9, r3
 8002206:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800220a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002216:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800221a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800221e:	460b      	mov	r3, r1
 8002220:	18db      	adds	r3, r3, r3
 8002222:	653b      	str	r3, [r7, #80]	@ 0x50
 8002224:	4613      	mov	r3, r2
 8002226:	eb42 0303 	adc.w	r3, r2, r3
 800222a:	657b      	str	r3, [r7, #84]	@ 0x54
 800222c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002230:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002234:	f7fd ffd4 	bl	80001e0 <__aeabi_uldivmod>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4b61      	ldr	r3, [pc, #388]	@ (80023c4 <UART_SetConfig+0x2d4>)
 800223e:	fba3 2302 	umull	r2, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	011c      	lsls	r4, r3, #4
 8002246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800224a:	2200      	movs	r2, #0
 800224c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002250:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002254:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002258:	4642      	mov	r2, r8
 800225a:	464b      	mov	r3, r9
 800225c:	1891      	adds	r1, r2, r2
 800225e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002260:	415b      	adcs	r3, r3
 8002262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002264:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002268:	4641      	mov	r1, r8
 800226a:	eb12 0a01 	adds.w	sl, r2, r1
 800226e:	4649      	mov	r1, r9
 8002270:	eb43 0b01 	adc.w	fp, r3, r1
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002280:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002288:	4692      	mov	sl, r2
 800228a:	469b      	mov	fp, r3
 800228c:	4643      	mov	r3, r8
 800228e:	eb1a 0303 	adds.w	r3, sl, r3
 8002292:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002296:	464b      	mov	r3, r9
 8002298:	eb4b 0303 	adc.w	r3, fp, r3
 800229c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80022ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80022b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80022b4:	460b      	mov	r3, r1
 80022b6:	18db      	adds	r3, r3, r3
 80022b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80022ba:	4613      	mov	r3, r2
 80022bc:	eb42 0303 	adc.w	r3, r2, r3
 80022c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80022c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80022c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80022ca:	f7fd ff89 	bl	80001e0 <__aeabi_uldivmod>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	4b3b      	ldr	r3, [pc, #236]	@ (80023c4 <UART_SetConfig+0x2d4>)
 80022d6:	fba3 2301 	umull	r2, r3, r3, r1
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2264      	movs	r2, #100	@ 0x64
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	1acb      	subs	r3, r1, r3
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80022ea:	4b36      	ldr	r3, [pc, #216]	@ (80023c4 <UART_SetConfig+0x2d4>)
 80022ec:	fba3 2302 	umull	r2, r3, r3, r2
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80022f8:	441c      	add	r4, r3
 80022fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022fe:	2200      	movs	r2, #0
 8002300:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002304:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002308:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800230c:	4642      	mov	r2, r8
 800230e:	464b      	mov	r3, r9
 8002310:	1891      	adds	r1, r2, r2
 8002312:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002314:	415b      	adcs	r3, r3
 8002316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002318:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800231c:	4641      	mov	r1, r8
 800231e:	1851      	adds	r1, r2, r1
 8002320:	6339      	str	r1, [r7, #48]	@ 0x30
 8002322:	4649      	mov	r1, r9
 8002324:	414b      	adcs	r3, r1
 8002326:	637b      	str	r3, [r7, #52]	@ 0x34
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002334:	4659      	mov	r1, fp
 8002336:	00cb      	lsls	r3, r1, #3
 8002338:	4651      	mov	r1, sl
 800233a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800233e:	4651      	mov	r1, sl
 8002340:	00ca      	lsls	r2, r1, #3
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	4603      	mov	r3, r0
 8002348:	4642      	mov	r2, r8
 800234a:	189b      	adds	r3, r3, r2
 800234c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002350:	464b      	mov	r3, r9
 8002352:	460a      	mov	r2, r1
 8002354:	eb42 0303 	adc.w	r3, r2, r3
 8002358:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002368:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800236c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002370:	460b      	mov	r3, r1
 8002372:	18db      	adds	r3, r3, r3
 8002374:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002376:	4613      	mov	r3, r2
 8002378:	eb42 0303 	adc.w	r3, r2, r3
 800237c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800237e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002382:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002386:	f7fd ff2b 	bl	80001e0 <__aeabi_uldivmod>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <UART_SetConfig+0x2d4>)
 8002390:	fba3 1302 	umull	r1, r3, r3, r2
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	2164      	movs	r1, #100	@ 0x64
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	3332      	adds	r3, #50	@ 0x32
 80023a2:	4a08      	ldr	r2, [pc, #32]	@ (80023c4 <UART_SetConfig+0x2d4>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	f003 0207 	and.w	r2, r3, #7
 80023ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4422      	add	r2, r4
 80023b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023b8:	e106      	b.n	80025c8 <UART_SetConfig+0x4d8>
 80023ba:	bf00      	nop
 80023bc:	40011000 	.word	0x40011000
 80023c0:	40011400 	.word	0x40011400
 80023c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023cc:	2200      	movs	r2, #0
 80023ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80023d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80023d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80023da:	4642      	mov	r2, r8
 80023dc:	464b      	mov	r3, r9
 80023de:	1891      	adds	r1, r2, r2
 80023e0:	6239      	str	r1, [r7, #32]
 80023e2:	415b      	adcs	r3, r3
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023ea:	4641      	mov	r1, r8
 80023ec:	1854      	adds	r4, r2, r1
 80023ee:	4649      	mov	r1, r9
 80023f0:	eb43 0501 	adc.w	r5, r3, r1
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	00eb      	lsls	r3, r5, #3
 80023fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002402:	00e2      	lsls	r2, r4, #3
 8002404:	4614      	mov	r4, r2
 8002406:	461d      	mov	r5, r3
 8002408:	4643      	mov	r3, r8
 800240a:	18e3      	adds	r3, r4, r3
 800240c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002410:	464b      	mov	r3, r9
 8002412:	eb45 0303 	adc.w	r3, r5, r3
 8002416:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800241a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002426:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002436:	4629      	mov	r1, r5
 8002438:	008b      	lsls	r3, r1, #2
 800243a:	4621      	mov	r1, r4
 800243c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002440:	4621      	mov	r1, r4
 8002442:	008a      	lsls	r2, r1, #2
 8002444:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002448:	f7fd feca 	bl	80001e0 <__aeabi_uldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4b60      	ldr	r3, [pc, #384]	@ (80025d4 <UART_SetConfig+0x4e4>)
 8002452:	fba3 2302 	umull	r2, r3, r3, r2
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	011c      	lsls	r4, r3, #4
 800245a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800245e:	2200      	movs	r2, #0
 8002460:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002464:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002468:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800246c:	4642      	mov	r2, r8
 800246e:	464b      	mov	r3, r9
 8002470:	1891      	adds	r1, r2, r2
 8002472:	61b9      	str	r1, [r7, #24]
 8002474:	415b      	adcs	r3, r3
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800247c:	4641      	mov	r1, r8
 800247e:	1851      	adds	r1, r2, r1
 8002480:	6139      	str	r1, [r7, #16]
 8002482:	4649      	mov	r1, r9
 8002484:	414b      	adcs	r3, r1
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002494:	4659      	mov	r1, fp
 8002496:	00cb      	lsls	r3, r1, #3
 8002498:	4651      	mov	r1, sl
 800249a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800249e:	4651      	mov	r1, sl
 80024a0:	00ca      	lsls	r2, r1, #3
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	4603      	mov	r3, r0
 80024a8:	4642      	mov	r2, r8
 80024aa:	189b      	adds	r3, r3, r2
 80024ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024b0:	464b      	mov	r3, r9
 80024b2:	460a      	mov	r2, r1
 80024b4:	eb42 0303 	adc.w	r3, r2, r3
 80024b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80024d4:	4649      	mov	r1, r9
 80024d6:	008b      	lsls	r3, r1, #2
 80024d8:	4641      	mov	r1, r8
 80024da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024de:	4641      	mov	r1, r8
 80024e0:	008a      	lsls	r2, r1, #2
 80024e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80024e6:	f7fd fe7b 	bl	80001e0 <__aeabi_uldivmod>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	4b38      	ldr	r3, [pc, #224]	@ (80025d4 <UART_SetConfig+0x4e4>)
 80024f2:	fba3 2301 	umull	r2, r3, r3, r1
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2264      	movs	r2, #100	@ 0x64
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	1acb      	subs	r3, r1, r3
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	3332      	adds	r3, #50	@ 0x32
 8002504:	4a33      	ldr	r2, [pc, #204]	@ (80025d4 <UART_SetConfig+0x4e4>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002510:	441c      	add	r4, r3
 8002512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002516:	2200      	movs	r2, #0
 8002518:	673b      	str	r3, [r7, #112]	@ 0x70
 800251a:	677a      	str	r2, [r7, #116]	@ 0x74
 800251c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002520:	4642      	mov	r2, r8
 8002522:	464b      	mov	r3, r9
 8002524:	1891      	adds	r1, r2, r2
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	415b      	adcs	r3, r3
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002530:	4641      	mov	r1, r8
 8002532:	1851      	adds	r1, r2, r1
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	4649      	mov	r1, r9
 8002538:	414b      	adcs	r3, r1
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002548:	4659      	mov	r1, fp
 800254a:	00cb      	lsls	r3, r1, #3
 800254c:	4651      	mov	r1, sl
 800254e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002552:	4651      	mov	r1, sl
 8002554:	00ca      	lsls	r2, r1, #3
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	4603      	mov	r3, r0
 800255c:	4642      	mov	r2, r8
 800255e:	189b      	adds	r3, r3, r2
 8002560:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002562:	464b      	mov	r3, r9
 8002564:	460a      	mov	r2, r1
 8002566:	eb42 0303 	adc.w	r3, r2, r3
 800256a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	663b      	str	r3, [r7, #96]	@ 0x60
 8002576:	667a      	str	r2, [r7, #100]	@ 0x64
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002584:	4649      	mov	r1, r9
 8002586:	008b      	lsls	r3, r1, #2
 8002588:	4641      	mov	r1, r8
 800258a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800258e:	4641      	mov	r1, r8
 8002590:	008a      	lsls	r2, r1, #2
 8002592:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002596:	f7fd fe23 	bl	80001e0 <__aeabi_uldivmod>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <UART_SetConfig+0x4e4>)
 80025a0:	fba3 1302 	umull	r1, r3, r3, r2
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	2164      	movs	r1, #100	@ 0x64
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	3332      	adds	r3, #50	@ 0x32
 80025b2:	4a08      	ldr	r2, [pc, #32]	@ (80025d4 <UART_SetConfig+0x4e4>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	f003 020f 	and.w	r2, r3, #15
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4422      	add	r2, r4
 80025c6:	609a      	str	r2, [r3, #8]
}
 80025c8:	bf00      	nop
 80025ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80025ce:	46bd      	mov	sp, r7
 80025d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025d4:	51eb851f 	.word	0x51eb851f

080025d8 <__NVIC_SetPriority>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	@ (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	@ (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002630:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <SysTick_Handler+0x1c>)
 8002632:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002634:	f002 f966 	bl	8004904 <xTaskGetSchedulerState>
 8002638:	4603      	mov	r3, r0
 800263a:	2b01      	cmp	r3, #1
 800263c:	d001      	beq.n	8002642 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800263e:	f002 ff93 	bl	8005568 <xPortSysTickHandler>
  }
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010

0800264c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002650:	2100      	movs	r1, #0
 8002652:	f06f 0004 	mvn.w	r0, #4
 8002656:	f7ff ffbf 	bl	80025d8 <__NVIC_SetPriority>
#endif
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002666:	f3ef 8305 	mrs	r3, IPSR
 800266a:	603b      	str	r3, [r7, #0]
  return(result);
 800266c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002672:	f06f 0305 	mvn.w	r3, #5
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	e00c      	b.n	8002694 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800267a:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <osKernelInitialize+0x44>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002682:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <osKernelInitialize+0x44>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002688:	2300      	movs	r3, #0
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	e002      	b.n	8002694 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002694:	687b      	ldr	r3, [r7, #4]
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	200000d8 	.word	0x200000d8

080026a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ae:	f3ef 8305 	mrs	r3, IPSR
 80026b2:	603b      	str	r3, [r7, #0]
  return(result);
 80026b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80026ba:	f06f 0305 	mvn.w	r3, #5
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	e010      	b.n	80026e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80026c2:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <osKernelStart+0x48>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d109      	bne.n	80026de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80026ca:	f7ff ffbf 	bl	800264c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80026ce:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <osKernelStart+0x48>)
 80026d0:	2202      	movs	r2, #2
 80026d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80026d4:	f001 fc26 	bl	8003f24 <vTaskStartScheduler>
      stat = osOK;
 80026d8:	2300      	movs	r3, #0
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	e002      	b.n	80026e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026e4:	687b      	ldr	r3, [r7, #4]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200000d8 	.word	0x200000d8

080026f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08e      	sub	sp, #56	@ 0x38
 80026f8:	af04      	add	r7, sp, #16
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002704:	f3ef 8305 	mrs	r3, IPSR
 8002708:	617b      	str	r3, [r7, #20]
  return(result);
 800270a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800270c:	2b00      	cmp	r3, #0
 800270e:	d17e      	bne.n	800280e <osThreadNew+0x11a>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d07b      	beq.n	800280e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800271a:	2318      	movs	r3, #24
 800271c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d045      	beq.n	80027ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <osThreadNew+0x48>
        name = attr->name;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <osThreadNew+0x6e>
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b38      	cmp	r3, #56	@ 0x38
 8002754:	d805      	bhi.n	8002762 <osThreadNew+0x6e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <osThreadNew+0x72>
        return (NULL);
 8002762:	2300      	movs	r3, #0
 8002764:	e054      	b.n	8002810 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00e      	beq.n	800279c <osThreadNew+0xa8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b5b      	cmp	r3, #91	@ 0x5b
 8002784:	d90a      	bls.n	800279c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800278a:	2b00      	cmp	r3, #0
 800278c:	d006      	beq.n	800279c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <osThreadNew+0xa8>
        mem = 1;
 8002796:	2301      	movs	r3, #1
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	e010      	b.n	80027be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10c      	bne.n	80027be <osThreadNew+0xca>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d108      	bne.n	80027be <osThreadNew+0xca>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d104      	bne.n	80027be <osThreadNew+0xca>
          mem = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	e001      	b.n	80027be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d110      	bne.n	80027e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027cc:	9202      	str	r2, [sp, #8]
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	6a3a      	ldr	r2, [r7, #32]
 80027d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f001 f9c6 	bl	8003b6c <xTaskCreateStatic>
 80027e0:	4603      	mov	r3, r0
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	e013      	b.n	800280e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d110      	bne.n	800280e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f001 fa14 	bl	8003c2c <xTaskCreate>
 8002804:	4603      	mov	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	d001      	beq.n	800280e <osThreadNew+0x11a>
            hTask = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800280e:	693b      	ldr	r3, [r7, #16]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3728      	adds	r7, #40	@ 0x28
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002820:	f3ef 8305 	mrs	r3, IPSR
 8002824:	60bb      	str	r3, [r7, #8]
  return(result);
 8002826:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <osDelay+0x1c>
    stat = osErrorISR;
 800282c:	f06f 0305 	mvn.w	r3, #5
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e007      	b.n	8002844 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <osDelay+0x2c>
      vTaskDelay(ticks);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f001 fb3a 	bl	8003eb8 <vTaskDelay>
    }
  }

  return (stat);
 8002844:	68fb      	ldr	r3, [r7, #12]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800285a:	f3ef 8305 	mrs	r3, IPSR
 800285e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002860:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002862:	2b00      	cmp	r3, #0
 8002864:	d12d      	bne.n	80028c2 <osEventFlagsNew+0x74>
    mem = -1;
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
 800286a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d015      	beq.n	800289e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <osEventFlagsNew+0x3a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b1f      	cmp	r3, #31
 8002880:	d902      	bls.n	8002888 <osEventFlagsNew+0x3a>
        mem = 1;
 8002882:	2301      	movs	r3, #1
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	e00c      	b.n	80028a2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d108      	bne.n	80028a2 <osEventFlagsNew+0x54>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <osEventFlagsNew+0x54>
          mem = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	e001      	b.n	80028a2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d106      	bne.n	80028b6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 f93b 	bl	8002b28 <xEventGroupCreateStatic>
 80028b2:	6178      	str	r0, [r7, #20]
 80028b4:	e005      	b.n	80028c2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80028bc:	f000 f96d 	bl	8002b9a <xEventGroupCreate>
 80028c0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80028c2:	697b      	ldr	r3, [r7, #20]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <osEventFlagsSet+0x1c>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028e6:	d303      	bcc.n	80028f0 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80028e8:	f06f 0303 	mvn.w	r3, #3
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	e028      	b.n	8002942 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028f0:	f3ef 8305 	mrs	r3, IPSR
 80028f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80028f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01d      	beq.n	8002938 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002900:	f107 0308 	add.w	r3, r7, #8
 8002904:	461a      	mov	r2, r3
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	6938      	ldr	r0, [r7, #16]
 800290a:	f000 fb6d 	bl	8002fe8 <xEventGroupSetBitsFromISR>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8002914:	f06f 0302 	mvn.w	r3, #2
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	e012      	b.n	8002942 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00d      	beq.n	8002942 <osEventFlagsSet+0x76>
 8002926:	4b09      	ldr	r3, [pc, #36]	@ (800294c <osEventFlagsSet+0x80>)
 8002928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	e004      	b.n	8002942 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8002938:	6839      	ldr	r1, [r7, #0]
 800293a:	6938      	ldr	r0, [r7, #16]
 800293c:	f000 fa8c 	bl	8002e58 <xEventGroupSetBits>
 8002940:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002942:	697b      	ldr	r3, [r7, #20]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	e000ed04 	.word	0xe000ed04

08002950 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <osEventFlagsClear+0x1c>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800296a:	d303      	bcc.n	8002974 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 800296c:	f06f 0303 	mvn.w	r3, #3
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e019      	b.n	80029a8 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002974:	f3ef 8305 	mrs	r3, IPSR
 8002978:	60fb      	str	r3, [r7, #12]
  return(result);
 800297a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8002980:	6938      	ldr	r0, [r7, #16]
 8002982:	f000 fa45 	bl	8002e10 <xEventGroupGetBitsFromISR>
 8002986:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8002988:	6839      	ldr	r1, [r7, #0]
 800298a:	6938      	ldr	r0, [r7, #16]
 800298c:	f000 fa2c 	bl	8002de8 <xEventGroupClearBitsFromISR>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d108      	bne.n	80029a8 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 8002996:	f06f 0302 	mvn.w	r3, #2
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e004      	b.n	80029a8 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800299e:	6839      	ldr	r1, [r7, #0]
 80029a0:	6938      	ldr	r0, [r7, #16]
 80029a2:	f000 f9e7 	bl	8002d74 <xEventGroupClearBits>
 80029a6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80029a8:	697b      	ldr	r3, [r7, #20]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <osEventFlagsGet+0x18>
    rflags = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e00f      	b.n	80029ea <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029ca:	f3ef 8305 	mrs	r3, IPSR
 80029ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80029d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d004      	beq.n	80029e0 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80029d6:	6938      	ldr	r0, [r7, #16]
 80029d8:	f000 fa1a 	bl	8002e10 <xEventGroupGetBitsFromISR>
 80029dc:	6178      	str	r0, [r7, #20]
 80029de:	e004      	b.n	80029ea <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 80029e0:	2100      	movs	r1, #0
 80029e2:	6938      	ldr	r0, [r7, #16]
 80029e4:	f000 f9c6 	bl	8002d74 <xEventGroupClearBits>
 80029e8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80029ea:	697b      	ldr	r3, [r7, #20]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08c      	sub	sp, #48	@ 0x30
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <osEventFlagsWait+0x20>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a12:	d303      	bcc.n	8002a1c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8002a14:	f06f 0303 	mvn.w	r3, #3
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e04b      	b.n	8002ab4 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a1c:	f3ef 8305 	mrs	r3, IPSR
 8002a20:	617b      	str	r3, [r7, #20]
  return(result);
 8002a22:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8002a28:	f06f 0305 	mvn.w	r3, #5
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	e041      	b.n	8002ab4 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3e:	e001      	b.n	8002a44 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	623b      	str	r3, [r7, #32]
 8002a52:	e001      	b.n	8002a58 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8002a54:	2301      	movs	r3, #1
 8002a56:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	6a3a      	ldr	r2, [r7, #32]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	69b8      	ldr	r0, [r7, #24]
 8002a64:	f000 f8b4 	bl	8002bd0 <xEventGroupWaitBits>
 8002a68:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d010      	beq.n	8002a96 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d019      	beq.n	8002ab4 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8002a86:	f06f 0301 	mvn.w	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	e012      	b.n	8002ab4 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002a8e:	f06f 0302 	mvn.w	r3, #2
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	e00e      	b.n	8002ab4 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8002aa6:	f06f 0301 	mvn.w	r3, #1
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	e002      	b.n	8002ab4 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002aae:	f06f 0302 	mvn.w	r3, #2
 8002ab2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3728      	adds	r7, #40	@ 0x28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4a07      	ldr	r2, [pc, #28]	@ (8002aec <vApplicationGetIdleTaskMemory+0x2c>)
 8002ad0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4a06      	ldr	r2, [pc, #24]	@ (8002af0 <vApplicationGetIdleTaskMemory+0x30>)
 8002ad6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2280      	movs	r2, #128	@ 0x80
 8002adc:	601a      	str	r2, [r3, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	200000dc 	.word	0x200000dc
 8002af0:	20000138 	.word	0x20000138

08002af4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a07      	ldr	r2, [pc, #28]	@ (8002b20 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4a06      	ldr	r2, [pc, #24]	@ (8002b24 <vApplicationGetTimerTaskMemory+0x30>)
 8002b0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b12:	601a      	str	r2, [r3, #0]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	20000338 	.word	0x20000338
 8002b24:	20000394 	.word	0x20000394

08002b28 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10b      	bne.n	8002b4e <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	e7fd      	b.n	8002b4a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002b4e:	2320      	movs	r3, #32
 8002b50:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d00b      	beq.n	8002b70 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	60fb      	str	r3, [r7, #12]
}
 8002b6a:	bf00      	nop
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fa43 	bl	8003010 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8002b90:	697b      	ldr	r3, [r7, #20]
	}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002ba0:	2020      	movs	r0, #32
 8002ba2:	f002 fd73 	bl	800568c <pvPortMalloc>
 8002ba6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fa29 	bl	8003010 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8002bc4:	687b      	ldr	r3, [r7, #4]
	}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b090      	sub	sp, #64	@ 0x40
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <xEventGroupWaitBits+0x38>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	623b      	str	r3, [r7, #32]
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c0e:	d30b      	bcc.n	8002c28 <xEventGroupWaitBits+0x58>
	__asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	61fb      	str	r3, [r7, #28]
}
 8002c22:	bf00      	nop
 8002c24:	bf00      	nop
 8002c26:	e7fd      	b.n	8002c24 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10b      	bne.n	8002c46 <xEventGroupWaitBits+0x76>
	__asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	61bb      	str	r3, [r7, #24]
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	e7fd      	b.n	8002c42 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c46:	f001 fe5d 	bl	8004904 <xTaskGetSchedulerState>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <xEventGroupWaitBits+0x86>
 8002c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <xEventGroupWaitBits+0x8a>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <xEventGroupWaitBits+0x8c>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	617b      	str	r3, [r7, #20]
}
 8002c72:	bf00      	nop
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8002c78:	f001 f9bc 	bl	8003ff4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c88:	f000 f98c 	bl	8002fa4 <prvTestWaitCondition>
 8002c8c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8002c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00e      	beq.n	8002cb2 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8002c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d028      	beq.n	8002cf4 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	401a      	ands	r2, r3
 8002cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	e020      	b.n	8002cf4 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cc0:	e018      	b.n	8002cf4 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cce:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce0:	1d18      	adds	r0, r3, #4
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cea:	4619      	mov	r1, r3
 8002cec:	f001 fb7c 	bl	80043e8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002cf4:	f001 f98c 	bl	8004010 <xTaskResumeAll>
 8002cf8:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d031      	beq.n	8002d64 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d107      	bne.n	8002d16 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8002d06:	4b1a      	ldr	r3, [pc, #104]	@ (8002d70 <xEventGroupWaitBits+0x1a0>)
 8002d08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002d16:	f001 fe83 	bl	8004a20 <uxTaskResetEventItemValue>
 8002d1a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d11a      	bne.n	8002d5c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8002d26:	f002 fb8f 	bl	8005448 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002d36:	f000 f935 	bl	8002fa4 <prvTestWaitCondition>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d006      	beq.n	8002d54 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	401a      	ands	r2, r3
 8002d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d52:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8002d54:	2301      	movs	r3, #1
 8002d56:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8002d58:	f002 fba8 	bl	80054ac <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d5e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8002d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3740      	adds	r7, #64	@ 0x40
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10b      	bne.n	8002da0 <xEventGroupClearBits+0x2c>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	60fb      	str	r3, [r7, #12]
}
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
 8002d9e:	e7fd      	b.n	8002d9c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002da6:	d30b      	bcc.n	8002dc0 <xEventGroupClearBits+0x4c>
	__asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	60bb      	str	r3, [r7, #8]
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8002dc0:	f002 fb42 	bl	8005448 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8002dd8:	f002 fb68 	bl	80054ac <vPortExitCritical>

	return uxReturn;
 8002ddc:	693b      	ldr	r3, [r7, #16]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8002df2:	2300      	movs	r3, #0
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4804      	ldr	r0, [pc, #16]	@ (8002e0c <xEventGroupClearBitsFromISR+0x24>)
 8002dfa:	f002 f9d7 	bl	80051ac <xTimerPendFunctionCallFromISR>
 8002dfe:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8002e00:	68fb      	ldr	r3, [r7, #12]
	}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	08002f8b 	.word	0x08002f8b

08002e10 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	@ 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e1c:	f3ef 8211 	mrs	r2, BASEPRI
 8002e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	60fa      	str	r2, [r7, #12]
 8002e32:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e34:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e36:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e48:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8002e4a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3724      	adds	r7, #36	@ 0x24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08e      	sub	sp, #56	@ 0x38
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002e62:	2300      	movs	r3, #0
 8002e64:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10b      	bne.n	8002e8c <xEventGroupSetBits+0x34>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	613b      	str	r3, [r7, #16]
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	e7fd      	b.n	8002e88 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e92:	d30b      	bcc.n	8002eac <xEventGroupSetBits+0x54>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	60fb      	str	r3, [r7, #12]
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eae:	3304      	adds	r3, #4
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002eb8:	f001 f89c 	bl	8003ff4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ecc:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002ece:	e03c      	b.n	8002f4a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002ee6:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002eee:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d108      	bne.n	8002f0c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8002f06:	2301      	movs	r3, #1
 8002f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f0a:	e008      	b.n	8002f1e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d101      	bne.n	8002f1e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d010      	beq.n	8002f46 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f42:	f001 fb1f 	bl	8004584 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8002f4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d1be      	bne.n	8002ed0 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002f60:	f001 f856 	bl	8004010 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3738      	adds	r7, #56	@ 0x38
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8002f7a:	6839      	ldr	r1, [r7, #0]
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ff6b 	bl	8002e58 <xEventGroupSetBits>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8002f94:	6839      	ldr	r1, [r7, #0]
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff feec 	bl	8002d74 <xEventGroupClearBits>
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d107      	bne.n	8002fca <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e007      	b.n	8002fda <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d101      	bne.n	8002fda <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002fda:	697b      	ldr	r3, [r7, #20]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	4804      	ldr	r0, [pc, #16]	@ (800300c <xEventGroupSetBitsFromISR+0x24>)
 8002ffc:	f002 f8d6 	bl	80051ac <xTimerPendFunctionCallFromISR>
 8003000:	6178      	str	r0, [r7, #20]

		return xReturn;
 8003002:	697b      	ldr	r3, [r7, #20]
	}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	08002f71 	.word	0x08002f71

08003010 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f103 0208 	add.w	r2, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f103 0208 	add.w	r2, r3, #8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f103 0208 	add.w	r2, r3, #8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	601a      	str	r2, [r3, #0]
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d103      	bne.n	80030d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e00c      	b.n	80030ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3308      	adds	r3, #8
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e002      	b.n	80030e0 <vListInsert+0x2e>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d2f6      	bcs.n	80030da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	601a      	str	r2, [r3, #0]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6892      	ldr	r2, [r2, #8]
 800313a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6852      	ldr	r2, [r2, #4]
 8003144:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d103      	bne.n	8003158 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1e5a      	subs	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <xQueueGenericReset+0x2c>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	60bb      	str	r3, [r7, #8]
}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031a4:	f002 f950 	bl	8005448 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	441a      	add	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d4:	3b01      	subs	r3, #1
 80031d6:	68f9      	ldr	r1, [r7, #12]
 80031d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	441a      	add	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	22ff      	movs	r2, #255	@ 0xff
 80031e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	22ff      	movs	r2, #255	@ 0xff
 80031f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d114      	bne.n	8003224 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01a      	beq.n	8003238 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3310      	adds	r3, #16
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f958 	bl	80044bc <xTaskRemoveFromEventList>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d012      	beq.n	8003238 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003212:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <xQueueGenericReset+0xd0>)
 8003214:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	e009      	b.n	8003238 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3310      	adds	r3, #16
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fef1 	bl	8003010 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3324      	adds	r3, #36	@ 0x24
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff feec 	bl	8003010 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003238:	f002 f938 	bl	80054ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800323c:	2301      	movs	r3, #1
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	e000ed04 	.word	0xe000ed04

0800324c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08e      	sub	sp, #56	@ 0x38
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003272:	bf00      	nop
 8003274:	bf00      	nop
 8003276:	e7fd      	b.n	8003274 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10b      	bne.n	8003296 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	e7fd      	b.n	8003292 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <xQueueGenericCreateStatic+0x56>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <xQueueGenericCreateStatic+0x5a>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <xQueueGenericCreateStatic+0x5c>
 80032a6:	2300      	movs	r3, #0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10b      	bne.n	80032c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80032ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	623b      	str	r3, [r7, #32]
}
 80032be:	bf00      	nop
 80032c0:	bf00      	nop
 80032c2:	e7fd      	b.n	80032c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d102      	bne.n	80032d0 <xQueueGenericCreateStatic+0x84>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <xQueueGenericCreateStatic+0x88>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <xQueueGenericCreateStatic+0x8a>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	61fb      	str	r3, [r7, #28]
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	e7fd      	b.n	80032ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032f2:	2350      	movs	r3, #80	@ 0x50
 80032f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b50      	cmp	r3, #80	@ 0x50
 80032fa:	d00b      	beq.n	8003314 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	61bb      	str	r3, [r7, #24]
}
 800330e:	bf00      	nop
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003314:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800331a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003328:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800332c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f805 	bl	8003346 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800333c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800333e:	4618      	mov	r0, r3
 8003340:	3730      	adds	r7, #48	@ 0x30
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e002      	b.n	8003368 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003374:	2101      	movs	r1, #1
 8003376:	69b8      	ldr	r0, [r7, #24]
 8003378:	f7ff fefe 	bl	8003178 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08e      	sub	sp, #56	@ 0x38
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800339a:	2300      	movs	r3, #0
 800339c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80033a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <xQueueGenericSend+0x34>
	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <xQueueGenericSend+0x42>
 80033c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <xQueueGenericSend+0x46>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <xQueueGenericSend+0x48>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10b      	bne.n	80033f0 <xQueueGenericSend+0x64>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d103      	bne.n	80033fe <xQueueGenericSend+0x72>
 80033f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <xQueueGenericSend+0x76>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <xQueueGenericSend+0x78>
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <xQueueGenericSend+0x94>
	__asm volatile
 8003408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	623b      	str	r3, [r7, #32]
}
 800341a:	bf00      	nop
 800341c:	bf00      	nop
 800341e:	e7fd      	b.n	800341c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003420:	f001 fa70 	bl	8004904 <xTaskGetSchedulerState>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <xQueueGenericSend+0xa4>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <xQueueGenericSend+0xa8>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <xQueueGenericSend+0xaa>
 8003434:	2300      	movs	r3, #0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <xQueueGenericSend+0xc6>
	__asm volatile
 800343a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	61fb      	str	r3, [r7, #28]
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	e7fd      	b.n	800344e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003452:	f001 fff9 	bl	8005448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <xQueueGenericSend+0xdc>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d129      	bne.n	80034bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800346e:	f000 fa0f 	bl	8003890 <prvCopyDataToQueue>
 8003472:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	2b00      	cmp	r3, #0
 800347a:	d010      	beq.n	800349e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	3324      	adds	r3, #36	@ 0x24
 8003480:	4618      	mov	r0, r3
 8003482:	f001 f81b 	bl	80044bc <xTaskRemoveFromEventList>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800348c:	4b3f      	ldr	r3, [pc, #252]	@ (800358c <xQueueGenericSend+0x200>)
 800348e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	e00a      	b.n	80034b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800349e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034a4:	4b39      	ldr	r3, [pc, #228]	@ (800358c <xQueueGenericSend+0x200>)
 80034a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034b4:	f001 fffa 	bl	80054ac <vPortExitCritical>
				return pdPASS;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e063      	b.n	8003584 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034c2:	f001 fff3 	bl	80054ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e05c      	b.n	8003584 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	4618      	mov	r0, r3
 80034d6:	f001 f8b9 	bl	800464c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034da:	2301      	movs	r3, #1
 80034dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034de:	f001 ffe5 	bl	80054ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034e2:	f000 fd87 	bl	8003ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034e6:	f001 ffaf 	bl	8005448 <vPortEnterCritical>
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d103      	bne.n	8003500 <xQueueGenericSend+0x174>
 80034f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003502:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003506:	b25b      	sxtb	r3, r3
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d103      	bne.n	8003516 <xQueueGenericSend+0x18a>
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003516:	f001 ffc9 	bl	80054ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800351a:	1d3a      	adds	r2, r7, #4
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f001 f8a8 	bl	8004678 <xTaskCheckForTimeOut>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d124      	bne.n	8003578 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800352e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003530:	f000 faa6 	bl	8003a80 <prvIsQueueFull>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d018      	beq.n	800356c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800353a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353c:	3310      	adds	r3, #16
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f000 ff2a 	bl	800439c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800354a:	f000 fa31 	bl	80039b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800354e:	f000 fd5f 	bl	8004010 <xTaskResumeAll>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	f47f af7c 	bne.w	8003452 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800355a:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <xQueueGenericSend+0x200>)
 800355c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	e772      	b.n	8003452 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800356c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800356e:	f000 fa1f 	bl	80039b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003572:	f000 fd4d 	bl	8004010 <xTaskResumeAll>
 8003576:	e76c      	b.n	8003452 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003578:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800357a:	f000 fa19 	bl	80039b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800357e:	f000 fd47 	bl	8004010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003582:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003584:	4618      	mov	r0, r3
 8003586:	3738      	adds	r7, #56	@ 0x38
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	e000ed04 	.word	0xe000ed04

08003590 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b090      	sub	sp, #64	@ 0x40
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80035a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	e7fd      	b.n	80035bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d103      	bne.n	80035ce <xQueueGenericSendFromISR+0x3e>
 80035c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <xQueueGenericSendFromISR+0x42>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <xQueueGenericSendFromISR+0x44>
 80035d2:	2300      	movs	r3, #0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	e7fd      	b.n	80035ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d103      	bne.n	80035fe <xQueueGenericSendFromISR+0x6e>
 80035f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <xQueueGenericSendFromISR+0x72>
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <xQueueGenericSendFromISR+0x74>
 8003602:	2300      	movs	r3, #0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	623b      	str	r3, [r7, #32]
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	e7fd      	b.n	800361c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003620:	f001 fff2 	bl	8005608 <vPortValidateInterruptPriority>
	__asm volatile
 8003624:	f3ef 8211 	mrs	r2, BASEPRI
 8003628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	61fa      	str	r2, [r7, #28]
 800363a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800363c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800363e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003642:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003648:	429a      	cmp	r2, r3
 800364a:	d302      	bcc.n	8003652 <xQueueGenericSendFromISR+0xc2>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d12f      	bne.n	80036b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003658:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800365c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003660:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003668:	f000 f912 	bl	8003890 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800366c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d112      	bne.n	800369c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800367e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003680:	3324      	adds	r3, #36	@ 0x24
 8003682:	4618      	mov	r0, r3
 8003684:	f000 ff1a 	bl	80044bc <xTaskRemoveFromEventList>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00e      	beq.n	80036ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00b      	beq.n	80036ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	e007      	b.n	80036ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800369c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036a0:	3301      	adds	r3, #1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	b25a      	sxtb	r2, r3
 80036a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80036ac:	2301      	movs	r3, #1
 80036ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80036b0:	e001      	b.n	80036b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b8:	617b      	str	r3, [r7, #20]
	__asm volatile
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f383 8811 	msr	BASEPRI, r3
}
 80036c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3740      	adds	r7, #64	@ 0x40
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	@ 0x30
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10b      	bne.n	80036fe <xQueueReceive+0x32>
	__asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	623b      	str	r3, [r7, #32]
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	e7fd      	b.n	80036fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d103      	bne.n	800370c <xQueueReceive+0x40>
 8003704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <xQueueReceive+0x44>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <xQueueReceive+0x46>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <xQueueReceive+0x62>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	61fb      	str	r3, [r7, #28]
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	e7fd      	b.n	800372a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800372e:	f001 f8e9 	bl	8004904 <xTaskGetSchedulerState>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <xQueueReceive+0x72>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <xQueueReceive+0x76>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <xQueueReceive+0x78>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <xQueueReceive+0x94>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	61bb      	str	r3, [r7, #24]
}
 800375a:	bf00      	nop
 800375c:	bf00      	nop
 800375e:	e7fd      	b.n	800375c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003760:	f001 fe72 	bl	8005448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003768:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01f      	beq.n	80037b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003774:	f000 f8f6 	bl	8003964 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	1e5a      	subs	r2, r3, #1
 800377c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00f      	beq.n	80037a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378a:	3310      	adds	r3, #16
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fe95 	bl	80044bc <xTaskRemoveFromEventList>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003798:	4b3c      	ldr	r3, [pc, #240]	@ (800388c <xQueueReceive+0x1c0>)
 800379a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037a8:	f001 fe80 	bl	80054ac <vPortExitCritical>
				return pdPASS;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e069      	b.n	8003884 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037b6:	f001 fe79 	bl	80054ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e062      	b.n	8003884 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 ff3f 	bl	800464c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037ce:	2301      	movs	r3, #1
 80037d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037d2:	f001 fe6b 	bl	80054ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037d6:	f000 fc0d 	bl	8003ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037da:	f001 fe35 	bl	8005448 <vPortEnterCritical>
 80037de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037e4:	b25b      	sxtb	r3, r3
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d103      	bne.n	80037f4 <xQueueReceive+0x128>
 80037ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d103      	bne.n	800380a <xQueueReceive+0x13e>
 8003802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800380a:	f001 fe4f 	bl	80054ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800380e:	1d3a      	adds	r2, r7, #4
 8003810:	f107 0310 	add.w	r3, r7, #16
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f000 ff2e 	bl	8004678 <xTaskCheckForTimeOut>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d123      	bne.n	800386a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003824:	f000 f916 	bl	8003a54 <prvIsQueueEmpty>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d017      	beq.n	800385e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800382e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003830:	3324      	adds	r3, #36	@ 0x24
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fdb0 	bl	800439c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800383c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800383e:	f000 f8b7 	bl	80039b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003842:	f000 fbe5 	bl	8004010 <xTaskResumeAll>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d189      	bne.n	8003760 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800384c:	4b0f      	ldr	r3, [pc, #60]	@ (800388c <xQueueReceive+0x1c0>)
 800384e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	e780      	b.n	8003760 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800385e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003860:	f000 f8a6 	bl	80039b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003864:	f000 fbd4 	bl	8004010 <xTaskResumeAll>
 8003868:	e77a      	b.n	8003760 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800386a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800386c:	f000 f8a0 	bl	80039b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003870:	f000 fbce 	bl	8004010 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003874:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003876:	f000 f8ed 	bl	8003a54 <prvIsQueueEmpty>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	f43f af6f 	beq.w	8003760 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003882:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003884:	4618      	mov	r0, r3
 8003886:	3730      	adds	r7, #48	@ 0x30
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	e000ed04 	.word	0xe000ed04

08003890 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10d      	bne.n	80038ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d14d      	bne.n	8003952 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 f840 	bl	8004940 <xTaskPriorityDisinherit>
 80038c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	e043      	b.n	8003952 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d119      	bne.n	8003904 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6858      	ldr	r0, [r3, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	461a      	mov	r2, r3
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	f002 f8f0 	bl	8005ac0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	441a      	add	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d32b      	bcc.n	8003952 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	e026      	b.n	8003952 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	68d8      	ldr	r0, [r3, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	461a      	mov	r2, r3
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	f002 f8d6 	bl	8005ac0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	425b      	negs	r3, r3
 800391e:	441a      	add	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d207      	bcs.n	8003940 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	425b      	negs	r3, r3
 800393a:	441a      	add	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d105      	bne.n	8003952 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	3b01      	subs	r3, #1
 8003950:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800395a:	697b      	ldr	r3, [r7, #20]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d018      	beq.n	80039a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	441a      	add	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	429a      	cmp	r2, r3
 800398e:	d303      	bcc.n	8003998 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68d9      	ldr	r1, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	461a      	mov	r2, r3
 80039a2:	6838      	ldr	r0, [r7, #0]
 80039a4:	f002 f88c 	bl	8005ac0 <memcpy>
	}
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039b8:	f001 fd46 	bl	8005448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039c4:	e011      	b.n	80039ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d012      	beq.n	80039f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3324      	adds	r3, #36	@ 0x24
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fd72 	bl	80044bc <xTaskRemoveFromEventList>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039de:	f000 feaf 	bl	8004740 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	dce9      	bgt.n	80039c6 <prvUnlockQueue+0x16>
 80039f2:	e000      	b.n	80039f6 <prvUnlockQueue+0x46>
					break;
 80039f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	22ff      	movs	r2, #255	@ 0xff
 80039fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80039fe:	f001 fd55 	bl	80054ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a02:	f001 fd21 	bl	8005448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a0e:	e011      	b.n	8003a34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d012      	beq.n	8003a3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3310      	adds	r3, #16
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fd4d 	bl	80044bc <xTaskRemoveFromEventList>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a28:	f000 fe8a 	bl	8004740 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a2c:	7bbb      	ldrb	r3, [r7, #14]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	dce9      	bgt.n	8003a10 <prvUnlockQueue+0x60>
 8003a3c:	e000      	b.n	8003a40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	22ff      	movs	r2, #255	@ 0xff
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003a48:	f001 fd30 	bl	80054ac <vPortExitCritical>
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a5c:	f001 fcf4 	bl	8005448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e001      	b.n	8003a72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a72:	f001 fd1b 	bl	80054ac <vPortExitCritical>

	return xReturn;
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a88:	f001 fcde 	bl	8005448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d102      	bne.n	8003a9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e001      	b.n	8003aa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003aa2:	f001 fd03 	bl	80054ac <vPortExitCritical>

	return xReturn;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	e014      	b.n	8003aea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8003b00 <vQueueAddToRegistry+0x50>)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003acc:	490c      	ldr	r1, [pc, #48]	@ (8003b00 <vQueueAddToRegistry+0x50>)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b00 <vQueueAddToRegistry+0x50>)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ae2:	e006      	b.n	8003af2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b07      	cmp	r3, #7
 8003aee:	d9e7      	bls.n	8003ac0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000794 	.word	0x20000794

08003b04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b14:	f001 fc98 	bl	8005448 <vPortEnterCritical>
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b1e:	b25b      	sxtb	r3, r3
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d103      	bne.n	8003b2e <vQueueWaitForMessageRestricted+0x2a>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d103      	bne.n	8003b44 <vQueueWaitForMessageRestricted+0x40>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b44:	f001 fcb2 	bl	80054ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d106      	bne.n	8003b5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3324      	adds	r3, #36	@ 0x24
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fc83 	bl	8004464 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b5e:	6978      	ldr	r0, [r7, #20]
 8003b60:	f7ff ff26 	bl	80039b0 <prvUnlockQueue>
	}
 8003b64:	bf00      	nop
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08e      	sub	sp, #56	@ 0x38
 8003b70:	af04      	add	r7, sp, #16
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	623b      	str	r3, [r7, #32]
}
 8003b92:	bf00      	nop
 8003b94:	bf00      	nop
 8003b96:	e7fd      	b.n	8003b94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10b      	bne.n	8003bb6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	61fb      	str	r3, [r7, #28]
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	e7fd      	b.n	8003bb2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003bb6:	235c      	movs	r3, #92	@ 0x5c
 8003bb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b5c      	cmp	r3, #92	@ 0x5c
 8003bbe:	d00b      	beq.n	8003bd8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	61bb      	str	r3, [r7, #24]
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003bd8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01e      	beq.n	8003c1e <xTaskCreateStatic+0xb2>
 8003be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01b      	beq.n	8003c1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9303      	str	r3, [sp, #12]
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	9302      	str	r3, [sp, #8]
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f850 	bl	8003cb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c18:	f000 f8de 	bl	8003dd8 <prvAddNewTaskToReadyList>
 8003c1c:	e001      	b.n	8003c22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c22:	697b      	ldr	r3, [r7, #20]
	}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3728      	adds	r7, #40	@ 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08c      	sub	sp, #48	@ 0x30
 8003c30:	af04      	add	r7, sp, #16
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 fd23 	bl	800568c <pvPortMalloc>
 8003c46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00e      	beq.n	8003c6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c4e:	205c      	movs	r0, #92	@ 0x5c
 8003c50:	f001 fd1c 	bl	800568c <pvPortMalloc>
 8003c54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c62:	e005      	b.n	8003c70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c64:	6978      	ldr	r0, [r7, #20]
 8003c66:	f001 fddf 	bl	8005828 <vPortFree>
 8003c6a:	e001      	b.n	8003c70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d017      	beq.n	8003ca6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	2300      	movs	r3, #0
 8003c82:	9303      	str	r3, [sp, #12]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	9302      	str	r3, [sp, #8]
 8003c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f80e 	bl	8003cb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c9a:	69f8      	ldr	r0, [r7, #28]
 8003c9c:	f000 f89c 	bl	8003dd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	e002      	b.n	8003cac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cac:	69bb      	ldr	r3, [r7, #24]
	}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b088      	sub	sp, #32
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	21a5      	movs	r1, #165	@ 0xa5
 8003cd0:	f001 feca 	bl	8005a68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f023 0307 	bic.w	r3, r3, #7
 8003cec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	617b      	str	r3, [r7, #20]
}
 8003d0a:	bf00      	nop
 8003d0c:	bf00      	nop
 8003d0e:	e7fd      	b.n	8003d0c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01f      	beq.n	8003d56 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	e012      	b.n	8003d42 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4413      	add	r3, r2
 8003d22:	7819      	ldrb	r1, [r3, #0]
 8003d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	3334      	adds	r3, #52	@ 0x34
 8003d2c:	460a      	mov	r2, r1
 8003d2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	4413      	add	r3, r2
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d006      	beq.n	8003d4a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2b0f      	cmp	r3, #15
 8003d46:	d9e9      	bls.n	8003d1c <prvInitialiseNewTask+0x66>
 8003d48:	e000      	b.n	8003d4c <prvInitialiseNewTask+0x96>
			{
				break;
 8003d4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d54:	e003      	b.n	8003d5e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d60:	2b37      	cmp	r3, #55	@ 0x37
 8003d62:	d901      	bls.n	8003d68 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d64:	2337      	movs	r3, #55	@ 0x37
 8003d66:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d72:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d76:	2200      	movs	r2, #0
 8003d78:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff f966 	bl	8003050 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d86:	3318      	adds	r3, #24
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff f961 	bl	8003050 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da6:	2200      	movs	r2, #0
 8003da8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	68f9      	ldr	r1, [r7, #12]
 8003db6:	69b8      	ldr	r0, [r7, #24]
 8003db8:	f001 fa18 	bl	80051ec <pxPortInitialiseStack>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dce:	bf00      	nop
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003de0:	f001 fb32 	bl	8005448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003de4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	4a2c      	ldr	r2, [pc, #176]	@ (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003dec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dee:	4b2c      	ldr	r3, [pc, #176]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003df6:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dfc:	4b27      	ldr	r3, [pc, #156]	@ (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d110      	bne.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e04:	f000 fcc0 	bl	8004788 <prvInitialiseTaskLists>
 8003e08:	e00d      	b.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ea4 <prvAddNewTaskToReadyList+0xcc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e12:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d802      	bhi.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e20:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e26:	4b20      	ldr	r3, [pc, #128]	@ (8003ea8 <prvAddNewTaskToReadyList+0xd0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea8 <prvAddNewTaskToReadyList+0xd0>)
 8003e2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea8 <prvAddNewTaskToReadyList+0xd0>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003eac <prvAddNewTaskToReadyList+0xd4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d903      	bls.n	8003e4c <prvAddNewTaskToReadyList+0x74>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	4a18      	ldr	r2, [pc, #96]	@ (8003eac <prvAddNewTaskToReadyList+0xd4>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4a15      	ldr	r2, [pc, #84]	@ (8003eb0 <prvAddNewTaskToReadyList+0xd8>)
 8003e5a:	441a      	add	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4610      	mov	r0, r2
 8003e64:	f7ff f901 	bl	800306a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e68:	f001 fb20 	bl	80054ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea4 <prvAddNewTaskToReadyList+0xcc>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00e      	beq.n	8003e92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d207      	bcs.n	8003e92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e82:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <prvAddNewTaskToReadyList+0xdc>)
 8003e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000ca8 	.word	0x20000ca8
 8003ea0:	200007d4 	.word	0x200007d4
 8003ea4:	20000cb4 	.word	0x20000cb4
 8003ea8:	20000cc4 	.word	0x20000cc4
 8003eac:	20000cb0 	.word	0x20000cb0
 8003eb0:	200007d8 	.word	0x200007d8
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d018      	beq.n	8003efc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003eca:	4b14      	ldr	r3, [pc, #80]	@ (8003f1c <vTaskDelay+0x64>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <vTaskDelay+0x32>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	60bb      	str	r3, [r7, #8]
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	e7fd      	b.n	8003ee6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003eea:	f000 f883 	bl	8003ff4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003eee:	2100      	movs	r1, #0
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fdad 	bl	8004a50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ef6:	f000 f88b 	bl	8004010 <xTaskResumeAll>
 8003efa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d107      	bne.n	8003f12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003f02:	4b07      	ldr	r3, [pc, #28]	@ (8003f20 <vTaskDelay+0x68>)
 8003f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000cd0 	.word	0x20000cd0
 8003f20:	e000ed04 	.word	0xe000ed04

08003f24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	@ 0x28
 8003f28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f32:	463a      	mov	r2, r7
 8003f34:	1d39      	adds	r1, r7, #4
 8003f36:	f107 0308 	add.w	r3, r7, #8
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe fdc0 	bl	8002ac0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	9202      	str	r2, [sp, #8]
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	460a      	mov	r2, r1
 8003f52:	4922      	ldr	r1, [pc, #136]	@ (8003fdc <vTaskStartScheduler+0xb8>)
 8003f54:	4822      	ldr	r0, [pc, #136]	@ (8003fe0 <vTaskStartScheduler+0xbc>)
 8003f56:	f7ff fe09 	bl	8003b6c <xTaskCreateStatic>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4a21      	ldr	r2, [pc, #132]	@ (8003fe4 <vTaskStartScheduler+0xc0>)
 8003f5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f60:	4b20      	ldr	r3, [pc, #128]	@ (8003fe4 <vTaskStartScheduler+0xc0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	e001      	b.n	8003f72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d102      	bne.n	8003f7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f78:	f000 fdbe 	bl	8004af8 <xTimerCreateTimerTask>
 8003f7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d116      	bne.n	8003fb2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	613b      	str	r3, [r7, #16]
}
 8003f96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f98:	4b13      	ldr	r3, [pc, #76]	@ (8003fe8 <vTaskStartScheduler+0xc4>)
 8003f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fa0:	4b12      	ldr	r3, [pc, #72]	@ (8003fec <vTaskStartScheduler+0xc8>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fa6:	4b12      	ldr	r3, [pc, #72]	@ (8003ff0 <vTaskStartScheduler+0xcc>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fac:	f001 f9a8 	bl	8005300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fb0:	e00f      	b.n	8003fd2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d10b      	bne.n	8003fd2 <vTaskStartScheduler+0xae>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	60fb      	str	r3, [r7, #12]
}
 8003fcc:	bf00      	nop
 8003fce:	bf00      	nop
 8003fd0:	e7fd      	b.n	8003fce <vTaskStartScheduler+0xaa>
}
 8003fd2:	bf00      	nop
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	08005b14 	.word	0x08005b14
 8003fe0:	08004759 	.word	0x08004759
 8003fe4:	20000ccc 	.word	0x20000ccc
 8003fe8:	20000cc8 	.word	0x20000cc8
 8003fec:	20000cb4 	.word	0x20000cb4
 8003ff0:	20000cac 	.word	0x20000cac

08003ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ff8:	4b04      	ldr	r3, [pc, #16]	@ (800400c <vTaskSuspendAll+0x18>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	4a03      	ldr	r2, [pc, #12]	@ (800400c <vTaskSuspendAll+0x18>)
 8004000:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	20000cd0 	.word	0x20000cd0

08004010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800401e:	4b42      	ldr	r3, [pc, #264]	@ (8004128 <xTaskResumeAll+0x118>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10b      	bne.n	800403e <xTaskResumeAll+0x2e>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	603b      	str	r3, [r7, #0]
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	e7fd      	b.n	800403a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800403e:	f001 fa03 	bl	8005448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004042:	4b39      	ldr	r3, [pc, #228]	@ (8004128 <xTaskResumeAll+0x118>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3b01      	subs	r3, #1
 8004048:	4a37      	ldr	r2, [pc, #220]	@ (8004128 <xTaskResumeAll+0x118>)
 800404a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800404c:	4b36      	ldr	r3, [pc, #216]	@ (8004128 <xTaskResumeAll+0x118>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d162      	bne.n	800411a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004054:	4b35      	ldr	r3, [pc, #212]	@ (800412c <xTaskResumeAll+0x11c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d05e      	beq.n	800411a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800405c:	e02f      	b.n	80040be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800405e:	4b34      	ldr	r3, [pc, #208]	@ (8004130 <xTaskResumeAll+0x120>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3318      	adds	r3, #24
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff f85a 	bl	8003124 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff f855 	bl	8003124 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407e:	4b2d      	ldr	r3, [pc, #180]	@ (8004134 <xTaskResumeAll+0x124>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d903      	bls.n	800408e <xTaskResumeAll+0x7e>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408a:	4a2a      	ldr	r2, [pc, #168]	@ (8004134 <xTaskResumeAll+0x124>)
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4a27      	ldr	r2, [pc, #156]	@ (8004138 <xTaskResumeAll+0x128>)
 800409c:	441a      	add	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3304      	adds	r3, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f7fe ffe0 	bl	800306a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ae:	4b23      	ldr	r3, [pc, #140]	@ (800413c <xTaskResumeAll+0x12c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d302      	bcc.n	80040be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80040b8:	4b21      	ldr	r3, [pc, #132]	@ (8004140 <xTaskResumeAll+0x130>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040be:	4b1c      	ldr	r3, [pc, #112]	@ (8004130 <xTaskResumeAll+0x120>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1cb      	bne.n	800405e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040cc:	f000 fbfa 	bl	80048c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004144 <xTaskResumeAll+0x134>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d010      	beq.n	80040fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040dc:	f000 f846 	bl	800416c <xTaskIncrementTick>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80040e6:	4b16      	ldr	r3, [pc, #88]	@ (8004140 <xTaskResumeAll+0x130>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f1      	bne.n	80040dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80040f8:	4b12      	ldr	r3, [pc, #72]	@ (8004144 <xTaskResumeAll+0x134>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040fe:	4b10      	ldr	r3, [pc, #64]	@ (8004140 <xTaskResumeAll+0x130>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004106:	2301      	movs	r3, #1
 8004108:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800410a:	4b0f      	ldr	r3, [pc, #60]	@ (8004148 <xTaskResumeAll+0x138>)
 800410c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800411a:	f001 f9c7 	bl	80054ac <vPortExitCritical>

	return xAlreadyYielded;
 800411e:	68bb      	ldr	r3, [r7, #8]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000cd0 	.word	0x20000cd0
 800412c:	20000ca8 	.word	0x20000ca8
 8004130:	20000c68 	.word	0x20000c68
 8004134:	20000cb0 	.word	0x20000cb0
 8004138:	200007d8 	.word	0x200007d8
 800413c:	200007d4 	.word	0x200007d4
 8004140:	20000cbc 	.word	0x20000cbc
 8004144:	20000cb8 	.word	0x20000cb8
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004152:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <xTaskGetTickCount+0x1c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004158:	687b      	ldr	r3, [r7, #4]
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000cac 	.word	0x20000cac

0800416c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004176:	4b4f      	ldr	r3, [pc, #316]	@ (80042b4 <xTaskIncrementTick+0x148>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f040 8090 	bne.w	80042a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004180:	4b4d      	ldr	r3, [pc, #308]	@ (80042b8 <xTaskIncrementTick+0x14c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3301      	adds	r3, #1
 8004186:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004188:	4a4b      	ldr	r2, [pc, #300]	@ (80042b8 <xTaskIncrementTick+0x14c>)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d121      	bne.n	80041d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004194:	4b49      	ldr	r3, [pc, #292]	@ (80042bc <xTaskIncrementTick+0x150>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	603b      	str	r3, [r7, #0]
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	e7fd      	b.n	80041b2 <xTaskIncrementTick+0x46>
 80041b6:	4b41      	ldr	r3, [pc, #260]	@ (80042bc <xTaskIncrementTick+0x150>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	4b40      	ldr	r3, [pc, #256]	@ (80042c0 <xTaskIncrementTick+0x154>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a3e      	ldr	r2, [pc, #248]	@ (80042bc <xTaskIncrementTick+0x150>)
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4a3e      	ldr	r2, [pc, #248]	@ (80042c0 <xTaskIncrementTick+0x154>)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b3e      	ldr	r3, [pc, #248]	@ (80042c4 <xTaskIncrementTick+0x158>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	4a3c      	ldr	r2, [pc, #240]	@ (80042c4 <xTaskIncrementTick+0x158>)
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	f000 fb76 	bl	80048c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041d8:	4b3b      	ldr	r3, [pc, #236]	@ (80042c8 <xTaskIncrementTick+0x15c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d349      	bcc.n	8004276 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041e2:	4b36      	ldr	r3, [pc, #216]	@ (80042bc <xTaskIncrementTick+0x150>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ec:	4b36      	ldr	r3, [pc, #216]	@ (80042c8 <xTaskIncrementTick+0x15c>)
 80041ee:	f04f 32ff 	mov.w	r2, #4294967295
 80041f2:	601a      	str	r2, [r3, #0]
					break;
 80041f4:	e03f      	b.n	8004276 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f6:	4b31      	ldr	r3, [pc, #196]	@ (80042bc <xTaskIncrementTick+0x150>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d203      	bcs.n	8004216 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800420e:	4a2e      	ldr	r2, [pc, #184]	@ (80042c8 <xTaskIncrementTick+0x15c>)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004214:	e02f      	b.n	8004276 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	3304      	adds	r3, #4
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe ff82 	bl	8003124 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	2b00      	cmp	r3, #0
 8004226:	d004      	beq.n	8004232 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	3318      	adds	r3, #24
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe ff79 	bl	8003124 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004236:	4b25      	ldr	r3, [pc, #148]	@ (80042cc <xTaskIncrementTick+0x160>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d903      	bls.n	8004246 <xTaskIncrementTick+0xda>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	4a22      	ldr	r2, [pc, #136]	@ (80042cc <xTaskIncrementTick+0x160>)
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4a1f      	ldr	r2, [pc, #124]	@ (80042d0 <xTaskIncrementTick+0x164>)
 8004254:	441a      	add	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	3304      	adds	r3, #4
 800425a:	4619      	mov	r1, r3
 800425c:	4610      	mov	r0, r2
 800425e:	f7fe ff04 	bl	800306a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004266:	4b1b      	ldr	r3, [pc, #108]	@ (80042d4 <xTaskIncrementTick+0x168>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426c:	429a      	cmp	r2, r3
 800426e:	d3b8      	bcc.n	80041e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004270:	2301      	movs	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004274:	e7b5      	b.n	80041e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004276:	4b17      	ldr	r3, [pc, #92]	@ (80042d4 <xTaskIncrementTick+0x168>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427c:	4914      	ldr	r1, [pc, #80]	@ (80042d0 <xTaskIncrementTick+0x164>)
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d901      	bls.n	8004292 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800428e:	2301      	movs	r3, #1
 8004290:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004292:	4b11      	ldr	r3, [pc, #68]	@ (80042d8 <xTaskIncrementTick+0x16c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800429a:	2301      	movs	r3, #1
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	e004      	b.n	80042aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042a0:	4b0e      	ldr	r3, [pc, #56]	@ (80042dc <xTaskIncrementTick+0x170>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	4a0d      	ldr	r2, [pc, #52]	@ (80042dc <xTaskIncrementTick+0x170>)
 80042a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042aa:	697b      	ldr	r3, [r7, #20]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000cd0 	.word	0x20000cd0
 80042b8:	20000cac 	.word	0x20000cac
 80042bc:	20000c60 	.word	0x20000c60
 80042c0:	20000c64 	.word	0x20000c64
 80042c4:	20000cc0 	.word	0x20000cc0
 80042c8:	20000cc8 	.word	0x20000cc8
 80042cc:	20000cb0 	.word	0x20000cb0
 80042d0:	200007d8 	.word	0x200007d8
 80042d4:	200007d4 	.word	0x200007d4
 80042d8:	20000cbc 	.word	0x20000cbc
 80042dc:	20000cb8 	.word	0x20000cb8

080042e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042e6:	4b28      	ldr	r3, [pc, #160]	@ (8004388 <vTaskSwitchContext+0xa8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042ee:	4b27      	ldr	r3, [pc, #156]	@ (800438c <vTaskSwitchContext+0xac>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042f4:	e042      	b.n	800437c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80042f6:	4b25      	ldr	r3, [pc, #148]	@ (800438c <vTaskSwitchContext+0xac>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042fc:	4b24      	ldr	r3, [pc, #144]	@ (8004390 <vTaskSwitchContext+0xb0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	e011      	b.n	8004328 <vTaskSwitchContext+0x48>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10b      	bne.n	8004322 <vTaskSwitchContext+0x42>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	607b      	str	r3, [r7, #4]
}
 800431c:	bf00      	nop
 800431e:	bf00      	nop
 8004320:	e7fd      	b.n	800431e <vTaskSwitchContext+0x3e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b01      	subs	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	491a      	ldr	r1, [pc, #104]	@ (8004394 <vTaskSwitchContext+0xb4>)
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0e3      	beq.n	8004304 <vTaskSwitchContext+0x24>
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4a13      	ldr	r2, [pc, #76]	@ (8004394 <vTaskSwitchContext+0xb4>)
 8004348:	4413      	add	r3, r2
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	3308      	adds	r3, #8
 800435e:	429a      	cmp	r2, r3
 8004360:	d104      	bne.n	800436c <vTaskSwitchContext+0x8c>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	605a      	str	r2, [r3, #4]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	4a09      	ldr	r2, [pc, #36]	@ (8004398 <vTaskSwitchContext+0xb8>)
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	4a06      	ldr	r2, [pc, #24]	@ (8004390 <vTaskSwitchContext+0xb0>)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6013      	str	r3, [r2, #0]
}
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	20000cd0 	.word	0x20000cd0
 800438c:	20000cbc 	.word	0x20000cbc
 8004390:	20000cb0 	.word	0x20000cb0
 8004394:	200007d8 	.word	0x200007d8
 8004398:	200007d4 	.word	0x200007d4

0800439c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10b      	bne.n	80043c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	60fb      	str	r3, [r7, #12]
}
 80043be:	bf00      	nop
 80043c0:	bf00      	nop
 80043c2:	e7fd      	b.n	80043c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043c4:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <vTaskPlaceOnEventList+0x48>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3318      	adds	r3, #24
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7fe fe70 	bl	80030b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043d2:	2101      	movs	r1, #1
 80043d4:	6838      	ldr	r0, [r7, #0]
 80043d6:	f000 fb3b 	bl	8004a50 <prvAddCurrentTaskToDelayedList>
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200007d4 	.word	0x200007d4

080043e8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	617b      	str	r3, [r7, #20]
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	e7fd      	b.n	800440e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004412:	4b12      	ldr	r3, [pc, #72]	@ (800445c <vTaskPlaceOnUnorderedEventList+0x74>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	613b      	str	r3, [r7, #16]
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	e7fd      	b.n	800442e <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004432:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800443c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800443e:	4b08      	ldr	r3, [pc, #32]	@ (8004460 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3318      	adds	r3, #24
 8004444:	4619      	mov	r1, r3
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7fe fe0f 	bl	800306a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800444c:	2101      	movs	r1, #1
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fafe 	bl	8004a50 <prvAddCurrentTaskToDelayedList>
}
 8004454:	bf00      	nop
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000cd0 	.word	0x20000cd0
 8004460:	200007d4 	.word	0x200007d4

08004464 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	617b      	str	r3, [r7, #20]
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	e7fd      	b.n	800448a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800448e:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3318      	adds	r3, #24
 8004494:	4619      	mov	r1, r3
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7fe fde7 	bl	800306a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80044a2:	f04f 33ff 	mov.w	r3, #4294967295
 80044a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	68b8      	ldr	r0, [r7, #8]
 80044ac:	f000 fad0 	bl	8004a50 <prvAddCurrentTaskToDelayedList>
	}
 80044b0:	bf00      	nop
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	200007d4 	.word	0x200007d4

080044bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10b      	bne.n	80044ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	60fb      	str	r3, [r7, #12]
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	e7fd      	b.n	80044e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	3318      	adds	r3, #24
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe fe18 	bl	8003124 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044f4:	4b1d      	ldr	r3, [pc, #116]	@ (800456c <xTaskRemoveFromEventList+0xb0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11d      	bne.n	8004538 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	3304      	adds	r3, #4
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fe0f 	bl	8003124 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450a:	4b19      	ldr	r3, [pc, #100]	@ (8004570 <xTaskRemoveFromEventList+0xb4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d903      	bls.n	800451a <xTaskRemoveFromEventList+0x5e>
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004516:	4a16      	ldr	r2, [pc, #88]	@ (8004570 <xTaskRemoveFromEventList+0xb4>)
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4a13      	ldr	r2, [pc, #76]	@ (8004574 <xTaskRemoveFromEventList+0xb8>)
 8004528:	441a      	add	r2, r3
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	3304      	adds	r3, #4
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f7fe fd9a 	bl	800306a <vListInsertEnd>
 8004536:	e005      	b.n	8004544 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	3318      	adds	r3, #24
 800453c:	4619      	mov	r1, r3
 800453e:	480e      	ldr	r0, [pc, #56]	@ (8004578 <xTaskRemoveFromEventList+0xbc>)
 8004540:	f7fe fd93 	bl	800306a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <xTaskRemoveFromEventList+0xc0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	429a      	cmp	r2, r3
 8004550:	d905      	bls.n	800455e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004552:	2301      	movs	r3, #1
 8004554:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004556:	4b0a      	ldr	r3, [pc, #40]	@ (8004580 <xTaskRemoveFromEventList+0xc4>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e001      	b.n	8004562 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004562:	697b      	ldr	r3, [r7, #20]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000cd0 	.word	0x20000cd0
 8004570:	20000cb0 	.word	0x20000cb0
 8004574:	200007d8 	.word	0x200007d8
 8004578:	20000c68 	.word	0x20000c68
 800457c:	200007d4 	.word	0x200007d4
 8004580:	20000cbc 	.word	0x20000cbc

08004584 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800458e:	4b2a      	ldr	r3, [pc, #168]	@ (8004638 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	613b      	str	r3, [r7, #16]
}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop
 80045ac:	e7fd      	b.n	80045aa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10b      	bne.n	80045dc <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	60fb      	str	r3, [r7, #12]
}
 80045d6:	bf00      	nop
 80045d8:	bf00      	nop
 80045da:	e7fd      	b.n	80045d8 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7fe fda1 	bl	8003124 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fd9c 	bl	8003124 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f0:	4b12      	ldr	r3, [pc, #72]	@ (800463c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d903      	bls.n	8004600 <vTaskRemoveFromUnorderedEventList+0x7c>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	4a0f      	ldr	r2, [pc, #60]	@ (800463c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4a0c      	ldr	r2, [pc, #48]	@ (8004640 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800460e:	441a      	add	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	3304      	adds	r3, #4
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f7fe fd27 	bl	800306a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004620:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004626:	429a      	cmp	r2, r3
 8004628:	d902      	bls.n	8004630 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800462a:	4b07      	ldr	r3, [pc, #28]	@ (8004648 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800462c:	2201      	movs	r2, #1
 800462e:	601a      	str	r2, [r3, #0]
	}
}
 8004630:	bf00      	nop
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20000cd0 	.word	0x20000cd0
 800463c:	20000cb0 	.word	0x20000cb0
 8004640:	200007d8 	.word	0x200007d8
 8004644:	200007d4 	.word	0x200007d4
 8004648:	20000cbc 	.word	0x20000cbc

0800464c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004654:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <vTaskInternalSetTimeOutState+0x24>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800465c:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <vTaskInternalSetTimeOutState+0x28>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	605a      	str	r2, [r3, #4]
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	20000cc0 	.word	0x20000cc0
 8004674:	20000cac 	.word	0x20000cac

08004678 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	613b      	str	r3, [r7, #16]
}
 800469a:	bf00      	nop
 800469c:	bf00      	nop
 800469e:	e7fd      	b.n	800469c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60fb      	str	r3, [r7, #12]
}
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
 80046bc:	e7fd      	b.n	80046ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80046be:	f000 fec3 	bl	8005448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004738 <xTaskCheckForTimeOut+0xc0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d102      	bne.n	80046e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046dc:	2300      	movs	r3, #0
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	e023      	b.n	800472a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b15      	ldr	r3, [pc, #84]	@ (800473c <xTaskCheckForTimeOut+0xc4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d007      	beq.n	80046fe <xTaskCheckForTimeOut+0x86>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d302      	bcc.n	80046fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046f8:	2301      	movs	r3, #1
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	e015      	b.n	800472a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	429a      	cmp	r2, r3
 8004706:	d20b      	bcs.n	8004720 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad2      	subs	r2, r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ff99 	bl	800464c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	e004      	b.n	800472a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004726:	2301      	movs	r3, #1
 8004728:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800472a:	f000 febf 	bl	80054ac <vPortExitCritical>

	return xReturn;
 800472e:	69fb      	ldr	r3, [r7, #28]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3720      	adds	r7, #32
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000cac 	.word	0x20000cac
 800473c:	20000cc0 	.word	0x20000cc0

08004740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004744:	4b03      	ldr	r3, [pc, #12]	@ (8004754 <vTaskMissedYield+0x14>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]
}
 800474a:	bf00      	nop
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	20000cbc 	.word	0x20000cbc

08004758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004760:	f000 f852 	bl	8004808 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004764:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <prvIdleTask+0x28>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d9f9      	bls.n	8004760 <prvIdleTask+0x8>
			{
				taskYIELD();
 800476c:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <prvIdleTask+0x2c>)
 800476e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800477c:	e7f0      	b.n	8004760 <prvIdleTask+0x8>
 800477e:	bf00      	nop
 8004780:	200007d8 	.word	0x200007d8
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800478e:	2300      	movs	r3, #0
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	e00c      	b.n	80047ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	4613      	mov	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4a12      	ldr	r2, [pc, #72]	@ (80047e8 <prvInitialiseTaskLists+0x60>)
 80047a0:	4413      	add	r3, r2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fc34 	bl	8003010 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3301      	adds	r3, #1
 80047ac:	607b      	str	r3, [r7, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b37      	cmp	r3, #55	@ 0x37
 80047b2:	d9ef      	bls.n	8004794 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047b4:	480d      	ldr	r0, [pc, #52]	@ (80047ec <prvInitialiseTaskLists+0x64>)
 80047b6:	f7fe fc2b 	bl	8003010 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047ba:	480d      	ldr	r0, [pc, #52]	@ (80047f0 <prvInitialiseTaskLists+0x68>)
 80047bc:	f7fe fc28 	bl	8003010 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047c0:	480c      	ldr	r0, [pc, #48]	@ (80047f4 <prvInitialiseTaskLists+0x6c>)
 80047c2:	f7fe fc25 	bl	8003010 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047c6:	480c      	ldr	r0, [pc, #48]	@ (80047f8 <prvInitialiseTaskLists+0x70>)
 80047c8:	f7fe fc22 	bl	8003010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047cc:	480b      	ldr	r0, [pc, #44]	@ (80047fc <prvInitialiseTaskLists+0x74>)
 80047ce:	f7fe fc1f 	bl	8003010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004800 <prvInitialiseTaskLists+0x78>)
 80047d4:	4a05      	ldr	r2, [pc, #20]	@ (80047ec <prvInitialiseTaskLists+0x64>)
 80047d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <prvInitialiseTaskLists+0x7c>)
 80047da:	4a05      	ldr	r2, [pc, #20]	@ (80047f0 <prvInitialiseTaskLists+0x68>)
 80047dc:	601a      	str	r2, [r3, #0]
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	200007d8 	.word	0x200007d8
 80047ec:	20000c38 	.word	0x20000c38
 80047f0:	20000c4c 	.word	0x20000c4c
 80047f4:	20000c68 	.word	0x20000c68
 80047f8:	20000c7c 	.word	0x20000c7c
 80047fc:	20000c94 	.word	0x20000c94
 8004800:	20000c60 	.word	0x20000c60
 8004804:	20000c64 	.word	0x20000c64

08004808 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800480e:	e019      	b.n	8004844 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004810:	f000 fe1a 	bl	8005448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004814:	4b10      	ldr	r3, [pc, #64]	@ (8004858 <prvCheckTasksWaitingTermination+0x50>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3304      	adds	r3, #4
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe fc7f 	bl	8003124 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004826:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <prvCheckTasksWaitingTermination+0x54>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3b01      	subs	r3, #1
 800482c:	4a0b      	ldr	r2, [pc, #44]	@ (800485c <prvCheckTasksWaitingTermination+0x54>)
 800482e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004830:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <prvCheckTasksWaitingTermination+0x58>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3b01      	subs	r3, #1
 8004836:	4a0a      	ldr	r2, [pc, #40]	@ (8004860 <prvCheckTasksWaitingTermination+0x58>)
 8004838:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800483a:	f000 fe37 	bl	80054ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f810 	bl	8004864 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004844:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <prvCheckTasksWaitingTermination+0x58>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e1      	bne.n	8004810 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000c7c 	.word	0x20000c7c
 800485c:	20000ca8 	.word	0x20000ca8
 8004860:	20000c90 	.word	0x20000c90

08004864 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004872:	2b00      	cmp	r3, #0
 8004874:	d108      	bne.n	8004888 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487a:	4618      	mov	r0, r3
 800487c:	f000 ffd4 	bl	8005828 <vPortFree>
				vPortFree( pxTCB );
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 ffd1 	bl	8005828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004886:	e019      	b.n	80048bc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800488e:	2b01      	cmp	r3, #1
 8004890:	d103      	bne.n	800489a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 ffc8 	bl	8005828 <vPortFree>
	}
 8004898:	e010      	b.n	80048bc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d00b      	beq.n	80048bc <prvDeleteTCB+0x58>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	60fb      	str	r3, [r7, #12]
}
 80048b6:	bf00      	nop
 80048b8:	bf00      	nop
 80048ba:	e7fd      	b.n	80048b8 <prvDeleteTCB+0x54>
	}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ca:	4b0c      	ldr	r3, [pc, #48]	@ (80048fc <prvResetNextTaskUnblockTime+0x38>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004900 <prvResetNextTaskUnblockTime+0x3c>)
 80048d6:	f04f 32ff 	mov.w	r2, #4294967295
 80048da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048dc:	e008      	b.n	80048f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048de:	4b07      	ldr	r3, [pc, #28]	@ (80048fc <prvResetNextTaskUnblockTime+0x38>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	4a04      	ldr	r2, [pc, #16]	@ (8004900 <prvResetNextTaskUnblockTime+0x3c>)
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	20000c60 	.word	0x20000c60
 8004900:	20000cc8 	.word	0x20000cc8

08004904 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800490a:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <xTaskGetSchedulerState+0x34>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004912:	2301      	movs	r3, #1
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	e008      	b.n	800492a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004918:	4b08      	ldr	r3, [pc, #32]	@ (800493c <xTaskGetSchedulerState+0x38>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004920:	2302      	movs	r3, #2
 8004922:	607b      	str	r3, [r7, #4]
 8004924:	e001      	b.n	800492a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800492a:	687b      	ldr	r3, [r7, #4]
	}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	20000cb4 	.word	0x20000cb4
 800493c:	20000cd0 	.word	0x20000cd0

08004940 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d058      	beq.n	8004a08 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004956:	4b2f      	ldr	r3, [pc, #188]	@ (8004a14 <xTaskPriorityDisinherit+0xd4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	429a      	cmp	r2, r3
 800495e:	d00b      	beq.n	8004978 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60fb      	str	r3, [r7, #12]
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	60bb      	str	r3, [r7, #8]
}
 8004992:	bf00      	nop
 8004994:	bf00      	nop
 8004996:	e7fd      	b.n	8004994 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800499c:	1e5a      	subs	r2, r3, #1
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d02c      	beq.n	8004a08 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d128      	bne.n	8004a08 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fbb2 	bl	8003124 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a18 <xTaskPriorityDisinherit+0xd8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d903      	bls.n	80049e8 <xTaskPriorityDisinherit+0xa8>
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004a18 <xTaskPriorityDisinherit+0xd8>)
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4a09      	ldr	r2, [pc, #36]	@ (8004a1c <xTaskPriorityDisinherit+0xdc>)
 80049f6:	441a      	add	r2, r3
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f7fe fb33 	bl	800306a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a04:	2301      	movs	r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a08:	697b      	ldr	r3, [r7, #20]
	}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	200007d4 	.word	0x200007d4
 8004a18:	20000cb0 	.word	0x20000cb0
 8004a1c:	200007d8 	.word	0x200007d8

08004a20 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004a26:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <uxTaskResetEventItemValue+0x2c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a2e:	4b07      	ldr	r3, [pc, #28]	@ (8004a4c <uxTaskResetEventItemValue+0x2c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a34:	4b05      	ldr	r3, [pc, #20]	@ (8004a4c <uxTaskResetEventItemValue+0x2c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8004a3c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004a3e:	687b      	ldr	r3, [r7, #4]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	200007d4 	.word	0x200007d4

08004a50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a5a:	4b21      	ldr	r3, [pc, #132]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a60:	4b20      	ldr	r3, [pc, #128]	@ (8004ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3304      	adds	r3, #4
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe fb5c 	bl	8003124 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d10a      	bne.n	8004a8a <prvAddCurrentTaskToDelayedList+0x3a>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4819      	ldr	r0, [pc, #100]	@ (8004ae8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a84:	f7fe faf1 	bl	800306a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a88:	e026      	b.n	8004ad8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4413      	add	r3, r2
 8004a90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a92:	4b14      	ldr	r3, [pc, #80]	@ (8004ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d209      	bcs.n	8004ab6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aa2:	4b12      	ldr	r3, [pc, #72]	@ (8004aec <prvAddCurrentTaskToDelayedList+0x9c>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f7fe faff 	bl	80030b2 <vListInsert>
}
 8004ab4:	e010      	b.n	8004ad8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8004af0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f7fe faf5 	bl	80030b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8004af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d202      	bcs.n	8004ad8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ad2:	4a08      	ldr	r2, [pc, #32]	@ (8004af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	6013      	str	r3, [r2, #0]
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000cac 	.word	0x20000cac
 8004ae4:	200007d4 	.word	0x200007d4
 8004ae8:	20000c94 	.word	0x20000c94
 8004aec:	20000c64 	.word	0x20000c64
 8004af0:	20000c60 	.word	0x20000c60
 8004af4:	20000cc8 	.word	0x20000cc8

08004af8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	@ 0x28
 8004afc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b02:	f000 fb13 	bl	800512c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b06:	4b1d      	ldr	r3, [pc, #116]	@ (8004b7c <xTimerCreateTimerTask+0x84>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d021      	beq.n	8004b52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b16:	1d3a      	adds	r2, r7, #4
 8004b18:	f107 0108 	add.w	r1, r7, #8
 8004b1c:	f107 030c 	add.w	r3, r7, #12
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fd ffe7 	bl	8002af4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	9202      	str	r2, [sp, #8]
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	2302      	movs	r3, #2
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	460a      	mov	r2, r1
 8004b38:	4911      	ldr	r1, [pc, #68]	@ (8004b80 <xTimerCreateTimerTask+0x88>)
 8004b3a:	4812      	ldr	r0, [pc, #72]	@ (8004b84 <xTimerCreateTimerTask+0x8c>)
 8004b3c:	f7ff f816 	bl	8003b6c <xTaskCreateStatic>
 8004b40:	4603      	mov	r3, r0
 8004b42:	4a11      	ldr	r2, [pc, #68]	@ (8004b88 <xTimerCreateTimerTask+0x90>)
 8004b44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b46:	4b10      	ldr	r3, [pc, #64]	@ (8004b88 <xTimerCreateTimerTask+0x90>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	613b      	str	r3, [r7, #16]
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b70:	697b      	ldr	r3, [r7, #20]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000d04 	.word	0x20000d04
 8004b80:	08005b1c 	.word	0x08005b1c
 8004b84:	08004cc5 	.word	0x08004cc5
 8004b88:	20000d08 	.word	0x20000d08

08004b8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	@ 0x28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <xTimerGenericCommand+0x30>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	623b      	str	r3, [r7, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004bbc:	4b19      	ldr	r3, [pc, #100]	@ (8004c24 <xTimerGenericCommand+0x98>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d02a      	beq.n	8004c1a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	dc18      	bgt.n	8004c08 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004bd6:	f7ff fe95 	bl	8004904 <xTaskGetSchedulerState>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d109      	bne.n	8004bf4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004be0:	4b10      	ldr	r3, [pc, #64]	@ (8004c24 <xTimerGenericCommand+0x98>)
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	f107 0110 	add.w	r1, r7, #16
 8004be8:	2300      	movs	r3, #0
 8004bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bec:	f7fe fbce 	bl	800338c <xQueueGenericSend>
 8004bf0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bf2:	e012      	b.n	8004c1a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <xTimerGenericCommand+0x98>)
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	f107 0110 	add.w	r1, r7, #16
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f7fe fbc4 	bl	800338c <xQueueGenericSend>
 8004c04:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c06:	e008      	b.n	8004c1a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c08:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <xTimerGenericCommand+0x98>)
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	f107 0110 	add.w	r1, r7, #16
 8004c10:	2300      	movs	r3, #0
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	f7fe fcbc 	bl	8003590 <xQueueGenericSendFromISR>
 8004c18:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3728      	adds	r7, #40	@ 0x28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20000d04 	.word	0x20000d04

08004c28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c32:	4b23      	ldr	r3, [pc, #140]	@ (8004cc0 <prvProcessExpiredTimer+0x98>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fe fa6f 	bl	8003124 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d023      	beq.n	8004c9c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	699a      	ldr	r2, [r3, #24]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	18d1      	adds	r1, r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	6978      	ldr	r0, [r7, #20]
 8004c62:	f000 f8d5 	bl	8004e10 <prvInsertTimerInActiveList>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d020      	beq.n	8004cae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	2300      	movs	r3, #0
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	2100      	movs	r1, #0
 8004c76:	6978      	ldr	r0, [r7, #20]
 8004c78:	f7ff ff88 	bl	8004b8c <xTimerGenericCommand>
 8004c7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d114      	bne.n	8004cae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	60fb      	str	r3, [r7, #12]
}
 8004c96:	bf00      	nop
 8004c98:	bf00      	nop
 8004c9a:	e7fd      	b.n	8004c98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ca2:	f023 0301 	bic.w	r3, r3, #1
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	6978      	ldr	r0, [r7, #20]
 8004cb4:	4798      	blx	r3
}
 8004cb6:	bf00      	nop
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000cfc 	.word	0x20000cfc

08004cc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ccc:	f107 0308 	add.w	r3, r7, #8
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 f859 	bl	8004d88 <prvGetNextExpireTime>
 8004cd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f805 	bl	8004cec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ce2:	f000 f8d7 	bl	8004e94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ce6:	bf00      	nop
 8004ce8:	e7f0      	b.n	8004ccc <prvTimerTask+0x8>
	...

08004cec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004cf6:	f7ff f97d 	bl	8003ff4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cfa:	f107 0308 	add.w	r3, r7, #8
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 f866 	bl	8004dd0 <prvSampleTimeNow>
 8004d04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d130      	bne.n	8004d6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <prvProcessTimerOrBlockTask+0x3c>
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d806      	bhi.n	8004d28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d1a:	f7ff f979 	bl	8004010 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d1e:	68f9      	ldr	r1, [r7, #12]
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff ff81 	bl	8004c28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d26:	e024      	b.n	8004d72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d008      	beq.n	8004d40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d2e:	4b13      	ldr	r3, [pc, #76]	@ (8004d7c <prvProcessTimerOrBlockTask+0x90>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <prvProcessTimerOrBlockTask+0x50>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <prvProcessTimerOrBlockTask+0x52>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d40:	4b0f      	ldr	r3, [pc, #60]	@ (8004d80 <prvProcessTimerOrBlockTask+0x94>)
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f7fe fed9 	bl	8003b04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d52:	f7ff f95d 	bl	8004010 <xTaskResumeAll>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d5c:	4b09      	ldr	r3, [pc, #36]	@ (8004d84 <prvProcessTimerOrBlockTask+0x98>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	f3bf 8f6f 	isb	sy
}
 8004d6c:	e001      	b.n	8004d72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d6e:	f7ff f94f 	bl	8004010 <xTaskResumeAll>
}
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000d00 	.word	0x20000d00
 8004d80:	20000d04 	.word	0x20000d04
 8004d84:	e000ed04 	.word	0xe000ed04

08004d88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d90:	4b0e      	ldr	r3, [pc, #56]	@ (8004dcc <prvGetNextExpireTime+0x44>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <prvGetNextExpireTime+0x16>
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	e000      	b.n	8004da0 <prvGetNextExpireTime+0x18>
 8004d9e:	2200      	movs	r2, #0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d105      	bne.n	8004db8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dac:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <prvGetNextExpireTime+0x44>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	e001      	b.n	8004dbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000cfc 	.word	0x20000cfc

08004dd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004dd8:	f7ff f9b8 	bl	800414c <xTaskGetTickCount>
 8004ddc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004dde:	4b0b      	ldr	r3, [pc, #44]	@ (8004e0c <prvSampleTimeNow+0x3c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d205      	bcs.n	8004df4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004de8:	f000 f93a 	bl	8005060 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	e002      	b.n	8004dfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004dfa:	4a04      	ldr	r2, [pc, #16]	@ (8004e0c <prvSampleTimeNow+0x3c>)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e00:	68fb      	ldr	r3, [r7, #12]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000d0c 	.word	0x20000d0c

08004e10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d812      	bhi.n	8004e5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	1ad2      	subs	r2, r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d302      	bcc.n	8004e4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e44:	2301      	movs	r3, #1
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e01b      	b.n	8004e82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e4a:	4b10      	ldr	r3, [pc, #64]	@ (8004e8c <prvInsertTimerInActiveList+0x7c>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3304      	adds	r3, #4
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7fe f92c 	bl	80030b2 <vListInsert>
 8004e5a:	e012      	b.n	8004e82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d206      	bcs.n	8004e72 <prvInsertTimerInActiveList+0x62>
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d302      	bcc.n	8004e72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	e007      	b.n	8004e82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e72:	4b07      	ldr	r3, [pc, #28]	@ (8004e90 <prvInsertTimerInActiveList+0x80>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f7fe f918 	bl	80030b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e82:	697b      	ldr	r3, [r7, #20]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20000d00 	.word	0x20000d00
 8004e90:	20000cfc 	.word	0x20000cfc

08004e94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08e      	sub	sp, #56	@ 0x38
 8004e98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e9a:	e0ce      	b.n	800503a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	da19      	bge.n	8004ed6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ea2:	1d3b      	adds	r3, r7, #4
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10b      	bne.n	8004ec6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	61fb      	str	r3, [r7, #28]
}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	e7fd      	b.n	8004ec2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ecc:	6850      	ldr	r0, [r2, #4]
 8004ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ed0:	6892      	ldr	r2, [r2, #8]
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f2c0 80ae 	blt.w	800503a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eec:	3304      	adds	r3, #4
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fe f918 	bl	8003124 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ef4:	463b      	mov	r3, r7
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff ff6a 	bl	8004dd0 <prvSampleTimeNow>
 8004efc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b09      	cmp	r3, #9
 8004f02:	f200 8097 	bhi.w	8005034 <prvProcessReceivedCommands+0x1a0>
 8004f06:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <prvProcessReceivedCommands+0x78>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f35 	.word	0x08004f35
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	08004f35 	.word	0x08004f35
 8004f18:	08004fab 	.word	0x08004fab
 8004f1c:	08004fbf 	.word	0x08004fbf
 8004f20:	0800500b 	.word	0x0800500b
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f35 	.word	0x08004f35
 8004f2c:	08004fab 	.word	0x08004fab
 8004f30:	08004fbf 	.word	0x08004fbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	18d1      	adds	r1, r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f54:	f7ff ff5c 	bl	8004e10 <prvInsertTimerInActiveList>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d06c      	beq.n	8005038 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d061      	beq.n	8005038 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	441a      	add	r2, r3
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	2300      	movs	r3, #0
 8004f82:	2100      	movs	r1, #0
 8004f84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f86:	f7ff fe01 	bl	8004b8c <xTimerGenericCommand>
 8004f8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d152      	bne.n	8005038 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	61bb      	str	r3, [r7, #24]
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	e7fd      	b.n	8004fa6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004fbc:	e03d      	b.n	800503a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10b      	bne.n	8004ff6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	617b      	str	r3, [r7, #20]
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	e7fd      	b.n	8004ff2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	18d1      	adds	r1, r2, r3
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005004:	f7ff ff04 	bl	8004e10 <prvInsertTimerInActiveList>
					break;
 8005008:	e017      	b.n	800503a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800500a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800501a:	f000 fc05 	bl	8005828 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800501e:	e00c      	b.n	800503a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	b2da      	uxtb	r2, r3
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005032:	e002      	b.n	800503a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005034:	bf00      	nop
 8005036:	e000      	b.n	800503a <prvProcessReceivedCommands+0x1a6>
					break;
 8005038:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800503a:	4b08      	ldr	r3, [pc, #32]	@ (800505c <prvProcessReceivedCommands+0x1c8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	1d39      	adds	r1, r7, #4
 8005040:	2200      	movs	r2, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fb42 	bl	80036cc <xQueueReceive>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	f47f af26 	bne.w	8004e9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	3730      	adds	r7, #48	@ 0x30
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000d04 	.word	0x20000d04

08005060 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005066:	e049      	b.n	80050fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005068:	4b2e      	ldr	r3, [pc, #184]	@ (8005124 <prvSwitchTimerLists+0xc4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005072:	4b2c      	ldr	r3, [pc, #176]	@ (8005124 <prvSwitchTimerLists+0xc4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3304      	adds	r3, #4
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe f84f 	bl	8003124 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d02f      	beq.n	80050fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4413      	add	r3, r2
 80050a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d90e      	bls.n	80050cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005124 <prvSwitchTimerLists+0xc4>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3304      	adds	r3, #4
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f7fd fff4 	bl	80030b2 <vListInsert>
 80050ca:	e017      	b.n	80050fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050cc:	2300      	movs	r3, #0
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	2300      	movs	r3, #0
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	2100      	movs	r1, #0
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7ff fd58 	bl	8004b8c <xTimerGenericCommand>
 80050dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	603b      	str	r3, [r7, #0]
}
 80050f6:	bf00      	nop
 80050f8:	bf00      	nop
 80050fa:	e7fd      	b.n	80050f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050fc:	4b09      	ldr	r3, [pc, #36]	@ (8005124 <prvSwitchTimerLists+0xc4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1b0      	bne.n	8005068 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005106:	4b07      	ldr	r3, [pc, #28]	@ (8005124 <prvSwitchTimerLists+0xc4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800510c:	4b06      	ldr	r3, [pc, #24]	@ (8005128 <prvSwitchTimerLists+0xc8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a04      	ldr	r2, [pc, #16]	@ (8005124 <prvSwitchTimerLists+0xc4>)
 8005112:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005114:	4a04      	ldr	r2, [pc, #16]	@ (8005128 <prvSwitchTimerLists+0xc8>)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	6013      	str	r3, [r2, #0]
}
 800511a:	bf00      	nop
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000cfc 	.word	0x20000cfc
 8005128:	20000d00 	.word	0x20000d00

0800512c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005132:	f000 f989 	bl	8005448 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005136:	4b15      	ldr	r3, [pc, #84]	@ (800518c <prvCheckForValidListAndQueue+0x60>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d120      	bne.n	8005180 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800513e:	4814      	ldr	r0, [pc, #80]	@ (8005190 <prvCheckForValidListAndQueue+0x64>)
 8005140:	f7fd ff66 	bl	8003010 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005144:	4813      	ldr	r0, [pc, #76]	@ (8005194 <prvCheckForValidListAndQueue+0x68>)
 8005146:	f7fd ff63 	bl	8003010 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800514a:	4b13      	ldr	r3, [pc, #76]	@ (8005198 <prvCheckForValidListAndQueue+0x6c>)
 800514c:	4a10      	ldr	r2, [pc, #64]	@ (8005190 <prvCheckForValidListAndQueue+0x64>)
 800514e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005150:	4b12      	ldr	r3, [pc, #72]	@ (800519c <prvCheckForValidListAndQueue+0x70>)
 8005152:	4a10      	ldr	r2, [pc, #64]	@ (8005194 <prvCheckForValidListAndQueue+0x68>)
 8005154:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005156:	2300      	movs	r3, #0
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	4b11      	ldr	r3, [pc, #68]	@ (80051a0 <prvCheckForValidListAndQueue+0x74>)
 800515c:	4a11      	ldr	r2, [pc, #68]	@ (80051a4 <prvCheckForValidListAndQueue+0x78>)
 800515e:	2110      	movs	r1, #16
 8005160:	200a      	movs	r0, #10
 8005162:	f7fe f873 	bl	800324c <xQueueGenericCreateStatic>
 8005166:	4603      	mov	r3, r0
 8005168:	4a08      	ldr	r2, [pc, #32]	@ (800518c <prvCheckForValidListAndQueue+0x60>)
 800516a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800516c:	4b07      	ldr	r3, [pc, #28]	@ (800518c <prvCheckForValidListAndQueue+0x60>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005174:	4b05      	ldr	r3, [pc, #20]	@ (800518c <prvCheckForValidListAndQueue+0x60>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	490b      	ldr	r1, [pc, #44]	@ (80051a8 <prvCheckForValidListAndQueue+0x7c>)
 800517a:	4618      	mov	r0, r3
 800517c:	f7fe fc98 	bl	8003ab0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005180:	f000 f994 	bl	80054ac <vPortExitCritical>
}
 8005184:	bf00      	nop
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000d04 	.word	0x20000d04
 8005190:	20000cd4 	.word	0x20000cd4
 8005194:	20000ce8 	.word	0x20000ce8
 8005198:	20000cfc 	.word	0x20000cfc
 800519c:	20000d00 	.word	0x20000d00
 80051a0:	20000db0 	.word	0x20000db0
 80051a4:	20000d10 	.word	0x20000d10
 80051a8:	08005b24 	.word	0x08005b24

080051ac <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	@ 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80051ba:	f06f 0301 	mvn.w	r3, #1
 80051be:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <xTimerPendFunctionCallFromISR+0x3c>)
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	f107 0114 	add.w	r1, r7, #20
 80051d4:	2300      	movs	r3, #0
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	f7fe f9da 	bl	8003590 <xQueueGenericSendFromISR>
 80051dc:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3728      	adds	r7, #40	@ 0x28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000d04 	.word	0x20000d04

080051ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3b04      	subs	r3, #4
 80051fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3b04      	subs	r3, #4
 800520a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f023 0201 	bic.w	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b04      	subs	r3, #4
 800521a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800521c:	4a0c      	ldr	r2, [pc, #48]	@ (8005250 <pxPortInitialiseStack+0x64>)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3b14      	subs	r3, #20
 8005226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3b04      	subs	r3, #4
 8005232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f06f 0202 	mvn.w	r2, #2
 800523a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3b20      	subs	r3, #32
 8005240:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005242:	68fb      	ldr	r3, [r7, #12]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	08005255 	.word	0x08005255

08005254 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800525e:	4b13      	ldr	r3, [pc, #76]	@ (80052ac <prvTaskExitError+0x58>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005266:	d00b      	beq.n	8005280 <prvTaskExitError+0x2c>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	60fb      	str	r3, [r7, #12]
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	e7fd      	b.n	800527c <prvTaskExitError+0x28>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	60bb      	str	r3, [r7, #8]
}
 8005292:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005294:	bf00      	nop
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0fc      	beq.n	8005296 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	20000014 	.word	0x20000014

080052b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052b0:	4b07      	ldr	r3, [pc, #28]	@ (80052d0 <pxCurrentTCBConst2>)
 80052b2:	6819      	ldr	r1, [r3, #0]
 80052b4:	6808      	ldr	r0, [r1, #0]
 80052b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ba:	f380 8809 	msr	PSP, r0
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f380 8811 	msr	BASEPRI, r0
 80052ca:	4770      	bx	lr
 80052cc:	f3af 8000 	nop.w

080052d0 <pxCurrentTCBConst2>:
 80052d0:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop

080052d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052d8:	4808      	ldr	r0, [pc, #32]	@ (80052fc <prvPortStartFirstTask+0x24>)
 80052da:	6800      	ldr	r0, [r0, #0]
 80052dc:	6800      	ldr	r0, [r0, #0]
 80052de:	f380 8808 	msr	MSP, r0
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f380 8814 	msr	CONTROL, r0
 80052ea:	b662      	cpsie	i
 80052ec:	b661      	cpsie	f
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	df00      	svc	0
 80052f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052fa:	bf00      	nop
 80052fc:	e000ed08 	.word	0xe000ed08

08005300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005306:	4b47      	ldr	r3, [pc, #284]	@ (8005424 <xPortStartScheduler+0x124>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a47      	ldr	r2, [pc, #284]	@ (8005428 <xPortStartScheduler+0x128>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d10b      	bne.n	8005328 <xPortStartScheduler+0x28>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	613b      	str	r3, [r7, #16]
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	e7fd      	b.n	8005324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005328:	4b3e      	ldr	r3, [pc, #248]	@ (8005424 <xPortStartScheduler+0x124>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a3f      	ldr	r2, [pc, #252]	@ (800542c <xPortStartScheduler+0x12c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d10b      	bne.n	800534a <xPortStartScheduler+0x4a>
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	60fb      	str	r3, [r7, #12]
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	e7fd      	b.n	8005346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800534a:	4b39      	ldr	r3, [pc, #228]	@ (8005430 <xPortStartScheduler+0x130>)
 800534c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	22ff      	movs	r2, #255	@ 0xff
 800535a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800536c:	b2da      	uxtb	r2, r3
 800536e:	4b31      	ldr	r3, [pc, #196]	@ (8005434 <xPortStartScheduler+0x134>)
 8005370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005372:	4b31      	ldr	r3, [pc, #196]	@ (8005438 <xPortStartScheduler+0x138>)
 8005374:	2207      	movs	r2, #7
 8005376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005378:	e009      	b.n	800538e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800537a:	4b2f      	ldr	r3, [pc, #188]	@ (8005438 <xPortStartScheduler+0x138>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3b01      	subs	r3, #1
 8005380:	4a2d      	ldr	r2, [pc, #180]	@ (8005438 <xPortStartScheduler+0x138>)
 8005382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	b2db      	uxtb	r3, r3
 800538c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005396:	2b80      	cmp	r3, #128	@ 0x80
 8005398:	d0ef      	beq.n	800537a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800539a:	4b27      	ldr	r3, [pc, #156]	@ (8005438 <xPortStartScheduler+0x138>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1c3 0307 	rsb	r3, r3, #7
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d00b      	beq.n	80053be <xPortStartScheduler+0xbe>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	60bb      	str	r3, [r7, #8]
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	e7fd      	b.n	80053ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053be:	4b1e      	ldr	r3, [pc, #120]	@ (8005438 <xPortStartScheduler+0x138>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005438 <xPortStartScheduler+0x138>)
 80053c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005438 <xPortStartScheduler+0x138>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053d0:	4a19      	ldr	r2, [pc, #100]	@ (8005438 <xPortStartScheduler+0x138>)
 80053d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053dc:	4b17      	ldr	r3, [pc, #92]	@ (800543c <xPortStartScheduler+0x13c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a16      	ldr	r2, [pc, #88]	@ (800543c <xPortStartScheduler+0x13c>)
 80053e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053e8:	4b14      	ldr	r3, [pc, #80]	@ (800543c <xPortStartScheduler+0x13c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a13      	ldr	r2, [pc, #76]	@ (800543c <xPortStartScheduler+0x13c>)
 80053ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80053f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053f4:	f000 f8da 	bl	80055ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053f8:	4b11      	ldr	r3, [pc, #68]	@ (8005440 <xPortStartScheduler+0x140>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053fe:	f000 f8f9 	bl	80055f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005402:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <xPortStartScheduler+0x144>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a0f      	ldr	r2, [pc, #60]	@ (8005444 <xPortStartScheduler+0x144>)
 8005408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800540c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800540e:	f7ff ff63 	bl	80052d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005412:	f7fe ff65 	bl	80042e0 <vTaskSwitchContext>
	prvTaskExitError();
 8005416:	f7ff ff1d 	bl	8005254 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	e000ed00 	.word	0xe000ed00
 8005428:	410fc271 	.word	0x410fc271
 800542c:	410fc270 	.word	0x410fc270
 8005430:	e000e400 	.word	0xe000e400
 8005434:	20000e00 	.word	0x20000e00
 8005438:	20000e04 	.word	0x20000e04
 800543c:	e000ed20 	.word	0xe000ed20
 8005440:	20000014 	.word	0x20000014
 8005444:	e000ef34 	.word	0xe000ef34

08005448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	607b      	str	r3, [r7, #4]
}
 8005460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005462:	4b10      	ldr	r3, [pc, #64]	@ (80054a4 <vPortEnterCritical+0x5c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3301      	adds	r3, #1
 8005468:	4a0e      	ldr	r2, [pc, #56]	@ (80054a4 <vPortEnterCritical+0x5c>)
 800546a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800546c:	4b0d      	ldr	r3, [pc, #52]	@ (80054a4 <vPortEnterCritical+0x5c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d110      	bne.n	8005496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005474:	4b0c      	ldr	r3, [pc, #48]	@ (80054a8 <vPortEnterCritical+0x60>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <vPortEnterCritical+0x4e>
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	603b      	str	r3, [r7, #0]
}
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	e7fd      	b.n	8005492 <vPortEnterCritical+0x4a>
	}
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000014 	.word	0x20000014
 80054a8:	e000ed04 	.word	0xe000ed04

080054ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054b2:	4b12      	ldr	r3, [pc, #72]	@ (80054fc <vPortExitCritical+0x50>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10b      	bne.n	80054d2 <vPortExitCritical+0x26>
	__asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	607b      	str	r3, [r7, #4]
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	e7fd      	b.n	80054ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054d2:	4b0a      	ldr	r3, [pc, #40]	@ (80054fc <vPortExitCritical+0x50>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	4a08      	ldr	r2, [pc, #32]	@ (80054fc <vPortExitCritical+0x50>)
 80054da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054dc:	4b07      	ldr	r3, [pc, #28]	@ (80054fc <vPortExitCritical+0x50>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d105      	bne.n	80054f0 <vPortExitCritical+0x44>
 80054e4:	2300      	movs	r3, #0
 80054e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	f383 8811 	msr	BASEPRI, r3
}
 80054ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	20000014 	.word	0x20000014

08005500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005500:	f3ef 8009 	mrs	r0, PSP
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4b15      	ldr	r3, [pc, #84]	@ (8005560 <pxCurrentTCBConst>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	f01e 0f10 	tst.w	lr, #16
 8005510:	bf08      	it	eq
 8005512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551a:	6010      	str	r0, [r2, #0]
 800551c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005524:	f380 8811 	msr	BASEPRI, r0
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f7fe fed6 	bl	80042e0 <vTaskSwitchContext>
 8005534:	f04f 0000 	mov.w	r0, #0
 8005538:	f380 8811 	msr	BASEPRI, r0
 800553c:	bc09      	pop	{r0, r3}
 800553e:	6819      	ldr	r1, [r3, #0]
 8005540:	6808      	ldr	r0, [r1, #0]
 8005542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005546:	f01e 0f10 	tst.w	lr, #16
 800554a:	bf08      	it	eq
 800554c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005550:	f380 8809 	msr	PSP, r0
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	f3af 8000 	nop.w

08005560 <pxCurrentTCBConst>:
 8005560:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop

08005568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	607b      	str	r3, [r7, #4]
}
 8005580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005582:	f7fe fdf3 	bl	800416c <xTaskIncrementTick>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800558c:	4b06      	ldr	r3, [pc, #24]	@ (80055a8 <xPortSysTickHandler+0x40>)
 800558e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	2300      	movs	r3, #0
 8005596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	f383 8811 	msr	BASEPRI, r3
}
 800559e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055b0:	4b0b      	ldr	r3, [pc, #44]	@ (80055e0 <vPortSetupTimerInterrupt+0x34>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055b6:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <vPortSetupTimerInterrupt+0x38>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055bc:	4b0a      	ldr	r3, [pc, #40]	@ (80055e8 <vPortSetupTimerInterrupt+0x3c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0a      	ldr	r2, [pc, #40]	@ (80055ec <vPortSetupTimerInterrupt+0x40>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	099b      	lsrs	r3, r3, #6
 80055c8:	4a09      	ldr	r2, [pc, #36]	@ (80055f0 <vPortSetupTimerInterrupt+0x44>)
 80055ca:	3b01      	subs	r3, #1
 80055cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ce:	4b04      	ldr	r3, [pc, #16]	@ (80055e0 <vPortSetupTimerInterrupt+0x34>)
 80055d0:	2207      	movs	r2, #7
 80055d2:	601a      	str	r2, [r3, #0]
}
 80055d4:	bf00      	nop
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	e000e010 	.word	0xe000e010
 80055e4:	e000e018 	.word	0xe000e018
 80055e8:	20000008 	.word	0x20000008
 80055ec:	10624dd3 	.word	0x10624dd3
 80055f0:	e000e014 	.word	0xe000e014

080055f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005604 <vPortEnableVFP+0x10>
 80055f8:	6801      	ldr	r1, [r0, #0]
 80055fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80055fe:	6001      	str	r1, [r0, #0]
 8005600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005602:	bf00      	nop
 8005604:	e000ed88 	.word	0xe000ed88

08005608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800560e:	f3ef 8305 	mrs	r3, IPSR
 8005612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b0f      	cmp	r3, #15
 8005618:	d915      	bls.n	8005646 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800561a:	4a18      	ldr	r2, [pc, #96]	@ (800567c <vPortValidateInterruptPriority+0x74>)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005624:	4b16      	ldr	r3, [pc, #88]	@ (8005680 <vPortValidateInterruptPriority+0x78>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	7afa      	ldrb	r2, [r7, #11]
 800562a:	429a      	cmp	r2, r3
 800562c:	d20b      	bcs.n	8005646 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	607b      	str	r3, [r7, #4]
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	e7fd      	b.n	8005642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005646:	4b0f      	ldr	r3, [pc, #60]	@ (8005684 <vPortValidateInterruptPriority+0x7c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800564e:	4b0e      	ldr	r3, [pc, #56]	@ (8005688 <vPortValidateInterruptPriority+0x80>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d90b      	bls.n	800566e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	603b      	str	r3, [r7, #0]
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <vPortValidateInterruptPriority+0x62>
	}
 800566e:	bf00      	nop
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	e000e3f0 	.word	0xe000e3f0
 8005680:	20000e00 	.word	0x20000e00
 8005684:	e000ed0c 	.word	0xe000ed0c
 8005688:	20000e04 	.word	0x20000e04

0800568c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	@ 0x28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005694:	2300      	movs	r3, #0
 8005696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005698:	f7fe fcac 	bl	8003ff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800569c:	4b5c      	ldr	r3, [pc, #368]	@ (8005810 <pvPortMalloc+0x184>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056a4:	f000 f924 	bl	80058f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005814 <pvPortMalloc+0x188>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f040 8095 	bne.w	80057e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01e      	beq.n	80056fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80056bc:	2208      	movs	r2, #8
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d015      	beq.n	80056fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f023 0307 	bic.w	r3, r3, #7
 80056d4:	3308      	adds	r3, #8
 80056d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <pvPortMalloc+0x6e>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	617b      	str	r3, [r7, #20]
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	e7fd      	b.n	80056f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d06f      	beq.n	80057e0 <pvPortMalloc+0x154>
 8005700:	4b45      	ldr	r3, [pc, #276]	@ (8005818 <pvPortMalloc+0x18c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	429a      	cmp	r2, r3
 8005708:	d86a      	bhi.n	80057e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800570a:	4b44      	ldr	r3, [pc, #272]	@ (800581c <pvPortMalloc+0x190>)
 800570c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800570e:	4b43      	ldr	r3, [pc, #268]	@ (800581c <pvPortMalloc+0x190>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005714:	e004      	b.n	8005720 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	429a      	cmp	r2, r3
 8005728:	d903      	bls.n	8005732 <pvPortMalloc+0xa6>
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f1      	bne.n	8005716 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005732:	4b37      	ldr	r3, [pc, #220]	@ (8005810 <pvPortMalloc+0x184>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005738:	429a      	cmp	r2, r3
 800573a:	d051      	beq.n	80057e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2208      	movs	r2, #8
 8005742:	4413      	add	r3, r2
 8005744:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	1ad2      	subs	r2, r2, r3
 8005756:	2308      	movs	r3, #8
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	429a      	cmp	r2, r3
 800575c:	d920      	bls.n	80057a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800575e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4413      	add	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00b      	beq.n	8005788 <pvPortMalloc+0xfc>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	613b      	str	r3, [r7, #16]
}
 8005782:	bf00      	nop
 8005784:	bf00      	nop
 8005786:	e7fd      	b.n	8005784 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	1ad2      	subs	r2, r2, r3
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800579a:	69b8      	ldr	r0, [r7, #24]
 800579c:	f000 f90a 	bl	80059b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005818 <pvPortMalloc+0x18c>)
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005818 <pvPortMalloc+0x18c>)
 80057ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005818 <pvPortMalloc+0x18c>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005820 <pvPortMalloc+0x194>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d203      	bcs.n	80057c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057ba:	4b17      	ldr	r3, [pc, #92]	@ (8005818 <pvPortMalloc+0x18c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a18      	ldr	r2, [pc, #96]	@ (8005820 <pvPortMalloc+0x194>)
 80057c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	4b13      	ldr	r3, [pc, #76]	@ (8005814 <pvPortMalloc+0x188>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057d6:	4b13      	ldr	r3, [pc, #76]	@ (8005824 <pvPortMalloc+0x198>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3301      	adds	r3, #1
 80057dc:	4a11      	ldr	r2, [pc, #68]	@ (8005824 <pvPortMalloc+0x198>)
 80057de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057e0:	f7fe fc16 	bl	8004010 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00b      	beq.n	8005806 <pvPortMalloc+0x17a>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	60fb      	str	r3, [r7, #12]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <pvPortMalloc+0x176>
	return pvReturn;
 8005806:	69fb      	ldr	r3, [r7, #28]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3728      	adds	r7, #40	@ 0x28
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20004a10 	.word	0x20004a10
 8005814:	20004a24 	.word	0x20004a24
 8005818:	20004a14 	.word	0x20004a14
 800581c:	20004a08 	.word	0x20004a08
 8005820:	20004a18 	.word	0x20004a18
 8005824:	20004a1c 	.word	0x20004a1c

08005828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d04f      	beq.n	80058da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800583a:	2308      	movs	r3, #8
 800583c:	425b      	negs	r3, r3
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4413      	add	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	4b25      	ldr	r3, [pc, #148]	@ (80058e4 <vPortFree+0xbc>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4013      	ands	r3, r2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <vPortFree+0x46>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	60fb      	str	r3, [r7, #12]
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	e7fd      	b.n	800586a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00b      	beq.n	800588e <vPortFree+0x66>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	60bb      	str	r3, [r7, #8]
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	e7fd      	b.n	800588a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	4b14      	ldr	r3, [pc, #80]	@ (80058e4 <vPortFree+0xbc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4013      	ands	r3, r2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01e      	beq.n	80058da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d11a      	bne.n	80058da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	4b0e      	ldr	r3, [pc, #56]	@ (80058e4 <vPortFree+0xbc>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	43db      	mvns	r3, r3
 80058ae:	401a      	ands	r2, r3
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058b4:	f7fe fb9e 	bl	8003ff4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	4b0a      	ldr	r3, [pc, #40]	@ (80058e8 <vPortFree+0xc0>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4413      	add	r3, r2
 80058c2:	4a09      	ldr	r2, [pc, #36]	@ (80058e8 <vPortFree+0xc0>)
 80058c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058c6:	6938      	ldr	r0, [r7, #16]
 80058c8:	f000 f874 	bl	80059b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058cc:	4b07      	ldr	r3, [pc, #28]	@ (80058ec <vPortFree+0xc4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	4a06      	ldr	r2, [pc, #24]	@ (80058ec <vPortFree+0xc4>)
 80058d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058d6:	f7fe fb9b 	bl	8004010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058da:	bf00      	nop
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20004a24 	.word	0x20004a24
 80058e8:	20004a14 	.word	0x20004a14
 80058ec:	20004a20 	.word	0x20004a20

080058f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80058fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058fc:	4b27      	ldr	r3, [pc, #156]	@ (800599c <prvHeapInit+0xac>)
 80058fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00c      	beq.n	8005924 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3307      	adds	r3, #7
 800590e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0307 	bic.w	r3, r3, #7
 8005916:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	4a1f      	ldr	r2, [pc, #124]	@ (800599c <prvHeapInit+0xac>)
 8005920:	4413      	add	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005928:	4a1d      	ldr	r2, [pc, #116]	@ (80059a0 <prvHeapInit+0xb0>)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800592e:	4b1c      	ldr	r3, [pc, #112]	@ (80059a0 <prvHeapInit+0xb0>)
 8005930:	2200      	movs	r2, #0
 8005932:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	4413      	add	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800593c:	2208      	movs	r2, #8
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1a9b      	subs	r3, r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0307 	bic.w	r3, r3, #7
 800594a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4a15      	ldr	r2, [pc, #84]	@ (80059a4 <prvHeapInit+0xb4>)
 8005950:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005952:	4b14      	ldr	r3, [pc, #80]	@ (80059a4 <prvHeapInit+0xb4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2200      	movs	r2, #0
 8005958:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800595a:	4b12      	ldr	r3, [pc, #72]	@ (80059a4 <prvHeapInit+0xb4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	1ad2      	subs	r2, r2, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005970:	4b0c      	ldr	r3, [pc, #48]	@ (80059a4 <prvHeapInit+0xb4>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	4a0a      	ldr	r2, [pc, #40]	@ (80059a8 <prvHeapInit+0xb8>)
 800597e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4a09      	ldr	r2, [pc, #36]	@ (80059ac <prvHeapInit+0xbc>)
 8005986:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005988:	4b09      	ldr	r3, [pc, #36]	@ (80059b0 <prvHeapInit+0xc0>)
 800598a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800598e:	601a      	str	r2, [r3, #0]
}
 8005990:	bf00      	nop
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	20000e08 	.word	0x20000e08
 80059a0:	20004a08 	.word	0x20004a08
 80059a4:	20004a10 	.word	0x20004a10
 80059a8:	20004a18 	.word	0x20004a18
 80059ac:	20004a14 	.word	0x20004a14
 80059b0:	20004a24 	.word	0x20004a24

080059b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059bc:	4b28      	ldr	r3, [pc, #160]	@ (8005a60 <prvInsertBlockIntoFreeList+0xac>)
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e002      	b.n	80059c8 <prvInsertBlockIntoFreeList+0x14>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d8f7      	bhi.n	80059c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	4413      	add	r3, r2
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d108      	bne.n	80059f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	441a      	add	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	441a      	add	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d118      	bne.n	8005a3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b15      	ldr	r3, [pc, #84]	@ (8005a64 <prvInsertBlockIntoFreeList+0xb0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d00d      	beq.n	8005a32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	441a      	add	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e008      	b.n	8005a44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a32:	4b0c      	ldr	r3, [pc, #48]	@ (8005a64 <prvInsertBlockIntoFreeList+0xb0>)
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e003      	b.n	8005a44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d002      	beq.n	8005a52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20004a08 	.word	0x20004a08
 8005a64:	20004a10 	.word	0x20004a10

08005a68 <memset>:
 8005a68:	4402      	add	r2, r0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d100      	bne.n	8005a72 <memset+0xa>
 8005a70:	4770      	bx	lr
 8005a72:	f803 1b01 	strb.w	r1, [r3], #1
 8005a76:	e7f9      	b.n	8005a6c <memset+0x4>

08005a78 <__libc_init_array>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005ab0 <__libc_init_array+0x38>)
 8005a7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005ab4 <__libc_init_array+0x3c>)
 8005a7e:	1b64      	subs	r4, r4, r5
 8005a80:	10a4      	asrs	r4, r4, #2
 8005a82:	2600      	movs	r6, #0
 8005a84:	42a6      	cmp	r6, r4
 8005a86:	d109      	bne.n	8005a9c <__libc_init_array+0x24>
 8005a88:	4d0b      	ldr	r5, [pc, #44]	@ (8005ab8 <__libc_init_array+0x40>)
 8005a8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005abc <__libc_init_array+0x44>)
 8005a8c:	f000 f826 	bl	8005adc <_init>
 8005a90:	1b64      	subs	r4, r4, r5
 8005a92:	10a4      	asrs	r4, r4, #2
 8005a94:	2600      	movs	r6, #0
 8005a96:	42a6      	cmp	r6, r4
 8005a98:	d105      	bne.n	8005aa6 <__libc_init_array+0x2e>
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
 8005a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa0:	4798      	blx	r3
 8005aa2:	3601      	adds	r6, #1
 8005aa4:	e7ee      	b.n	8005a84 <__libc_init_array+0xc>
 8005aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aaa:	4798      	blx	r3
 8005aac:	3601      	adds	r6, #1
 8005aae:	e7f2      	b.n	8005a96 <__libc_init_array+0x1e>
 8005ab0:	08005bc8 	.word	0x08005bc8
 8005ab4:	08005bc8 	.word	0x08005bc8
 8005ab8:	08005bc8 	.word	0x08005bc8
 8005abc:	08005bcc 	.word	0x08005bcc

08005ac0 <memcpy>:
 8005ac0:	440a      	add	r2, r1
 8005ac2:	4291      	cmp	r1, r2
 8005ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ac8:	d100      	bne.n	8005acc <memcpy+0xc>
 8005aca:	4770      	bx	lr
 8005acc:	b510      	push	{r4, lr}
 8005ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ad6:	4291      	cmp	r1, r2
 8005ad8:	d1f9      	bne.n	8005ace <memcpy+0xe>
 8005ada:	bd10      	pop	{r4, pc}

08005adc <_init>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	bf00      	nop
 8005ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae2:	bc08      	pop	{r3}
 8005ae4:	469e      	mov	lr, r3
 8005ae6:	4770      	bx	lr

08005ae8 <_fini>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr
