
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018ac  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001a40  08001a40  00002a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a50  08001a50  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001a50  08001a50  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001a50  08001a50  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a50  08001a50  00002a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a54  08001a54  00002a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001a58  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08001a64  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08001a64  00003034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028a8  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009be  00000000  00000000  000058e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  000062a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000142  00000000  00000000  00006480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eebe  00000000  00000000  000065c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002f62  00000000  00000000  00015480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000542f1  00000000  00000000  000183e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006c6d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000618  00000000  00000000  0006c718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0006cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001a28 	.word	0x08001a28

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001a28 	.word	0x08001a28

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	@ 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2uiz>:
 8000970:	004a      	lsls	r2, r1, #1
 8000972:	d211      	bcs.n	8000998 <__aeabi_d2uiz+0x28>
 8000974:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000978:	d211      	bcs.n	800099e <__aeabi_d2uiz+0x2e>
 800097a:	d50d      	bpl.n	8000998 <__aeabi_d2uiz+0x28>
 800097c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000984:	d40e      	bmi.n	80009a4 <__aeabi_d2uiz+0x34>
 8000986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d102      	bne.n	80009aa <__aeabi_d2uiz+0x3a>
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr

080009b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <SystemInit+0x20>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <SystemInit+0x20>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	2302      	movs	r3, #2
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	2302      	movs	r3, #2
 80009ec:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80009ee:	4b34      	ldr	r3, [pc, #208]	@ (8000ac0 <SystemCoreClockUpdate+0xec>)
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	f003 030c 	and.w	r3, r3, #12
 80009f6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d011      	beq.n	8000a22 <SystemCoreClockUpdate+0x4e>
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	2b08      	cmp	r3, #8
 8000a02:	d844      	bhi.n	8000a8e <SystemCoreClockUpdate+0xba>
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <SystemCoreClockUpdate+0x3e>
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	d004      	beq.n	8000a1a <SystemCoreClockUpdate+0x46>
 8000a10:	e03d      	b.n	8000a8e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <SystemCoreClockUpdate+0xf0>)
 8000a14:	4a2c      	ldr	r2, [pc, #176]	@ (8000ac8 <SystemCoreClockUpdate+0xf4>)
 8000a16:	601a      	str	r2, [r3, #0]
      break;
 8000a18:	e03d      	b.n	8000a96 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <SystemCoreClockUpdate+0xf0>)
 8000a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8000acc <SystemCoreClockUpdate+0xf8>)
 8000a1e:	601a      	str	r2, [r3, #0]
      break;
 8000a20:	e039      	b.n	8000a96 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a22:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <SystemCoreClockUpdate+0xec>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	0d9b      	lsrs	r3, r3, #22
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a2e:	4b24      	ldr	r3, [pc, #144]	@ (8000ac0 <SystemCoreClockUpdate+0xec>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a36:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00c      	beq.n	8000a58 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a3e:	4a23      	ldr	r2, [pc, #140]	@ (8000acc <SystemCoreClockUpdate+0xf8>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac0 <SystemCoreClockUpdate+0xec>)
 8000a48:	6852      	ldr	r2, [r2, #4]
 8000a4a:	0992      	lsrs	r2, r2, #6
 8000a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a50:	fb02 f303 	mul.w	r3, r2, r3
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e00b      	b.n	8000a70 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac8 <SystemCoreClockUpdate+0xf4>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a60:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <SystemCoreClockUpdate+0xec>)
 8000a62:	6852      	ldr	r2, [r2, #4]
 8000a64:	0992      	lsrs	r2, r2, #6
 8000a66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a6a:	fb02 f303 	mul.w	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a70:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <SystemCoreClockUpdate+0xec>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	0c1b      	lsrs	r3, r3, #16
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a88:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac4 <SystemCoreClockUpdate+0xf0>)
 8000a8a:	6013      	str	r3, [r2, #0]
      break;
 8000a8c:	e003      	b.n	8000a96 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <SystemCoreClockUpdate+0xf0>)
 8000a90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac8 <SystemCoreClockUpdate+0xf4>)
 8000a92:	601a      	str	r2, [r3, #0]
      break;
 8000a94:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <SystemCoreClockUpdate+0xec>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	091b      	lsrs	r3, r3, #4
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad0 <SystemCoreClockUpdate+0xfc>)
 8000aa2:	5cd3      	ldrb	r3, [r2, r3]
 8000aa4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <SystemCoreClockUpdate+0xf0>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab0:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <SystemCoreClockUpdate+0xf0>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	371c      	adds	r7, #28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	00f42400 	.word	0x00f42400
 8000acc:	007a1200 	.word	0x007a1200
 8000ad0:	08001a40 	.word	0x08001a40

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	@ (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	@ (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <GetTick>:
#include "Delay.h"

uint32_t uwTick = 0;

static uint32_t GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	@ (8000b3c <GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000028 	.word	0x20000028

08000b40 <Delay_Init>:

// Inicializamos Systick e interrupción
void Delay_Init(uint32_t ticks)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	SysTick -> CTRL &= ~SysTick_CTRL_ENABLE_Msk;	//Dehabilitamos systick
 8000b48:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <Delay_Init+0x54>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a11      	ldr	r2, [pc, #68]	@ (8000b94 <Delay_Init+0x54>)
 8000b4e:	f023 0301 	bic.w	r3, r3, #1
 8000b52:	6013      	str	r3, [r2, #0]
	SysTick -> LOAD = ticks - 1;				 	//Cargamos valor LOAD
 8000b54:	4a0f      	ldr	r2, [pc, #60]	@ (8000b94 <Delay_Init+0x54>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	6053      	str	r3, [r2, #4]
	SysTick -> CTRL |= 1U<<2; 						//Escogemos fuente de reloj
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <Delay_Init+0x54>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0c      	ldr	r2, [pc, #48]	@ (8000b94 <Delay_Init+0x54>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(SysTick_IRQn, 7);				//Asignamos prioridad de 7
 8000b68:	2107      	movs	r1, #7
 8000b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6e:	f7ff ffb1 	bl	8000ad4 <__NVIC_SetPriority>
	SysTick -> CTRL |= 1<<1;						//Activamos interrupción por conteo
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <Delay_Init+0x54>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a07      	ldr	r2, [pc, #28]	@ (8000b94 <Delay_Init+0x54>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6013      	str	r3, [r2, #0]
	SysTick -> CTRL |= SysTick_CTRL_ENABLE_Msk;		//Habilitamos conteo
 8000b7e:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <Delay_Init+0x54>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <Delay_Init+0x54>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6013      	str	r3, [r2, #0]
	return;
 8000b8a:	bf00      	nop
}
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	e000e010 	.word	0xe000e010

08000b98 <delay_ms>:
}

#endif

void delay_ms(uint32_t delay)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	{
		delay_us(1000);
	}
#else

	int32_t tickstart = GetTick();
 8000ba0:	f7ff ffc2 	bl	8000b28 <GetTick>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60fb      	str	r3, [r7, #12]
	uint32_t wait = delay;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	60bb      	str	r3, [r7, #8]
	while((GetTick() - tickstart) < wait);
 8000bac:	bf00      	nop
 8000bae:	f7ff ffbb 	bl	8000b28 <GetTick>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d8f7      	bhi.n	8000bae <delay_ms+0x16>

#endif

}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <__NVIC_EnableIRQ>:
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4907      	ldr	r1, [pc, #28]	@ (8000c00 <__NVIC_EnableIRQ+0x38>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_ClearPendingIRQ>:
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0c      	blt.n	8000c30 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	@ (8000c3c <__NVIC_ClearPendingIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	3360      	adds	r3, #96	@ 0x60
 8000c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	@ (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	@ (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <GPIO_Input_Config>:
 * In main(): GPIO_Input_Config(GPIOB, 13, PULL_NONE , &exti13);
 *
 */

void GPIO_Input_Config(GPIO_TypeDef  *GPIOx, uint8_t Pin, Input_Trigger_t Pull, EXTI_Config_t *exti_t)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	72fb      	strb	r3, [r7, #11]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	72bb      	strb	r3, [r7, #10]
	//Clock
	ENABLE_GPIO_CLOCK(GPIOx);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4a46      	ldr	r2, [pc, #280]	@ (8000dc4 <GPIO_Input_Config+0x130>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d106      	bne.n	8000cbc <GPIO_Input_Config+0x28>
 8000cae:	4b46      	ldr	r3, [pc, #280]	@ (8000dc8 <GPIO_Input_Config+0x134>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a45      	ldr	r2, [pc, #276]	@ (8000dc8 <GPIO_Input_Config+0x134>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	e035      	b.n	8000d28 <GPIO_Input_Config+0x94>
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4a43      	ldr	r2, [pc, #268]	@ (8000dcc <GPIO_Input_Config+0x138>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d106      	bne.n	8000cd2 <GPIO_Input_Config+0x3e>
 8000cc4:	4b40      	ldr	r3, [pc, #256]	@ (8000dc8 <GPIO_Input_Config+0x134>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc8:	4a3f      	ldr	r2, [pc, #252]	@ (8000dc8 <GPIO_Input_Config+0x134>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd0:	e02a      	b.n	8000d28 <GPIO_Input_Config+0x94>
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4a3e      	ldr	r2, [pc, #248]	@ (8000dd0 <GPIO_Input_Config+0x13c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d106      	bne.n	8000ce8 <GPIO_Input_Config+0x54>
 8000cda:	4b3b      	ldr	r3, [pc, #236]	@ (8000dc8 <GPIO_Input_Config+0x134>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a3a      	ldr	r2, [pc, #232]	@ (8000dc8 <GPIO_Input_Config+0x134>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	e01f      	b.n	8000d28 <GPIO_Input_Config+0x94>
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4a3a      	ldr	r2, [pc, #232]	@ (8000dd4 <GPIO_Input_Config+0x140>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d106      	bne.n	8000cfe <GPIO_Input_Config+0x6a>
 8000cf0:	4b35      	ldr	r3, [pc, #212]	@ (8000dc8 <GPIO_Input_Config+0x134>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf4:	4a34      	ldr	r2, [pc, #208]	@ (8000dc8 <GPIO_Input_Config+0x134>)
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfc:	e014      	b.n	8000d28 <GPIO_Input_Config+0x94>
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4a35      	ldr	r2, [pc, #212]	@ (8000dd8 <GPIO_Input_Config+0x144>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d106      	bne.n	8000d14 <GPIO_Input_Config+0x80>
 8000d06:	4b30      	ldr	r3, [pc, #192]	@ (8000dc8 <GPIO_Input_Config+0x134>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8000dc8 <GPIO_Input_Config+0x134>)
 8000d0c:	f043 0310 	orr.w	r3, r3, #16
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	e009      	b.n	8000d28 <GPIO_Input_Config+0x94>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4a31      	ldr	r2, [pc, #196]	@ (8000ddc <GPIO_Input_Config+0x148>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d105      	bne.n	8000d28 <GPIO_Input_Config+0x94>
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc8 <GPIO_Input_Config+0x134>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d20:	4a29      	ldr	r2, [pc, #164]	@ (8000dc8 <GPIO_Input_Config+0x134>)
 8000d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d26:	6313      	str	r3, [r2, #48]	@ 0x30

	//Mode
	GPIOx->MODER &= ~(MODER_MASK<<(2*Pin));
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2103      	movs	r1, #3
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	401a      	ands	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (MODER_INPUT<<(2*Pin));
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	601a      	str	r2, [r3, #0]

	//PuLL
	GPIOx->PUPDR &= ~(PUPDR_MASK<<(2*Pin));
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2103      	movs	r1, #3
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	60da      	str	r2, [r3, #12]

	switch(Pull)
 8000d5c:	7abb      	ldrb	r3, [r7, #10]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d012      	beq.n	8000d88 <GPIO_Input_Config+0xf4>
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	dc1c      	bgt.n	8000da0 <GPIO_Input_Config+0x10c>
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d01c      	beq.n	8000da4 <GPIO_Input_Config+0x110>
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d000      	beq.n	8000d70 <GPIO_Input_Config+0xdc>
			GPIOx->PUPDR &= ~(PUPDR_PU<<(2*Pin));
			break;
		case PULL_PD:
			GPIOx->PUPDR &= ~(PUPDR_PD<<(2*Pin));
			break;
		default: break;
 8000d6e:	e017      	b.n	8000da0 <GPIO_Input_Config+0x10c>
			GPIOx->PUPDR &= ~(PUPDR_PU<<(2*Pin));
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	7afb      	ldrb	r3, [r7, #11]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	401a      	ands	r2, r3
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	60da      	str	r2, [r3, #12]
			break;
 8000d86:	e00e      	b.n	8000da6 <GPIO_Input_Config+0x112>
			GPIOx->PUPDR &= ~(PUPDR_PD<<(2*Pin));
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	7afb      	ldrb	r3, [r7, #11]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2102      	movs	r1, #2
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	401a      	ands	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	60da      	str	r2, [r3, #12]
			break;
 8000d9e:	e002      	b.n	8000da6 <GPIO_Input_Config+0x112>
		default: break;
 8000da0:	bf00      	nop
 8000da2:	e000      	b.n	8000da6 <GPIO_Input_Config+0x112>
			break;
 8000da4:	bf00      	nop
	}

	//EXTI configuration

	if (exti_t->en)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <GPIO_Input_Config+0x128>
	{
		//Exti_Config
		exti_t->exti_pin = Pin;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7afa      	ldrb	r2, [r7, #11]
 8000db2:	705a      	strb	r2, [r3, #1]
		EXTI_Config(GPIOx , exti_t);
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f000 f8f4 	bl	8000fa4 <EXTI_Config>
	else
	{
		//Nothing
	}

}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40020c00 	.word	0x40020c00
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40021c00 	.word	0x40021c00

08000de0 <GPIO_ReadPin>:
 *
 * status = GPIO_ReadPin(GPIOA, 13);
 */

uint8_t GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus = GPIO_PIN_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]

	/* Check the parameters */
	uint8_t param = CHECK_INPUT(GPIOx, GPIO_Pin);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	887b      	ldrh	r3, [r7, #2]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf0c      	ite	eq
 8000e04:	2301      	moveq	r3, #1
 8000e06:	2300      	movne	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	73bb      	strb	r3, [r7, #14]
	//uint8_t param = GPIOx->MODER & (MODER_MASK<<(2*GPIO_Pin));

	if(param)
 8000e0c:	7bbb      	ldrb	r3, [r7, #14]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00d      	beq.n	8000e2e <GPIO_ReadPin+0x4e>
	{
		if((GPIOx->IDR & (1<<GPIO_Pin)) != GPIO_PIN_RESET)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <GPIO_ReadPin+0x4a>
		{
		bitstatus = GPIO_PIN_SET;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e001      	b.n	8000e2e <GPIO_ReadPin+0x4e>
		}
		else
		{
		bitstatus = GPIO_PIN_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73fb      	strb	r3, [r7, #15]
	else
	{
		//Nothing
	}

	return bitstatus;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <GPIO_Output_Config>:
 *
 * In main(): GPIO_Output_Config(GPIOA, 8, PUPDR_NONE, OSPEEDR_VERYHIGH, OTYPER_PP);
 */

void GPIO_Output_Config(GPIO_TypeDef  *GPIOx, uint8_t Pin, uint8_t Pull, uint8_t Speed, uint8_t output_type)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	4608      	mov	r0, r1
 8000e46:	4611      	mov	r1, r2
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	70fb      	strb	r3, [r7, #3]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	70bb      	strb	r3, [r7, #2]
 8000e52:	4613      	mov	r3, r2
 8000e54:	707b      	strb	r3, [r7, #1]
	//Clock
	ENABLE_GPIO_CLOCK(GPIOx);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4b      	ldr	r2, [pc, #300]	@ (8000f88 <GPIO_Output_Config+0x14c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d106      	bne.n	8000e6c <GPIO_Output_Config+0x30>
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	@ (8000f8c <GPIO_Output_Config+0x150>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a4a      	ldr	r2, [pc, #296]	@ (8000f8c <GPIO_Output_Config+0x150>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	e035      	b.n	8000ed8 <GPIO_Output_Config+0x9c>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a48      	ldr	r2, [pc, #288]	@ (8000f90 <GPIO_Output_Config+0x154>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d106      	bne.n	8000e82 <GPIO_Output_Config+0x46>
 8000e74:	4b45      	ldr	r3, [pc, #276]	@ (8000f8c <GPIO_Output_Config+0x150>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	4a44      	ldr	r2, [pc, #272]	@ (8000f8c <GPIO_Output_Config+0x150>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e80:	e02a      	b.n	8000ed8 <GPIO_Output_Config+0x9c>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a43      	ldr	r2, [pc, #268]	@ (8000f94 <GPIO_Output_Config+0x158>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d106      	bne.n	8000e98 <GPIO_Output_Config+0x5c>
 8000e8a:	4b40      	ldr	r3, [pc, #256]	@ (8000f8c <GPIO_Output_Config+0x150>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f8c <GPIO_Output_Config+0x150>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	e01f      	b.n	8000ed8 <GPIO_Output_Config+0x9c>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f98 <GPIO_Output_Config+0x15c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d106      	bne.n	8000eae <GPIO_Output_Config+0x72>
 8000ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8000f8c <GPIO_Output_Config+0x150>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	4a39      	ldr	r2, [pc, #228]	@ (8000f8c <GPIO_Output_Config+0x150>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eac:	e014      	b.n	8000ed8 <GPIO_Output_Config+0x9c>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8000f9c <GPIO_Output_Config+0x160>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d106      	bne.n	8000ec4 <GPIO_Output_Config+0x88>
 8000eb6:	4b35      	ldr	r3, [pc, #212]	@ (8000f8c <GPIO_Output_Config+0x150>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a34      	ldr	r2, [pc, #208]	@ (8000f8c <GPIO_Output_Config+0x150>)
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	e009      	b.n	8000ed8 <GPIO_Output_Config+0x9c>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a36      	ldr	r2, [pc, #216]	@ (8000fa0 <GPIO_Output_Config+0x164>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d105      	bne.n	8000ed8 <GPIO_Output_Config+0x9c>
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <GPIO_Output_Config+0x150>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8000f8c <GPIO_Output_Config+0x150>)
 8000ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed6:	6313      	str	r3, [r2, #48]	@ 0x30

	//Mode
	GPIOx->MODER &= ~(MODER_MASK<<(2*Pin));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	401a      	ands	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (MODER_OUTPUT<<(2*Pin));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	601a      	str	r2, [r3, #0]

	//Pull
	GPIOx->PUPDR &= ~(PUPDR_MASK<<(2*Pin));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2103      	movs	r1, #3
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	401a      	ands	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (Pull<<(2*Pin));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	78b9      	ldrb	r1, [r7, #2]
 8000f1e:	78fa      	ldrb	r2, [r7, #3]
 8000f20:	0052      	lsls	r2, r2, #1
 8000f22:	fa01 f202 	lsl.w	r2, r1, r2
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	60da      	str	r2, [r3, #12]

	//Speed
	GPIOx->OSPEEDR &= ~(OSPEEDR_MASK<<(2*Pin));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2103      	movs	r1, #3
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	609a      	str	r2, [r3, #8]
	GPIOx->OSPEEDR |= (Speed<<(2*Pin));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	7879      	ldrb	r1, [r7, #1]
 8000f48:	78fa      	ldrb	r2, [r7, #3]
 8000f4a:	0052      	lsls	r2, r2, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	431a      	orrs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	609a      	str	r2, [r3, #8]

	//Type of output
	GPIOx->OTYPER &= ~(OTYPER_MASK<<Pin);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	401a      	ands	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	605a      	str	r2, [r3, #4]
	GPIOx->OTYPER |= (output_type<<Pin);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	7c39      	ldrb	r1, [r7, #16]
 8000f70:	78fa      	ldrb	r2, [r7, #3]
 8000f72:	fa01 f202 	lsl.w	r2, r1, r2
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	605a      	str	r2, [r3, #4]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40021c00 	.word	0x40021c00

08000fa4 <EXTI_Config>:
 *
 *	EXTI_Config is in GPIO_Input_Config();
 */

void EXTI_Config(GPIO_TypeDef *GPIOx ,EXTI_Config_t *exti_t)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	uint8_t exti_index_r = (uint8_t)(exti_t->exti_pin/4.0);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	785b      	ldrb	r3, [r3, #1]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fa60 	bl	8000478 <__aeabi_i2d>
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b9d      	ldr	r3, [pc, #628]	@ (8001234 <EXTI_Config+0x290>)
 8000fbe:	f7ff fbef 	bl	80007a0 <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fcd1 	bl	8000970 <__aeabi_d2uiz>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
	uint8_t exti_index_p = (uint8_t)((exti_t->exti_pin%4)*4);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	785b      	ldrb	r3, [r3, #1]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	73bb      	strb	r3, [r7, #14]

	//Enable SYSCFG
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000fe0:	4b95      	ldr	r3, [pc, #596]	@ (8001238 <EXTI_Config+0x294>)
 8000fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe4:	4a94      	ldr	r2, [pc, #592]	@ (8001238 <EXTI_Config+0x294>)
 8000fe6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fea:	6453      	str	r3, [r2, #68]	@ 0x44
	 * EXTICR[3] 12 13 	14 	15
	 *
	 */

	//Enable EXTI
	EXTI->IMR |= (1<<exti_t->exti_pin);
 8000fec:	4b93      	ldr	r3, [pc, #588]	@ (800123c <EXTI_Config+0x298>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	7852      	ldrb	r2, [r2, #1]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	408a      	lsls	r2, r1
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4a8f      	ldr	r2, [pc, #572]	@ (800123c <EXTI_Config+0x298>)
 8000ffe:	430b      	orrs	r3, r1
 8001000:	6013      	str	r3, [r2, #0]
	SYSCFG -> EXTICR[exti_index_r] &= ~(EXTI_PMASK<<(2*exti_t->exti_pin));
 8001002:	4a8f      	ldr	r2, [pc, #572]	@ (8001240 <EXTI_Config+0x29c>)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	3302      	adds	r3, #2
 8001008:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	210f      	movs	r1, #15
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	4988      	ldr	r1, [pc, #544]	@ (8001240 <EXTI_Config+0x29c>)
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	4002      	ands	r2, r0
 8001022:	3302      	adds	r3, #2
 8001024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Conect Pin to Exti Pin

	if (GPIOx == GPIOA)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a86      	ldr	r2, [pc, #536]	@ (8001244 <EXTI_Config+0x2a0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d10a      	bne.n	8001046 <EXTI_Config+0xa2>
	{
		SYSCFG -> EXTICR[exti_index_r] |= (EXTI_PA<<exti_index_p);
 8001030:	4883      	ldr	r0, [pc, #524]	@ (8001240 <EXTI_Config+0x29c>)
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	4982      	ldr	r1, [pc, #520]	@ (8001240 <EXTI_Config+0x29c>)
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	3202      	adds	r2, #2
 800103a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800103e:	3302      	adds	r3, #2
 8001040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001044:	e067      	b.n	8001116 <EXTI_Config+0x172>
	}
	else if(GPIOx == GPIOB)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a7f      	ldr	r2, [pc, #508]	@ (8001248 <EXTI_Config+0x2a4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d110      	bne.n	8001070 <EXTI_Config+0xcc>
	{
		SYSCFG -> EXTICR[exti_index_r] |= (EXTI_PB<<exti_index_p);
 800104e:	4a7c      	ldr	r2, [pc, #496]	@ (8001240 <EXTI_Config+0x29c>)
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	3302      	adds	r3, #2
 8001054:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	2101      	movs	r1, #1
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	4618      	mov	r0, r3
 8001062:	4977      	ldr	r1, [pc, #476]	@ (8001240 <EXTI_Config+0x29c>)
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	4302      	orrs	r2, r0
 8001068:	3302      	adds	r3, #2
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800106e:	e052      	b.n	8001116 <EXTI_Config+0x172>
	}
	else if(GPIOx == GPIOC)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a76      	ldr	r2, [pc, #472]	@ (800124c <EXTI_Config+0x2a8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d110      	bne.n	800109a <EXTI_Config+0xf6>
	{
		SYSCFG -> EXTICR[exti_index_r] |= (EXTI_PC<<exti_index_p);
 8001078:	4a71      	ldr	r2, [pc, #452]	@ (8001240 <EXTI_Config+0x29c>)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3302      	adds	r3, #2
 800107e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	2102      	movs	r1, #2
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	4618      	mov	r0, r3
 800108c:	496c      	ldr	r1, [pc, #432]	@ (8001240 <EXTI_Config+0x29c>)
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	4302      	orrs	r2, r0
 8001092:	3302      	adds	r3, #2
 8001094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001098:	e03d      	b.n	8001116 <EXTI_Config+0x172>
	}
	else if(GPIOx == GPIOD)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a6c      	ldr	r2, [pc, #432]	@ (8001250 <EXTI_Config+0x2ac>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d110      	bne.n	80010c4 <EXTI_Config+0x120>
	{
		SYSCFG -> EXTICR[exti_index_r] |= (EXTI_PD<<exti_index_p);
 80010a2:	4a67      	ldr	r2, [pc, #412]	@ (8001240 <EXTI_Config+0x29c>)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	3302      	adds	r3, #2
 80010a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	2103      	movs	r1, #3
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	4962      	ldr	r1, [pc, #392]	@ (8001240 <EXTI_Config+0x29c>)
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	4302      	orrs	r2, r0
 80010bc:	3302      	adds	r3, #2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80010c2:	e028      	b.n	8001116 <EXTI_Config+0x172>
	}
	else if(GPIOx == GPIOE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a63      	ldr	r2, [pc, #396]	@ (8001254 <EXTI_Config+0x2b0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d110      	bne.n	80010ee <EXTI_Config+0x14a>
	{
		SYSCFG -> EXTICR[exti_index_r] |= (EXTI_PE<<exti_index_p);
 80010cc:	4a5c      	ldr	r2, [pc, #368]	@ (8001240 <EXTI_Config+0x29c>)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3302      	adds	r3, #2
 80010d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010d6:	7bbb      	ldrb	r3, [r7, #14]
 80010d8:	2104      	movs	r1, #4
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	4957      	ldr	r1, [pc, #348]	@ (8001240 <EXTI_Config+0x29c>)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	4302      	orrs	r2, r0
 80010e6:	3302      	adds	r3, #2
 80010e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80010ec:	e013      	b.n	8001116 <EXTI_Config+0x172>
	}
	else if(GPIOx == GPIOH)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a59      	ldr	r2, [pc, #356]	@ (8001258 <EXTI_Config+0x2b4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d10f      	bne.n	8001116 <EXTI_Config+0x172>
	{
		SYSCFG -> EXTICR[exti_index_r] |= (EXTI_PH<<exti_index_p);
 80010f6:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <EXTI_Config+0x29c>)
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	3302      	adds	r3, #2
 80010fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	2107      	movs	r1, #7
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	4618      	mov	r0, r3
 800110a:	494d      	ldr	r1, [pc, #308]	@ (8001240 <EXTI_Config+0x29c>)
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	4302      	orrs	r2, r0
 8001110:	3302      	adds	r3, #2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	//Configure Trigger
	switch(exti_t->trigger)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	789b      	ldrb	r3, [r3, #2]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d01e      	beq.n	800115c <EXTI_Config+0x1b8>
 800111e:	2b02      	cmp	r3, #2
 8001120:	dc33      	bgt.n	800118a <EXTI_Config+0x1e6>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <EXTI_Config+0x188>
 8001126:	2b01      	cmp	r3, #1
 8001128:	d00c      	beq.n	8001144 <EXTI_Config+0x1a0>
		break;
	case FALLING_RISING_IT:
		EXTI -> FTSR |= (1<<exti_t->exti_pin);
		EXTI -> RTSR |= (1<<exti_t->exti_pin);
		break;
	default: break;
 800112a:	e02e      	b.n	800118a <EXTI_Config+0x1e6>
		EXTI -> FTSR |= (1<<exti_t->exti_pin);
 800112c:	4b43      	ldr	r3, [pc, #268]	@ (800123c <EXTI_Config+0x298>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	7852      	ldrb	r2, [r2, #1]
 8001134:	4611      	mov	r1, r2
 8001136:	2201      	movs	r2, #1
 8001138:	408a      	lsls	r2, r1
 800113a:	4611      	mov	r1, r2
 800113c:	4a3f      	ldr	r2, [pc, #252]	@ (800123c <EXTI_Config+0x298>)
 800113e:	430b      	orrs	r3, r1
 8001140:	60d3      	str	r3, [r2, #12]
		break;
 8001142:	e023      	b.n	800118c <EXTI_Config+0x1e8>
		EXTI -> FTSR |= (1<<exti_t->exti_pin);
 8001144:	4b3d      	ldr	r3, [pc, #244]	@ (800123c <EXTI_Config+0x298>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	7852      	ldrb	r2, [r2, #1]
 800114c:	4611      	mov	r1, r2
 800114e:	2201      	movs	r2, #1
 8001150:	408a      	lsls	r2, r1
 8001152:	4611      	mov	r1, r2
 8001154:	4a39      	ldr	r2, [pc, #228]	@ (800123c <EXTI_Config+0x298>)
 8001156:	430b      	orrs	r3, r1
 8001158:	60d3      	str	r3, [r2, #12]
		break;
 800115a:	e017      	b.n	800118c <EXTI_Config+0x1e8>
		EXTI -> FTSR |= (1<<exti_t->exti_pin);
 800115c:	4b37      	ldr	r3, [pc, #220]	@ (800123c <EXTI_Config+0x298>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	7852      	ldrb	r2, [r2, #1]
 8001164:	4611      	mov	r1, r2
 8001166:	2201      	movs	r2, #1
 8001168:	408a      	lsls	r2, r1
 800116a:	4611      	mov	r1, r2
 800116c:	4a33      	ldr	r2, [pc, #204]	@ (800123c <EXTI_Config+0x298>)
 800116e:	430b      	orrs	r3, r1
 8001170:	60d3      	str	r3, [r2, #12]
		EXTI -> RTSR |= (1<<exti_t->exti_pin);
 8001172:	4b32      	ldr	r3, [pc, #200]	@ (800123c <EXTI_Config+0x298>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	7852      	ldrb	r2, [r2, #1]
 800117a:	4611      	mov	r1, r2
 800117c:	2201      	movs	r2, #1
 800117e:	408a      	lsls	r2, r1
 8001180:	4611      	mov	r1, r2
 8001182:	4a2e      	ldr	r2, [pc, #184]	@ (800123c <EXTI_Config+0x298>)
 8001184:	430b      	orrs	r3, r1
 8001186:	6093      	str	r3, [r2, #8]
		break;
 8001188:	e000      	b.n	800118c <EXTI_Config+0x1e8>
	default: break;
 800118a:	bf00      	nop
	}

	//NVIC
	if(exti_t->exti_pin == 0)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	785b      	ldrb	r3, [r3, #1]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d117      	bne.n	80011c4 <EXTI_Config+0x220>
	{
		NVIC_SetPriority(EXTI0_IRQn, exti_t->priority);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	78db      	ldrb	r3, [r3, #3]
 8001198:	4619      	mov	r1, r3
 800119a:	2006      	movs	r0, #6
 800119c:	f7ff fd50 	bl	8000c40 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI0_IRQn);
 80011a0:	2006      	movs	r0, #6
 80011a2:	f7ff fd11 	bl	8000bc8 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 80011a6:	4b25      	ldr	r3, [pc, #148]	@ (800123c <EXTI_Config+0x298>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	7852      	ldrb	r2, [r2, #1]
 80011ae:	4611      	mov	r1, r2
 80011b0:	2201      	movs	r2, #1
 80011b2:	408a      	lsls	r2, r1
 80011b4:	4611      	mov	r1, r2
 80011b6:	4a21      	ldr	r2, [pc, #132]	@ (800123c <EXTI_Config+0x298>)
 80011b8:	430b      	orrs	r3, r1
 80011ba:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80011bc:	2006      	movs	r0, #6
 80011be:	f7ff fd21 	bl	8000c04 <__NVIC_ClearPendingIRQ>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
		EXTI -> PR |= (1<<exti_t->exti_pin);
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
	}

}
 80011c2:	e0c2      	b.n	800134a <EXTI_Config+0x3a6>
	else if(exti_t->exti_pin == 1)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	785b      	ldrb	r3, [r3, #1]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d117      	bne.n	80011fc <EXTI_Config+0x258>
		NVIC_SetPriority(EXTI1_IRQn, exti_t->priority);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	78db      	ldrb	r3, [r3, #3]
 80011d0:	4619      	mov	r1, r3
 80011d2:	2007      	movs	r0, #7
 80011d4:	f7ff fd34 	bl	8000c40 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI1_IRQn);
 80011d8:	2007      	movs	r0, #7
 80011da:	f7ff fcf5 	bl	8000bc8 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <EXTI_Config+0x298>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	7852      	ldrb	r2, [r2, #1]
 80011e6:	4611      	mov	r1, r2
 80011e8:	2201      	movs	r2, #1
 80011ea:	408a      	lsls	r2, r1
 80011ec:	4611      	mov	r1, r2
 80011ee:	4a13      	ldr	r2, [pc, #76]	@ (800123c <EXTI_Config+0x298>)
 80011f0:	430b      	orrs	r3, r1
 80011f2:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80011f4:	2007      	movs	r0, #7
 80011f6:	f7ff fd05 	bl	8000c04 <__NVIC_ClearPendingIRQ>
}
 80011fa:	e0a6      	b.n	800134a <EXTI_Config+0x3a6>
	else if(exti_t->exti_pin == 2)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	785b      	ldrb	r3, [r3, #1]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d12b      	bne.n	800125c <EXTI_Config+0x2b8>
		NVIC_SetPriority(EXTI2_IRQn, exti_t->priority);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	78db      	ldrb	r3, [r3, #3]
 8001208:	4619      	mov	r1, r3
 800120a:	2008      	movs	r0, #8
 800120c:	f7ff fd18 	bl	8000c40 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI2_IRQn);
 8001210:	2008      	movs	r0, #8
 8001212:	f7ff fcd9 	bl	8000bc8 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <EXTI_Config+0x298>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	7852      	ldrb	r2, [r2, #1]
 800121e:	4611      	mov	r1, r2
 8001220:	2201      	movs	r2, #1
 8001222:	408a      	lsls	r2, r1
 8001224:	4611      	mov	r1, r2
 8001226:	4a05      	ldr	r2, [pc, #20]	@ (800123c <EXTI_Config+0x298>)
 8001228:	430b      	orrs	r3, r1
 800122a:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI2_IRQn);
 800122c:	2008      	movs	r0, #8
 800122e:	f7ff fce9 	bl	8000c04 <__NVIC_ClearPendingIRQ>
}
 8001232:	e08a      	b.n	800134a <EXTI_Config+0x3a6>
 8001234:	40100000 	.word	0x40100000
 8001238:	40023800 	.word	0x40023800
 800123c:	40013c00 	.word	0x40013c00
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40021c00 	.word	0x40021c00
	else if(exti_t->exti_pin == 3)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	785b      	ldrb	r3, [r3, #1]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d117      	bne.n	8001294 <EXTI_Config+0x2f0>
		NVIC_SetPriority(EXTI3_IRQn, exti_t->priority);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	78db      	ldrb	r3, [r3, #3]
 8001268:	4619      	mov	r1, r3
 800126a:	2009      	movs	r0, #9
 800126c:	f7ff fce8 	bl	8000c40 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI3_IRQn);
 8001270:	2009      	movs	r0, #9
 8001272:	f7ff fca9 	bl	8000bc8 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 8001276:	4b37      	ldr	r3, [pc, #220]	@ (8001354 <EXTI_Config+0x3b0>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	7852      	ldrb	r2, [r2, #1]
 800127e:	4611      	mov	r1, r2
 8001280:	2201      	movs	r2, #1
 8001282:	408a      	lsls	r2, r1
 8001284:	4611      	mov	r1, r2
 8001286:	4a33      	ldr	r2, [pc, #204]	@ (8001354 <EXTI_Config+0x3b0>)
 8001288:	430b      	orrs	r3, r1
 800128a:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI3_IRQn);
 800128c:	2009      	movs	r0, #9
 800128e:	f7ff fcb9 	bl	8000c04 <__NVIC_ClearPendingIRQ>
}
 8001292:	e05a      	b.n	800134a <EXTI_Config+0x3a6>
	else if(exti_t->exti_pin == 4)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	785b      	ldrb	r3, [r3, #1]
 8001298:	2b04      	cmp	r3, #4
 800129a:	d117      	bne.n	80012cc <EXTI_Config+0x328>
		NVIC_SetPriority(EXTI4_IRQn,exti_t->priority);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	78db      	ldrb	r3, [r3, #3]
 80012a0:	4619      	mov	r1, r3
 80012a2:	200a      	movs	r0, #10
 80012a4:	f7ff fccc 	bl	8000c40 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI4_IRQn);
 80012a8:	200a      	movs	r0, #10
 80012aa:	f7ff fc8d 	bl	8000bc8 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 80012ae:	4b29      	ldr	r3, [pc, #164]	@ (8001354 <EXTI_Config+0x3b0>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	7852      	ldrb	r2, [r2, #1]
 80012b6:	4611      	mov	r1, r2
 80012b8:	2201      	movs	r2, #1
 80012ba:	408a      	lsls	r2, r1
 80012bc:	4611      	mov	r1, r2
 80012be:	4a25      	ldr	r2, [pc, #148]	@ (8001354 <EXTI_Config+0x3b0>)
 80012c0:	430b      	orrs	r3, r1
 80012c2:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI4_IRQn);
 80012c4:	200a      	movs	r0, #10
 80012c6:	f7ff fc9d 	bl	8000c04 <__NVIC_ClearPendingIRQ>
}
 80012ca:	e03e      	b.n	800134a <EXTI_Config+0x3a6>
	else if((exti_t->exti_pin>=5) && (exti_t->exti_pin<=9))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	785b      	ldrb	r3, [r3, #1]
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d91b      	bls.n	800130c <EXTI_Config+0x368>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	785b      	ldrb	r3, [r3, #1]
 80012d8:	2b09      	cmp	r3, #9
 80012da:	d817      	bhi.n	800130c <EXTI_Config+0x368>
		NVIC_SetPriority(EXTI9_5_IRQn, exti_t->priority);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	4619      	mov	r1, r3
 80012e2:	2017      	movs	r0, #23
 80012e4:	f7ff fcac 	bl	8000c40 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012e8:	2017      	movs	r0, #23
 80012ea:	f7ff fc6d 	bl	8000bc8 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <EXTI_Config+0x3b0>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	7852      	ldrb	r2, [r2, #1]
 80012f6:	4611      	mov	r1, r2
 80012f8:	2201      	movs	r2, #1
 80012fa:	408a      	lsls	r2, r1
 80012fc:	4611      	mov	r1, r2
 80012fe:	4a15      	ldr	r2, [pc, #84]	@ (8001354 <EXTI_Config+0x3b0>)
 8001300:	430b      	orrs	r3, r1
 8001302:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8001304:	2017      	movs	r0, #23
 8001306:	f7ff fc7d 	bl	8000c04 <__NVIC_ClearPendingIRQ>
}
 800130a:	e01e      	b.n	800134a <EXTI_Config+0x3a6>
	else if((exti_t->exti_pin>=10) && (exti_t->exti_pin<=15))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	785b      	ldrb	r3, [r3, #1]
 8001310:	2b09      	cmp	r3, #9
 8001312:	d91a      	bls.n	800134a <EXTI_Config+0x3a6>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d816      	bhi.n	800134a <EXTI_Config+0x3a6>
		NVIC_SetPriority(EXTI15_10_IRQn, exti_t->priority);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	4619      	mov	r1, r3
 8001322:	2028      	movs	r0, #40	@ 0x28
 8001324:	f7ff fc8c 	bl	8000c40 <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001328:	2028      	movs	r0, #40	@ 0x28
 800132a:	f7ff fc4d 	bl	8000bc8 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <EXTI_Config+0x3b0>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	7852      	ldrb	r2, [r2, #1]
 8001336:	4611      	mov	r1, r2
 8001338:	2201      	movs	r2, #1
 800133a:	408a      	lsls	r2, r1
 800133c:	4611      	mov	r1, r2
 800133e:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <EXTI_Config+0x3b0>)
 8001340:	430b      	orrs	r3, r1
 8001342:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8001344:	2028      	movs	r0, #40	@ 0x28
 8001346:	f7ff fc5d 	bl	8000c04 <__NVIC_ClearPendingIRQ>
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40013c00 	.word	0x40013c00

08001358 <GPIO_Analog_Config>:

void GPIO_Analog_Config(GPIO_TypeDef *GPIOx, uint8_t Pin, ADC1_Sample_Ch_e sample_ch)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
 8001364:	4613      	mov	r3, r2
 8001366:	70bb      	strb	r3, [r7, #2]
	//Enable Clock
	ENABLE_GPIO_CLOCK(GPIOx);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a54      	ldr	r2, [pc, #336]	@ (80014bc <GPIO_Analog_Config+0x164>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d106      	bne.n	800137e <GPIO_Analog_Config+0x26>
 8001370:	4b53      	ldr	r3, [pc, #332]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001374:	4a52      	ldr	r2, [pc, #328]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6313      	str	r3, [r2, #48]	@ 0x30
 800137c:	e035      	b.n	80013ea <GPIO_Analog_Config+0x92>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a50      	ldr	r2, [pc, #320]	@ (80014c4 <GPIO_Analog_Config+0x16c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d106      	bne.n	8001394 <GPIO_Analog_Config+0x3c>
 8001386:	4b4e      	ldr	r3, [pc, #312]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a4d      	ldr	r2, [pc, #308]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	e02a      	b.n	80013ea <GPIO_Analog_Config+0x92>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a4c      	ldr	r2, [pc, #304]	@ (80014c8 <GPIO_Analog_Config+0x170>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d106      	bne.n	80013aa <GPIO_Analog_Config+0x52>
 800139c:	4b48      	ldr	r3, [pc, #288]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	4a47      	ldr	r2, [pc, #284]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a8:	e01f      	b.n	80013ea <GPIO_Analog_Config+0x92>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a47      	ldr	r2, [pc, #284]	@ (80014cc <GPIO_Analog_Config+0x174>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d106      	bne.n	80013c0 <GPIO_Analog_Config+0x68>
 80013b2:	4b43      	ldr	r3, [pc, #268]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a42      	ldr	r2, [pc, #264]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	e014      	b.n	80013ea <GPIO_Analog_Config+0x92>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a43      	ldr	r2, [pc, #268]	@ (80014d0 <GPIO_Analog_Config+0x178>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d106      	bne.n	80013d6 <GPIO_Analog_Config+0x7e>
 80013c8:	4b3d      	ldr	r3, [pc, #244]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013cc:	4a3c      	ldr	r2, [pc, #240]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d4:	e009      	b.n	80013ea <GPIO_Analog_Config+0x92>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a3e      	ldr	r2, [pc, #248]	@ (80014d4 <GPIO_Analog_Config+0x17c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d105      	bne.n	80013ea <GPIO_Analog_Config+0x92>
 80013de:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a37      	ldr	r2, [pc, #220]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 80013e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30

	//Habilitamos ADC para configurar
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80013ea:	4b35      	ldr	r3, [pc, #212]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	4a34      	ldr	r2, [pc, #208]	@ (80014c0 <GPIO_Analog_Config+0x168>)
 80013f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f4:	6453      	str	r3, [r2, #68]	@ 0x44

	//Analog Mode
	GPIOx->MODER &= ~(MODER_MASK<<(2*Pin));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2103      	movs	r1, #3
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	401a      	ands	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (MODER_ANALOG<<(2*Pin));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2103      	movs	r1, #3
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	601a      	str	r2, [r3, #0]

	//No pull-down
	GPIOx->PUPDR &= ~(PUPDR_MASK<<(2*Pin));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2103      	movs	r1, #3
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	401a      	ands	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60da      	str	r2, [r3, #12]

	//Ch Sampling Time
	if(Pin>=0 && Pin<=9)
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	2b09      	cmp	r3, #9
 800143a:	d819      	bhi.n	8001470 <GPIO_Analog_Config+0x118>
	{
		ADC1->SMPR2 &= ~(ADC1_SMPR_Msk<<(3*Pin));
 800143c:	4b26      	ldr	r3, [pc, #152]	@ (80014d8 <GPIO_Analog_Config+0x180>)
 800143e:	6919      	ldr	r1, [r3, #16]
 8001440:	78fa      	ldrb	r2, [r7, #3]
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	2207      	movs	r2, #7
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	4a21      	ldr	r2, [pc, #132]	@ (80014d8 <GPIO_Analog_Config+0x180>)
 8001452:	400b      	ands	r3, r1
 8001454:	6113      	str	r3, [r2, #16]
		ADC1->SMPR2 |= (sample_ch<<(3*Pin));
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <GPIO_Analog_Config+0x180>)
 8001458:	6919      	ldr	r1, [r3, #16]
 800145a:	78b8      	ldrb	r0, [r7, #2]
 800145c:	78fa      	ldrb	r2, [r7, #3]
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	fa00 f303 	lsl.w	r3, r0, r3
 8001468:	4a1b      	ldr	r2, [pc, #108]	@ (80014d8 <GPIO_Analog_Config+0x180>)
 800146a:	430b      	orrs	r3, r1
 800146c:	6113      	str	r3, [r2, #16]
	else
	{
		//Nothing
	}

}
 800146e:	e01e      	b.n	80014ae <GPIO_Analog_Config+0x156>
	else if(Pin>=10 && Pin<=18)
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	2b09      	cmp	r3, #9
 8001474:	d91b      	bls.n	80014ae <GPIO_Analog_Config+0x156>
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d818      	bhi.n	80014ae <GPIO_Analog_Config+0x156>
		ADC1->SMPR1 &= ~(ADC1_SMPR_Msk<<(3*Pin));
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <GPIO_Analog_Config+0x180>)
 800147e:	68d9      	ldr	r1, [r3, #12]
 8001480:	78fa      	ldrb	r2, [r7, #3]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	2207      	movs	r2, #7
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <GPIO_Analog_Config+0x180>)
 8001492:	400b      	ands	r3, r1
 8001494:	60d3      	str	r3, [r2, #12]
		ADC1->SMPR1 |= (sample_ch<<(3*Pin));
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <GPIO_Analog_Config+0x180>)
 8001498:	68d9      	ldr	r1, [r3, #12]
 800149a:	78b8      	ldrb	r0, [r7, #2]
 800149c:	78fa      	ldrb	r2, [r7, #3]
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	fa00 f303 	lsl.w	r3, r0, r3
 80014a8:	4a0b      	ldr	r2, [pc, #44]	@ (80014d8 <GPIO_Analog_Config+0x180>)
 80014aa:	430b      	orrs	r3, r1
 80014ac:	60d3      	str	r3, [r2, #12]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020400 	.word	0x40020400
 80014c8:	40020800 	.word	0x40020800
 80014cc:	40020c00 	.word	0x40020c00
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40021c00 	.word	0x40021c00
 80014d8:	40012000 	.word	0x40012000

080014dc <flash_config>:
 */

#include "RCC.h"

void flash_config(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	/**Se habilita por recomendación*/
	FLASH -> ACR |= 1<<9;
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <flash_config+0x4c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a10      	ldr	r2, [pc, #64]	@ (8001528 <flash_config+0x4c>)
 80014e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ea:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= 1<<10;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <flash_config+0x4c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <flash_config+0x4c>)
 80014f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014f6:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= 1<<8;
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <flash_config+0x4c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <flash_config+0x4c>)
 80014fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001502:	6013      	str	r3, [r2, #0]

	/*Se habilitan algunos clocks*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <flash_config+0x50>)
 8001506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001508:	4a08      	ldr	r2, [pc, #32]	@ (800152c <flash_config+0x50>)
 800150a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150e:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <flash_config+0x50>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	4a05      	ldr	r2, [pc, #20]	@ (800152c <flash_config+0x50>)
 8001516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023c00 	.word	0x40023c00
 800152c:	40023800 	.word	0x40023800

08001530 <HSI_Config_PLL>:
#endif

#ifdef PLL_ON

void HSI_Config_PLL(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	/*Activamos el HSE*/
	RCC->CR |= RCC_CR_HSION;
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <HSI_Config_PLL+0x34>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <HSI_Config_PLL+0x34>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]
	/*Esperamos a que esté listo el oscilador*/
	while(!(RCC->CR & RCC_CR_HSIRDY));
 8001540:	bf00      	nop
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <HSI_Config_PLL+0x34>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f9      	beq.n	8001542 <HSI_Config_PLL+0x12>
	/*Limpiamos la anterior fuente de reloj*/
	RCC->CFGR &=~ RCC_CFGR_SW_Msk;
 800154e:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <HSI_Config_PLL+0x34>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <HSI_Config_PLL+0x34>)
 8001554:	f023 0303 	bic.w	r3, r3, #3
 8001558:	6093      	str	r3, [r2, #8]
	/*Actualiza SystemCoreClock*/
	SystemCoreClockUpdate();
 800155a:	f7ff fa3b 	bl	80009d4 <SystemCoreClockUpdate>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800

08001568 <HSE_Config_PLL>:

void HSE_Config_PLL(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	/*Activamos el HSE*/
	RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 800156c:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <HSE_Config_PLL+0x34>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <HSE_Config_PLL+0x34>)
 8001572:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8001576:	6013      	str	r3, [r2, #0]
	/*Esperamos a que esté listo el oscilador*/
	while(!(RCC->CR & RCC_CR_HSERDY));
 8001578:	bf00      	nop
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <HSE_Config_PLL+0x34>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f9      	beq.n	800157a <HSE_Config_PLL+0x12>
	/*Limpiamos la anterior fuente de reloj*/
	RCC->CFGR &=~ RCC_CFGR_SW_Msk;
 8001586:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HSE_Config_PLL+0x34>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	4a04      	ldr	r2, [pc, #16]	@ (800159c <HSE_Config_PLL+0x34>)
 800158c:	f023 0303 	bic.w	r3, r3, #3
 8001590:	6093      	str	r3, [r2, #8]
	/*Actualiza SystemCoreClock*/
	SystemCoreClockUpdate();
 8001592:	f7ff fa1f 	bl	80009d4 <SystemCoreClockUpdate>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <PLL_Config>:

void PLL_Config(uint8_t Source)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
	/*Apagamos el PLL  por las dudas*/
	RCC -> CR &= ~RCC_CR_PLLON_Msk;
 80015aa:	4b58      	ldr	r3, [pc, #352]	@ (800170c <PLL_Config+0x16c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a57      	ldr	r2, [pc, #348]	@ (800170c <PLL_Config+0x16c>)
 80015b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015b4:	6013      	str	r3, [r2, #0]

	/*Escojemos fuente de reloj para PLL*/

	switch(Source)
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d030      	beq.n	800161e <PLL_Config+0x7e>
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d15b      	bne.n	8001678 <PLL_Config+0xd8>
	{
		case HSE_SOURCE:

			HSE_Config_PLL(); //FOSC= 8Mhz, M=/4, N=*168, P=1(/4)
 80015c0:	f7ff ffd2 	bl	8001568 <HSE_Config_PLL>
			/*Configurar la fuente de reloj de PLL*/
			RCC -> PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 80015c4:	4b51      	ldr	r3, [pc, #324]	@ (800170c <PLL_Config+0x16c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a50      	ldr	r2, [pc, #320]	@ (800170c <PLL_Config+0x16c>)
 80015ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015ce:	6053      	str	r3, [r2, #4]

			/*Configurar M,N,P,Q*/

			// 8Mhz / 4 = 2Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 80015d0:	4b4e      	ldr	r3, [pc, #312]	@ (800170c <PLL_Config+0x16c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4a4d      	ldr	r2, [pc, #308]	@ (800170c <PLL_Config+0x16c>)
 80015d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015da:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (4<<0); //M 1-2Mhz
 80015dc:	4b4b      	ldr	r3, [pc, #300]	@ (800170c <PLL_Config+0x16c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a4a      	ldr	r2, [pc, #296]	@ (800170c <PLL_Config+0x16c>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6053      	str	r3, [r2, #4]

			//2Mhz * 84 = 168Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 80015e8:	4b48      	ldr	r3, [pc, #288]	@ (800170c <PLL_Config+0x16c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4a47      	ldr	r2, [pc, #284]	@ (800170c <PLL_Config+0x16c>)
 80015ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80015f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80015f6:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (168<<6);//N 192-472Mhz
 80015f8:	4b44      	ldr	r3, [pc, #272]	@ (800170c <PLL_Config+0x16c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a43      	ldr	r2, [pc, #268]	@ (800170c <PLL_Config+0x16c>)
 80015fe:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 8001602:	6053      	str	r3, [r2, #4]

			//336Mhz / 2 = 84Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 8001604:	4b41      	ldr	r3, [pc, #260]	@ (800170c <PLL_Config+0x16c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a40      	ldr	r2, [pc, #256]	@ (800170c <PLL_Config+0x16c>)
 800160a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800160e:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (1<<16);//P <=84Mhz
 8001610:	4b3e      	ldr	r3, [pc, #248]	@ (800170c <PLL_Config+0x16c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a3d      	ldr	r2, [pc, #244]	@ (800170c <PLL_Config+0x16c>)
 8001616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800161a:	6053      	str	r3, [r2, #4]

			//Q <= 48Mhz (Opcional Configurar
			//RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLQ;
			//RCC -> PLLCFGR |= (4<<24);

			break;
 800161c:	e02d      	b.n	800167a <PLL_Config+0xda>

		case HSI_SOURCE:

			HSI_Config_PLL(); //FOSC= 16Mhz, M=/8, N=*168, P=1(/4)
 800161e:	f7ff ff87 	bl	8001530 <HSI_Config_PLL>
			/*Configurar la fuente de reloj de PLL*/
			RCC -> PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;
 8001622:	4b3a      	ldr	r3, [pc, #232]	@ (800170c <PLL_Config+0x16c>)
 8001624:	4a39      	ldr	r2, [pc, #228]	@ (800170c <PLL_Config+0x16c>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	6053      	str	r3, [r2, #4]

			/*Configurar M,N,P,Q*/

			// 16Mhz / 8 = 2Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 800162a:	4b38      	ldr	r3, [pc, #224]	@ (800170c <PLL_Config+0x16c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a37      	ldr	r2, [pc, #220]	@ (800170c <PLL_Config+0x16c>)
 8001630:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001634:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (8<<0); //M 1-2Mhz
 8001636:	4b35      	ldr	r3, [pc, #212]	@ (800170c <PLL_Config+0x16c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4a34      	ldr	r2, [pc, #208]	@ (800170c <PLL_Config+0x16c>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6053      	str	r3, [r2, #4]

			//2Mhz * 168 = 336Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 8001642:	4b32      	ldr	r3, [pc, #200]	@ (800170c <PLL_Config+0x16c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a31      	ldr	r2, [pc, #196]	@ (800170c <PLL_Config+0x16c>)
 8001648:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800164c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001650:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (168<<6);//N 192-472Mhz
 8001652:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <PLL_Config+0x16c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a2d      	ldr	r2, [pc, #180]	@ (800170c <PLL_Config+0x16c>)
 8001658:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 800165c:	6053      	str	r3, [r2, #4]

			//336Mhz / 4 = 84Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 800165e:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <PLL_Config+0x16c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a2a      	ldr	r2, [pc, #168]	@ (800170c <PLL_Config+0x16c>)
 8001664:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001668:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (1<<16);//P <=84Mhz
 800166a:	4b28      	ldr	r3, [pc, #160]	@ (800170c <PLL_Config+0x16c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4a27      	ldr	r2, [pc, #156]	@ (800170c <PLL_Config+0x16c>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001674:	6053      	str	r3, [r2, #4]

			//Q <= 48Mhz (Opcional Configurar
			//RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLQ;
			//RCC -> PLLCFGR |= (4<<24);

			break;
 8001676:	e000      	b.n	800167a <PLL_Config+0xda>
		default: break;
 8001678:	bf00      	nop
	}

	/*Habilitar el PLL*/
	RCC -> CR |= RCC_CR_PLLON;
 800167a:	4b24      	ldr	r3, [pc, #144]	@ (800170c <PLL_Config+0x16c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a23      	ldr	r2, [pc, #140]	@ (800170c <PLL_Config+0x16c>)
 8001680:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001684:	6013      	str	r3, [r2, #0]

	/*Esperamos a que esté listo el cambio de oscilador*/
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8001686:	bf00      	nop
 8001688:	4b20      	ldr	r3, [pc, #128]	@ (800170c <PLL_Config+0x16c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f9      	beq.n	8001688 <PLL_Config+0xe8>

	/*Configurar Prescalers*/

	RCC -> CFGR &= ~RCC_CFGR_PPRE2_Msk;
 8001694:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <PLL_Config+0x16c>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a1c      	ldr	r2, [pc, #112]	@ (800170c <PLL_Config+0x16c>)
 800169a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800169e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV1; //APB2 <=84Mhz
 80016a0:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <PLL_Config+0x16c>)
 80016a2:	4a1a      	ldr	r2, [pc, #104]	@ (800170c <PLL_Config+0x16c>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	6093      	str	r3, [r2, #8]

	RCC -> CFGR &= ~RCC_CFGR_PPRE1_Msk;
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <PLL_Config+0x16c>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a17      	ldr	r2, [pc, #92]	@ (800170c <PLL_Config+0x16c>)
 80016ae:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80016b2:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV2; //APB1 <=42Mhz
 80016b4:	4b15      	ldr	r3, [pc, #84]	@ (800170c <PLL_Config+0x16c>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a14      	ldr	r2, [pc, #80]	@ (800170c <PLL_Config+0x16c>)
 80016ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016be:	6093      	str	r3, [r2, #8]

	/*Configurar la latencia de la flash (Revisar Pag. 46 ref. manual STM32F401X)*/
	FLASH -> ACR &= ~FLASH_ACR_LATENCY;
 80016c0:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <PLL_Config+0x170>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <PLL_Config+0x170>)
 80016c6:	f023 0307 	bic.w	r3, r3, #7
 80016ca:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_LATENCY_2WS;
 80016cc:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <PLL_Config+0x170>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001710 <PLL_Config+0x170>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	6013      	str	r3, [r2, #0]

	/*Seleccionar la fuente dek sysclk*/
	RCC->CFGR 	&= ~RCC_CFGR_SW_Msk;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <PLL_Config+0x16c>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4a0b      	ldr	r2, [pc, #44]	@ (800170c <PLL_Config+0x16c>)
 80016de:	f023 0303 	bic.w	r3, r3, #3
 80016e2:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <PLL_Config+0x16c>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a08      	ldr	r2, [pc, #32]	@ (800170c <PLL_Config+0x16c>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	6093      	str	r3, [r2, #8]

	/*Esperamos a que esté listo el cambio de oscilador*/
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 80016f0:	bf00      	nop
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <PLL_Config+0x16c>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f9      	beq.n	80016f2 <PLL_Config+0x152>

	/*Actualiza SystemCoreClock*/
	SystemCoreClockUpdate();
 80016fe:	f7ff f969 	bl	80009d4 <SystemCoreClockUpdate>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40023c00 	.word	0x40023c00

08001714 <adc1_config>:
 * @param	*adc1_params	Puntero a una estructura de datos que contiene las directrices
 * 							para la configuración del ADC1
 *
 */
void adc1_config(ADC1_Params_t *adc1_params)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	//Configuración Incial
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; //Habilitamos el periférico
 800171c:	4b3a      	ldr	r3, [pc, #232]	@ (8001808 <adc1_config+0xf4>)
 800171e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001720:	4a39      	ldr	r2, [pc, #228]	@ (8001808 <adc1_config+0xf4>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001726:	6453      	str	r3, [r2, #68]	@ 0x44
	ADC1->CR2 &= ~ADC_CR2_ADON_Msk; //Apagamos ADC
 8001728:	4b38      	ldr	r3, [pc, #224]	@ (800180c <adc1_config+0xf8>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a37      	ldr	r2, [pc, #220]	@ (800180c <adc1_config+0xf8>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6093      	str	r3, [r2, #8]
	ADC1->CR1 &= ~ADC_CR1_EOCIE_Msk; //Desactivamos interrupcion
 8001734:	4b35      	ldr	r3, [pc, #212]	@ (800180c <adc1_config+0xf8>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a34      	ldr	r2, [pc, #208]	@ (800180c <adc1_config+0xf8>)
 800173a:	f023 0320 	bic.w	r3, r3, #32
 800173e:	6053      	str	r3, [r2, #4]
	ADC1->SR = 0; //Limpiamos flags
 8001740:	4b32      	ldr	r3, [pc, #200]	@ (800180c <adc1_config+0xf8>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

	//Resolution
	ADC1->CR1 &= ~ADC_CR1_RES_Msk;
 8001746:	4b31      	ldr	r3, [pc, #196]	@ (800180c <adc1_config+0xf8>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4a30      	ldr	r2, [pc, #192]	@ (800180c <adc1_config+0xf8>)
 800174c:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001750:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= (adc1_params->resolution<<ADC_CR1_RES_Pos);
 8001752:	4b2e      	ldr	r3, [pc, #184]	@ (800180c <adc1_config+0xf8>)
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	061b      	lsls	r3, r3, #24
 800175c:	492b      	ldr	r1, [pc, #172]	@ (800180c <adc1_config+0xf8>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]

	//Alignment
	ADC1->CR2 &= ~ADC_CR2_ALIGN_Msk; //Clear
 8001762:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <adc1_config+0xf8>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	4a29      	ldr	r2, [pc, #164]	@ (800180c <adc1_config+0xf8>)
 8001768:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800176c:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (adc1_params->align_mode<<ADC_CR2_ALIGN_Pos);
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <adc1_config+0xf8>)
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	785b      	ldrb	r3, [r3, #1]
 8001776:	02db      	lsls	r3, r3, #11
 8001778:	4924      	ldr	r1, [pc, #144]	@ (800180c <adc1_config+0xf8>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]

	//Configurar ADCCLK
	ADC1_COMMON->CCR &= ~ADC_CCR_ADCPRE_Msk; //Clear
 800177e:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <adc1_config+0xfc>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4a23      	ldr	r2, [pc, #140]	@ (8001810 <adc1_config+0xfc>)
 8001784:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001788:	6053      	str	r3, [r2, #4]
	ADC1_COMMON->CCR |= (adc1_params->clk_div<<ADC_CCR_ADCPRE_Pos);
 800178a:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <adc1_config+0xfc>)
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	789b      	ldrb	r3, [r3, #2]
 8001792:	041b      	lsls	r3, r3, #16
 8001794:	491e      	ldr	r1, [pc, #120]	@ (8001810 <adc1_config+0xfc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]

	//Modo de conversión
	ADC1->CR2 &= ~ADC_CR2_CONT_Msk; //Clear
 800179a:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <adc1_config+0xf8>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	4a1b      	ldr	r2, [pc, #108]	@ (800180c <adc1_config+0xf8>)
 80017a0:	f023 0302 	bic.w	r3, r3, #2
 80017a4:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (adc1_params->conversion_mode<<ADC_CR2_CONT_Pos);
 80017a6:	4b19      	ldr	r3, [pc, #100]	@ (800180c <adc1_config+0xf8>)
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	78db      	ldrb	r3, [r3, #3]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4916      	ldr	r1, [pc, #88]	@ (800180c <adc1_config+0xf8>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]

	//Scan
	ADC1->CR1 &= ~ADC_CR1_SCAN_Msk; //Clear
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <adc1_config+0xf8>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a14      	ldr	r2, [pc, #80]	@ (800180c <adc1_config+0xf8>)
 80017bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017c0:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= (adc1_params->scan_mode<<ADC_CR1_SCAN_Pos);
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <adc1_config+0xf8>)
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	791b      	ldrb	r3, [r3, #4]
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	490f      	ldr	r1, [pc, #60]	@ (800180c <adc1_config+0xf8>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]

	//EOC se activa al final de cada secuencia regular finalizada.
	ADC1->CR2 &= ~ADC_CR2_EOCS_Msk; //Clear
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <adc1_config+0xf8>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	4a0d      	ldr	r2, [pc, #52]	@ (800180c <adc1_config+0xf8>)
 80017d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80017dc:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (adc1_params->eocs_var<<ADC_CR2_EOCS_Pos);
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <adc1_config+0xf8>)
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	795b      	ldrb	r3, [r3, #5]
 80017e6:	029b      	lsls	r3, r3, #10
 80017e8:	4908      	ldr	r1, [pc, #32]	@ (800180c <adc1_config+0xf8>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]

	//Encendemos ADC
	ADC1->CR2 |= ADC_CR2_ADON;
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <adc1_config+0xf8>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	4a06      	ldr	r2, [pc, #24]	@ (800180c <adc1_config+0xf8>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6093      	str	r3, [r2, #8]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40012000 	.word	0x40012000
 8001810:	40012300 	.word	0x40012300

08001814 <adc1_start_conversion>:

void adc1_start_conversion(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
	//Start regular channel
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <adc1_start_conversion+0x1c>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <adc1_start_conversion+0x1c>)
 800181e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001822:	6093      	str	r3, [r2, #8]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40012000 	.word	0x40012000

08001834 <adc1_read_data_Polling>:

uint16_t adc1_read_data_Polling(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	//Iniciamos conversión
	adc1_start_conversion();
 8001838:	f7ff ffec 	bl	8001814 <adc1_start_conversion>

	//Esperemos a que el flag se active
	while(!(ADC1->SR & ADC_SR_EOC));
 800183c:	bf00      	nop
 800183e:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <adc1_read_data_Polling+0x20>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f9      	beq.n	800183e <adc1_read_data_Polling+0xa>

	//Retornamos valor
	return ((uint16_t)(ADC1->DR & 0x0000FFFF));
 800184a:	4b02      	ldr	r3, [pc, #8]	@ (8001854 <adc1_read_data_Polling+0x20>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	b29b      	uxth	r3, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40012000 	.word	0x40012000

08001858 <main>:
void adc1_ch_config(void);


/* Función principal */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af02      	add	r7, sp, #8
	flash_config();
 800185e:	f7ff fe3d 	bl	80014dc <flash_config>
	PLL_Config(HSI_SOURCE);
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff fe9c 	bl	80015a0 <PLL_Config>
	#if USE_DELAY_US == 1
		Delay_Init(SystemCoreClock/1000000);
	#else
		Delay_Init(SystemCoreClock/1000);
 8001868:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <main+0xa0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a23      	ldr	r2, [pc, #140]	@ (80018fc <main+0xa4>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	099b      	lsrs	r3, r3, #6
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff f963 	bl	8000b40 <Delay_Init>
	#endif

	/*GPIO Config*/
	GPIO_Output_Config(GPIOA, 5, PUPDR_NONE, OSPEEDR_HIGH, OTYPER_PP);
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2302      	movs	r3, #2
 8001880:	2200      	movs	r2, #0
 8001882:	2105      	movs	r1, #5
 8001884:	481e      	ldr	r0, [pc, #120]	@ (8001900 <main+0xa8>)
 8001886:	f7ff fad9 	bl	8000e3c <GPIO_Output_Config>
	GPIO_Input_Config(BUTTON_GPIO, BUTTON_PIN, PULL_NONE, &button_exti);
 800188a:	4b1e      	ldr	r3, [pc, #120]	@ (8001904 <main+0xac>)
 800188c:	2200      	movs	r2, #0
 800188e:	210d      	movs	r1, #13
 8001890:	481d      	ldr	r0, [pc, #116]	@ (8001908 <main+0xb0>)
 8001892:	f7ff f9ff 	bl	8000c94 <GPIO_Input_Config>
	GPIO_Analog_Config(AN0_GPIO, AN0_Pin, ADC1_Cycles_3);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	4819      	ldr	r0, [pc, #100]	@ (8001900 <main+0xa8>)
 800189c:	f7ff fd5c 	bl	8001358 <GPIO_Analog_Config>
	GPIO_Analog_Config(AN1_GPIO, AN1_Pin, ADC1_Cycles_3);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2101      	movs	r1, #1
 80018a4:	4816      	ldr	r0, [pc, #88]	@ (8001900 <main+0xa8>)
 80018a6:	f7ff fd57 	bl	8001358 <GPIO_Analog_Config>

	adc1_config(&adc1_config1);
 80018aa:	4818      	ldr	r0, [pc, #96]	@ (800190c <main+0xb4>)
 80018ac:	f7ff ff32 	bl	8001714 <adc1_config>
	ADC1->SQR1 |= (0x1<<ADC_SQR1_L_Pos); //2 conversions
 80018b0:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <main+0xb8>)
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	4a16      	ldr	r2, [pc, #88]	@ (8001910 <main+0xb8>)
 80018b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR3 |= (AN0_Pin<<ADC_SQR3_SQ1_Pos | AN1_Pin<<ADC_SQR3_SQ2_Pos);
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <main+0xb8>)
 80018be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c0:	4a13      	ldr	r2, [pc, #76]	@ (8001910 <main+0xb8>)
 80018c2:	f043 0320 	orr.w	r3, r3, #32
 80018c6:	6353      	str	r3, [r2, #52]	@ 0x34
		}

#elif MODE == SINGLE_SCAN

	//El pulsador activará la conversión
	if(GPIO_ReadPin(BUTTON_GPIO, BUTTON_PIN) == GPIO_PIN_RESET)
 80018c8:	210d      	movs	r1, #13
 80018ca:	480f      	ldr	r0, [pc, #60]	@ (8001908 <main+0xb0>)
 80018cc:	f7ff fa88 	bl	8000de0 <GPIO_ReadPin>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f8      	bne.n	80018c8 <main+0x70>
	{
		delay_ms(20);
 80018d6:	2014      	movs	r0, #20
 80018d8:	f7ff f95e 	bl	8000b98 <delay_ms>
		//Solo se obtendrá el valor del ADC convertido cada vez que el botón se active
		pot0 = adc1_read_data_Polling();
 80018dc:	f7ff ffaa 	bl	8001834 <adc1_read_data_Polling>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <main+0xbc>)
 80018e6:	801a      	strh	r2, [r3, #0]
		pot1 = adc1_read_data_Polling();
 80018e8:	f7ff ffa4 	bl	8001834 <adc1_read_data_Polling>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <main+0xc0>)
 80018f2:	801a      	strh	r2, [r3, #0]
	if(GPIO_ReadPin(BUTTON_GPIO, BUTTON_PIN) == GPIO_PIN_RESET)
 80018f4:	e7e8      	b.n	80018c8 <main+0x70>
 80018f6:	bf00      	nop
 80018f8:	20000000 	.word	0x20000000
 80018fc:	10624dd3 	.word	0x10624dd3
 8001900:	40020000 	.word	0x40020000
 8001904:	2000002c 	.word	0x2000002c
 8001908:	40020800 	.word	0x40020800
 800190c:	20000004 	.word	0x20000004
 8001910:	40012000 	.word	0x40012000
 8001914:	20000030 	.word	0x20000030
 8001918:	20000032 	.word	0x20000032

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <NMI_Handler+0x4>

08001924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <MemManage_Handler+0x4>

08001934 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <UsageFault_Handler+0x4>

08001944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
	uwTick++;
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <SysTick_Handler+0x18>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	4a03      	ldr	r2, [pc, #12]	@ (8001988 <SysTick_Handler+0x18>)
 800197c:	6013      	str	r3, [r2, #0]
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	20000028 	.word	0x20000028

0800198c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800198c:	480d      	ldr	r0, [pc, #52]	@ (80019c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800198e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001990:	f7ff f80e 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001994:	480c      	ldr	r0, [pc, #48]	@ (80019c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001996:	490d      	ldr	r1, [pc, #52]	@ (80019cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001998:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <LoopForever+0xe>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019ac:	4c0a      	ldr	r4, [pc, #40]	@ (80019d8 <LoopForever+0x16>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019ba:	f000 f811 	bl	80019e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019be:	f7ff ff4b 	bl	8001858 <main>

080019c2 <LoopForever>:

LoopForever:
  b LoopForever
 80019c2:	e7fe      	b.n	80019c2 <LoopForever>
  ldr   r0, =_estack
 80019c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019d0:	08001a58 	.word	0x08001a58
  ldr r2, =_sbss
 80019d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019d8:	20000034 	.word	0x20000034

080019dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC_IRQHandler>
	...

080019e0 <__libc_init_array>:
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	4d0d      	ldr	r5, [pc, #52]	@ (8001a18 <__libc_init_array+0x38>)
 80019e4:	4c0d      	ldr	r4, [pc, #52]	@ (8001a1c <__libc_init_array+0x3c>)
 80019e6:	1b64      	subs	r4, r4, r5
 80019e8:	10a4      	asrs	r4, r4, #2
 80019ea:	2600      	movs	r6, #0
 80019ec:	42a6      	cmp	r6, r4
 80019ee:	d109      	bne.n	8001a04 <__libc_init_array+0x24>
 80019f0:	4d0b      	ldr	r5, [pc, #44]	@ (8001a20 <__libc_init_array+0x40>)
 80019f2:	4c0c      	ldr	r4, [pc, #48]	@ (8001a24 <__libc_init_array+0x44>)
 80019f4:	f000 f818 	bl	8001a28 <_init>
 80019f8:	1b64      	subs	r4, r4, r5
 80019fa:	10a4      	asrs	r4, r4, #2
 80019fc:	2600      	movs	r6, #0
 80019fe:	42a6      	cmp	r6, r4
 8001a00:	d105      	bne.n	8001a0e <__libc_init_array+0x2e>
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
 8001a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a08:	4798      	blx	r3
 8001a0a:	3601      	adds	r6, #1
 8001a0c:	e7ee      	b.n	80019ec <__libc_init_array+0xc>
 8001a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a12:	4798      	blx	r3
 8001a14:	3601      	adds	r6, #1
 8001a16:	e7f2      	b.n	80019fe <__libc_init_array+0x1e>
 8001a18:	08001a50 	.word	0x08001a50
 8001a1c:	08001a50 	.word	0x08001a50
 8001a20:	08001a50 	.word	0x08001a50
 8001a24:	08001a54 	.word	0x08001a54

08001a28 <_init>:
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2a:	bf00      	nop
 8001a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a2e:	bc08      	pop	{r3}
 8001a30:	469e      	mov	lr, r3
 8001a32:	4770      	bx	lr

08001a34 <_fini>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	bf00      	nop
 8001a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a3a:	bc08      	pop	{r3}
 8001a3c:	469e      	mov	lr, r3
 8001a3e:	4770      	bx	lr
