
Hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002768  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080028fc  080028fc  000038fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800290c  0800290c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800290c  0800290c  0000390c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002914  08002914  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002914  08002914  00003914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002918  08002918  00003918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800291c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08002928  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002928  000040d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f1a  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ee  00000000  00000000  0000cf56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0000e648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000776  00000000  00000000  0000eff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015009  00000000  00000000  0000f766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a17d  00000000  00000000  0002476f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000874b8  00000000  00000000  0002e8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5da4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000282c  00000000  00000000  000b5de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000b8614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080028e4 	.word	0x080028e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080028e4 	.word	0x080028e4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_TIM_IC_CaptureCallback>:
uint32_t Difference = 0;
uint8_t Is_First_Captured= 0;
float frequency = 0.0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	7f1b      	ldrb	r3, [r3, #28]
 800050c:	2b04      	cmp	r3, #4
 800050e:	d152      	bne.n	80005b6 <HAL_TIM_IC_CaptureCallback+0xb6>
	{

		if(Is_First_Captured == 0)
 8000510:	4b2b      	ldr	r3, [pc, #172]	@ (80005c0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d10d      	bne.n	8000534 <HAL_TIM_IC_CaptureCallback+0x34>
		{
			HAL_GPIO_WritePin(LED_SYNCH_GPIO_Port, LED_SYNCH_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2120      	movs	r1, #32
 800051c:	4829      	ldr	r0, [pc, #164]	@ (80005c4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800051e:	f000 fdf9 	bl	8001114 <HAL_GPIO_WritePin>
			IC_Val1 = TIM2 -> CCR3;//HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000522:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000528:	4a27      	ldr	r2, [pc, #156]	@ (80005c8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800052a:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 800052c:	4b24      	ldr	r3, [pc, #144]	@ (80005c0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
			frequency = (float)((TIMCLOCK/(TIM2->PSC + 1))/Difference);
			__HAL_TIM_SET_COUNTER(htim, 0);
			Is_First_Captured = 0;
		}
	}
}
 8000532:	e040      	b.n	80005b6 <HAL_TIM_IC_CaptureCallback+0xb6>
			HAL_GPIO_WritePin(LED_SYNCH_GPIO_Port, LED_SYNCH_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2120      	movs	r1, #32
 8000538:	4822      	ldr	r0, [pc, #136]	@ (80005c4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800053a:	f000 fdeb 	bl	8001114 <HAL_GPIO_WritePin>
			IC_Val2 = TIM2 -> CCR3;
 800053e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000544:	4a21      	ldr	r2, [pc, #132]	@ (80005cc <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000546:	6013      	str	r3, [r2, #0]
			if(IC_Val2 > IC_Val1)
 8000548:	4b20      	ldr	r3, [pc, #128]	@ (80005cc <HAL_TIM_IC_CaptureCallback+0xcc>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b1e      	ldr	r3, [pc, #120]	@ (80005c8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	429a      	cmp	r2, r3
 8000552:	d907      	bls.n	8000564 <HAL_TIM_IC_CaptureCallback+0x64>
				Difference = IC_Val2 - IC_Val1;
 8000554:	4b1d      	ldr	r3, [pc, #116]	@ (80005cc <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000560:	6013      	str	r3, [r2, #0]
 8000562:	e00a      	b.n	800057a <HAL_TIM_IC_CaptureCallback+0x7a>
				Difference = (TIM2->ARR - IC_Val1) + IC_Val2;
 8000564:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800056a:	4b17      	ldr	r3, [pc, #92]	@ (80005c8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	1ad2      	subs	r2, r2, r3
 8000570:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4413      	add	r3, r2
 8000576:	4a16      	ldr	r2, [pc, #88]	@ (80005d0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000578:	6013      	str	r3, [r2, #0]
			frequency = (float)((TIMCLOCK/(TIM2->PSC + 1))/Difference);
 800057a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800057e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000580:	3301      	adds	r3, #1
 8000582:	ee07 3a90 	vmov	s15, r3
 8000586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800058a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80005d4 <HAL_TIM_IC_CaptureCallback+0xd4>
 800058e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000592:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	ee07 3a90 	vmov	s15, r3
 800059a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800059e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005a2:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80005a4:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2200      	movs	r2, #0
 80005ae:	625a      	str	r2, [r3, #36]	@ 0x24
			Is_First_Captured = 0;
 80005b0:	4b03      	ldr	r3, [pc, #12]	@ (80005c0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000c4 	.word	0x200000c4
 80005c4:	40020000 	.word	0x40020000
 80005c8:	200000b8 	.word	0x200000b8
 80005cc:	200000bc 	.word	0x200000bc
 80005d0:	200000c0 	.word	0x200000c0
 80005d4:	4b742400 	.word	0x4b742400
 80005d8:	200000c8 	.word	0x200000c8

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fa90 	bl	8000b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f828 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f942 	bl	8000870 <MX_GPIO_Init>
  MX_TIM3_Init();
 80005ec:	f000 f8f4 	bl	80007d8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005f0:	f000 f882 	bl	80006f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TIM3 -> CR1 |= TIM_CR1_CEN;
 80005f4:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <main+0x50>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0c      	ldr	r2, [pc, #48]	@ (800062c <main+0x50>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	6013      	str	r3, [r2, #0]
  /*timer2_count_config(); //Configuramos tim2 counter
  timer2_ch3_input_capture_config(); //Configuramos tim2 input capture
  timer2_count_start(); //Comenzamos la cuenta en tim2
  timer2_ch3_input_capture_start();*/
  //tim2_ch3_config_ia();
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000600:	2108      	movs	r1, #8
 8000602:	480b      	ldr	r0, [pc, #44]	@ (8000630 <main+0x54>)
 8000604:	f001 fac6 	bl	8001b94 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(TIM3->SR & TIM_SR_UIF)
 8000608:	4b08      	ldr	r3, [pc, #32]	@ (800062c <main+0x50>)
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0f9      	beq.n	8000608 <main+0x2c>
	{
		TIM3->SR &= ~TIM_SR_UIF;
 8000614:	4b05      	ldr	r3, [pc, #20]	@ (800062c <main+0x50>)
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	4a04      	ldr	r2, [pc, #16]	@ (800062c <main+0x50>)
 800061a:	f023 0301 	bic.w	r3, r3, #1
 800061e:	6113      	str	r3, [r2, #16]
		HAL_GPIO_TogglePin(LED_SIGN_GPIO_Port, LED_SIGN_Pin);
 8000620:	2180      	movs	r1, #128	@ 0x80
 8000622:	4804      	ldr	r0, [pc, #16]	@ (8000634 <main+0x58>)
 8000624:	f000 fd8f 	bl	8001146 <HAL_GPIO_TogglePin>
	if(TIM3->SR & TIM_SR_UIF)
 8000628:	e7ee      	b.n	8000608 <main+0x2c>
 800062a:	bf00      	nop
 800062c:	40000400 	.word	0x40000400
 8000630:	20000028 	.word	0x20000028
 8000634:	40020000 	.word	0x40020000

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	@ 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 f920 	bl	800288c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xb8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	4a22      	ldr	r2, [pc, #136]	@ (80006f0 <SystemClock_Config+0xb8>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	@ 0x40
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <SystemClock_Config+0xb8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <SystemClock_Config+0xbc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000684:	4a1b      	ldr	r2, [pc, #108]	@ (80006f4 <SystemClock_Config+0xbc>)
 8000686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <SystemClock_Config+0xbc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fd65 	bl	800117c <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006b8:	f000 f91c 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 ffc8 	bl	800166c <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006e2:	f000 f907 	bl	80008f4 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	@ 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000722:	4b2c      	ldr	r3, [pc, #176]	@ (80007d4 <MX_TIM2_Init+0xdc>)
 8000724:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000728:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 800072a:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <MX_TIM2_Init+0xdc>)
 800072c:	220f      	movs	r2, #15
 800072e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <MX_TIM2_Init+0xdc>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000736:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_TIM2_Init+0xdc>)
 8000738:	f04f 32ff 	mov.w	r2, #4294967295
 800073c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073e:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <MX_TIM2_Init+0xdc>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000744:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <MX_TIM2_Init+0xdc>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800074a:	4822      	ldr	r0, [pc, #136]	@ (80007d4 <MX_TIM2_Init+0xdc>)
 800074c:	f001 f97a 	bl	8001a44 <HAL_TIM_Base_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000756:	f000 f8cd 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000760:	f107 0318 	add.w	r3, r7, #24
 8000764:	4619      	mov	r1, r3
 8000766:	481b      	ldr	r0, [pc, #108]	@ (80007d4 <MX_TIM2_Init+0xdc>)
 8000768:	f001 fcba 	bl	80020e0 <HAL_TIM_ConfigClockSource>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000772:	f000 f8bf 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000776:	4817      	ldr	r0, [pc, #92]	@ (80007d4 <MX_TIM2_Init+0xdc>)
 8000778:	f001 f9b3 	bl	8001ae2 <HAL_TIM_IC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000782:	f000 f8b7 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	4619      	mov	r1, r3
 8000794:	480f      	ldr	r0, [pc, #60]	@ (80007d4 <MX_TIM2_Init+0xdc>)
 8000796:	f001 fff7 	bl	8002788 <HAL_TIMEx_MasterConfigSynchronization>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80007a0:	f000 f8a8 	bl	80008f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	2208      	movs	r2, #8
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <MX_TIM2_Init+0xdc>)
 80007bc:	f001 fbf4 	bl	8001fa8 <HAL_TIM_IC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80007c6:	f000 f895 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	@ 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000028 	.word	0x20000028

080007d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_TIM3_Init+0x90>)
 80007f6:	4a1d      	ldr	r2, [pc, #116]	@ (800086c <MX_TIM3_Init+0x94>)
 80007f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_TIM3_Init+0x90>)
 80007fc:	220f      	movs	r2, #15
 80007fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_TIM3_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50-1;
 8000806:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_TIM3_Init+0x90>)
 8000808:	2231      	movs	r2, #49	@ 0x31
 800080a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_TIM3_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <MX_TIM3_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000818:	4813      	ldr	r0, [pc, #76]	@ (8000868 <MX_TIM3_Init+0x90>)
 800081a:	f001 f913 	bl	8001a44 <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000824:	f000 f866 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	4619      	mov	r1, r3
 8000834:	480c      	ldr	r0, [pc, #48]	@ (8000868 <MX_TIM3_Init+0x90>)
 8000836:	f001 fc53 	bl	80020e0 <HAL_TIM_ConfigClockSource>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000840:	f000 f858 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_TIM3_Init+0x90>)
 8000852:	f001 ff99 	bl	8002788 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800085c:	f000 f84a 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000070 	.word	0x20000070
 800086c:	40000400 	.word	0x40000400

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_GPIO_Init+0x7c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a17      	ldr	r2, [pc, #92]	@ (80008ec <MX_GPIO_Init+0x7c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_GPIO_Init+0x7c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_GPIO_Init+0x7c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <MX_GPIO_Init+0x7c>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_GPIO_Init+0x7c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_USER_Pin|LED_SYNCH_Pin|LED_SIGN_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	21a4      	movs	r1, #164	@ 0xa4
 80008c2:	480b      	ldr	r0, [pc, #44]	@ (80008f0 <MX_GPIO_Init+0x80>)
 80008c4:	f000 fc26 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_USER_Pin LED_SYNCH_Pin LED_SIGN_Pin */
  GPIO_InitStruct.Pin = LED_USER_Pin|LED_SYNCH_Pin|LED_SIGN_Pin;
 80008c8:	23a4      	movs	r3, #164	@ 0xa4
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_GPIO_Init+0x80>)
 80008e0:	f000 fa94 	bl	8000e0c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	4a0f      	ldr	r2, [pc, #60]	@ (800094c <HAL_MspInit+0x4c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000914:	6453      	str	r3, [r2, #68]	@ 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	@ (800094c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000970:	d135      	bne.n	80009de <HAL_TIM_Base_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b25      	ldr	r3, [pc, #148]	@ (8000a0c <HAL_TIM_Base_MspInit+0xbc>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	4a24      	ldr	r2, [pc, #144]	@ (8000a0c <HAL_TIM_Base_MspInit+0xbc>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6413      	str	r3, [r2, #64]	@ 0x40
 8000982:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <HAL_TIM_Base_MspInit+0xbc>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <HAL_TIM_Base_MspInit+0xbc>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a1d      	ldr	r2, [pc, #116]	@ (8000a0c <HAL_TIM_Base_MspInit+0xbc>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_TIM_Base_MspInit+0xbc>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009bc:	2301      	movs	r3, #1
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4812      	ldr	r0, [pc, #72]	@ (8000a10 <HAL_TIM_Base_MspInit+0xc0>)
 80009c8:	f000 fa20 	bl	8000e0c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	201c      	movs	r0, #28
 80009d2:	f000 f9e4 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009d6:	201c      	movs	r0, #28
 80009d8:	f000 f9fd 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009dc:	e012      	b.n	8000a04 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000a14 <HAL_TIM_Base_MspInit+0xc4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d10d      	bne.n	8000a04 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <HAL_TIM_Base_MspInit+0xbc>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <HAL_TIM_Base_MspInit+0xbc>)
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <HAL_TIM_Base_MspInit+0xbc>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020400 	.word	0x40020400
 8000a14:	40000400 	.word	0x40000400

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <NMI_Handler+0x4>

08000a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <MemManage_Handler+0x4>

08000a30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6e:	f000 f89b 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a7c:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <TIM2_IRQHandler+0x10>)
 8000a7e:	f001 f9a3 	bl	8001dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000028 	.word	0x20000028

08000a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <SystemInit+0x20>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a96:	4a05      	ldr	r2, [pc, #20]	@ (8000aac <SystemInit+0x20>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ab4:	f7ff ffea 	bl	8000a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab8:	480c      	ldr	r0, [pc, #48]	@ (8000aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aba:	490d      	ldr	r1, [pc, #52]	@ (8000af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000abc:	4a0d      	ldr	r2, [pc, #52]	@ (8000af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8000afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ade:	f001 fedd 	bl	800289c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae2:	f7ff fd7b 	bl	80005dc <main>
  bx  lr    
 8000ae6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af4:	0800291c 	.word	0x0800291c
  ldr r2, =_sbss
 8000af8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000afc:	200000d0 	.word	0x200000d0

08000b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC_IRQHandler>
	...

08000b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b08:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <HAL_Init+0x40>)
 8000b0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b14:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <HAL_Init+0x40>)
 8000b1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_Init+0x40>)
 8000b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f92b 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	200f      	movs	r0, #15
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fee2 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023c00 	.word	0x40023c00

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f943 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 f90b 	bl	8000d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	@ (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	200000cc 	.word	0x200000cc

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	@ (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200000cc 	.word	0x200000cc

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	@ (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	@ (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	@ (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	@ (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	@ 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	@ 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff8e 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff29 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff3e 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff8e 	bl	8000cdc <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5d 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff31 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffa2 	bl	8000d44 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	@ 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
 8000e26:	e159      	b.n	80010dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	f040 8148 	bne.w	80010d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d005      	beq.n	8000e5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d130      	bne.n	8000ec0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	091b      	lsrs	r3, r3, #4
 8000eaa:	f003 0201 	and.w	r2, r3, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d017      	beq.n	8000efc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d123      	bne.n	8000f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	08da      	lsrs	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3208      	adds	r2, #8
 8000f4a:	69b9      	ldr	r1, [r7, #24]
 8000f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0203 	and.w	r2, r3, #3
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 80a2 	beq.w	80010d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b57      	ldr	r3, [pc, #348]	@ (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	4a56      	ldr	r2, [pc, #344]	@ (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa2:	4b54      	ldr	r3, [pc, #336]	@ (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fae:	4a52      	ldr	r2, [pc, #328]	@ (80010f8 <HAL_GPIO_Init+0x2ec>)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a49      	ldr	r2, [pc, #292]	@ (80010fc <HAL_GPIO_Init+0x2f0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d019      	beq.n	800100e <HAL_GPIO_Init+0x202>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a48      	ldr	r2, [pc, #288]	@ (8001100 <HAL_GPIO_Init+0x2f4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d013      	beq.n	800100a <HAL_GPIO_Init+0x1fe>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a47      	ldr	r2, [pc, #284]	@ (8001104 <HAL_GPIO_Init+0x2f8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d00d      	beq.n	8001006 <HAL_GPIO_Init+0x1fa>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a46      	ldr	r2, [pc, #280]	@ (8001108 <HAL_GPIO_Init+0x2fc>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_Init+0x1f6>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a45      	ldr	r2, [pc, #276]	@ (800110c <HAL_GPIO_Init+0x300>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_GPIO_Init+0x1f2>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e008      	b.n	8001010 <HAL_GPIO_Init+0x204>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x204>
 8001002:	2303      	movs	r3, #3
 8001004:	e004      	b.n	8001010 <HAL_GPIO_Init+0x204>
 8001006:	2302      	movs	r3, #2
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x204>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x204>
 800100e:	2300      	movs	r3, #0
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	f002 0203 	and.w	r2, r2, #3
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	4093      	lsls	r3, r2
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001020:	4935      	ldr	r1, [pc, #212]	@ (80010f8 <HAL_GPIO_Init+0x2ec>)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102e:	4b38      	ldr	r3, [pc, #224]	@ (8001110 <HAL_GPIO_Init+0x304>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001052:	4a2f      	ldr	r2, [pc, #188]	@ (8001110 <HAL_GPIO_Init+0x304>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001058:	4b2d      	ldr	r3, [pc, #180]	@ (8001110 <HAL_GPIO_Init+0x304>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800107c:	4a24      	ldr	r2, [pc, #144]	@ (8001110 <HAL_GPIO_Init+0x304>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001082:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <HAL_GPIO_Init+0x304>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001110 <HAL_GPIO_Init+0x304>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ac:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <HAL_GPIO_Init+0x304>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001110 <HAL_GPIO_Init+0x304>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3301      	adds	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	f67f aea2 	bls.w	8000e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3724      	adds	r7, #36	@ 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40020400 	.word	0x40020400
 8001104:	40020800 	.word	0x40020800
 8001108:	40020c00 	.word	0x40020c00
 800110c:	40021000 	.word	0x40021000
 8001110:	40013c00 	.word	0x40013c00

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001124:	787b      	ldrb	r3, [r7, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001130:	e003      	b.n	800113a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	041a      	lsls	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001146:	b480      	push	{r7}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	460b      	mov	r3, r1
 8001150:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001158:	887a      	ldrh	r2, [r7, #2]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4013      	ands	r3, r2
 800115e:	041a      	lsls	r2, r3, #16
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43d9      	mvns	r1, r3
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	400b      	ands	r3, r1
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e267      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d075      	beq.n	8001286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800119a:	4b88      	ldr	r3, [pc, #544]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d00c      	beq.n	80011c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a6:	4b85      	ldr	r3, [pc, #532]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d112      	bne.n	80011d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b2:	4b82      	ldr	r3, [pc, #520]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011be:	d10b      	bne.n	80011d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c0:	4b7e      	ldr	r3, [pc, #504]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d05b      	beq.n	8001284 <HAL_RCC_OscConfig+0x108>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d157      	bne.n	8001284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e242      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e0:	d106      	bne.n	80011f0 <HAL_RCC_OscConfig+0x74>
 80011e2:	4b76      	ldr	r3, [pc, #472]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a75      	ldr	r2, [pc, #468]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e01d      	b.n	800122c <HAL_RCC_OscConfig+0xb0>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x98>
 80011fa:	4b70      	ldr	r3, [pc, #448]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a6f      	ldr	r2, [pc, #444]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 8001200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b6d      	ldr	r3, [pc, #436]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a6c      	ldr	r2, [pc, #432]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e00b      	b.n	800122c <HAL_RCC_OscConfig+0xb0>
 8001214:	4b69      	ldr	r3, [pc, #420]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a68      	ldr	r2, [pc, #416]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 800121a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b66      	ldr	r3, [pc, #408]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a65      	ldr	r2, [pc, #404]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800122a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d013      	beq.n	800125c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fccc 	bl	8000bd0 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fcc8 	bl	8000bd0 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	@ 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e207      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	4b5b      	ldr	r3, [pc, #364]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0xc0>
 800125a:	e014      	b.n	8001286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fcb8 	bl	8000bd0 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fcb4 	bl	8000bd0 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	@ 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e1f3      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	4b51      	ldr	r3, [pc, #324]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0xe8>
 8001282:	e000      	b.n	8001286 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d063      	beq.n	800135a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001292:	4b4a      	ldr	r3, [pc, #296]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00b      	beq.n	80012b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	4b47      	ldr	r3, [pc, #284]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d11c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012aa:	4b44      	ldr	r3, [pc, #272]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d116      	bne.n	80012e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	4b41      	ldr	r3, [pc, #260]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <HAL_RCC_OscConfig+0x152>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d001      	beq.n	80012ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e1c7      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4b3b      	ldr	r3, [pc, #236]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4937      	ldr	r1, [pc, #220]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e2:	e03a      	b.n	800135a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d020      	beq.n	800132e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ec:	4b34      	ldr	r3, [pc, #208]	@ (80013c0 <HAL_RCC_OscConfig+0x244>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f2:	f7ff fc6d 	bl	8000bd0 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fc69 	bl	8000bd0 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e1a8      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	4b2b      	ldr	r3, [pc, #172]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001318:	4b28      	ldr	r3, [pc, #160]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	4925      	ldr	r1, [pc, #148]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 8001328:	4313      	orrs	r3, r2
 800132a:	600b      	str	r3, [r1, #0]
 800132c:	e015      	b.n	800135a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <HAL_RCC_OscConfig+0x244>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fc4c 	bl	8000bd0 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133c:	f7ff fc48 	bl	8000bd0 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e187      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134e:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d036      	beq.n	80013d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d016      	beq.n	800139c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_RCC_OscConfig+0x248>)
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001374:	f7ff fc2c 	bl	8000bd0 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137c:	f7ff fc28 	bl	8000bd0 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e167      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <HAL_RCC_OscConfig+0x240>)
 8001390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x200>
 800139a:	e01b      	b.n	80013d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <HAL_RCC_OscConfig+0x248>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fc15 	bl	8000bd0 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a8:	e00e      	b.n	80013c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013aa:	f7ff fc11 	bl	8000bd0 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d907      	bls.n	80013c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e150      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
 80013bc:	40023800 	.word	0x40023800
 80013c0:	42470000 	.word	0x42470000
 80013c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c8:	4b88      	ldr	r3, [pc, #544]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 80013ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1ea      	bne.n	80013aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 8097 	beq.w	8001510 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e6:	4b81      	ldr	r3, [pc, #516]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10f      	bne.n	8001412 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b7d      	ldr	r3, [pc, #500]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	4a7c      	ldr	r2, [pc, #496]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	@ 0x40
 8001402:	4b7a      	ldr	r3, [pc, #488]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800140e:	2301      	movs	r3, #1
 8001410:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001412:	4b77      	ldr	r3, [pc, #476]	@ (80015f0 <HAL_RCC_OscConfig+0x474>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141a:	2b00      	cmp	r3, #0
 800141c:	d118      	bne.n	8001450 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800141e:	4b74      	ldr	r3, [pc, #464]	@ (80015f0 <HAL_RCC_OscConfig+0x474>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a73      	ldr	r2, [pc, #460]	@ (80015f0 <HAL_RCC_OscConfig+0x474>)
 8001424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142a:	f7ff fbd1 	bl	8000bd0 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001432:	f7ff fbcd 	bl	8000bd0 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e10c      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	4b6a      	ldr	r3, [pc, #424]	@ (80015f0 <HAL_RCC_OscConfig+0x474>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d106      	bne.n	8001466 <HAL_RCC_OscConfig+0x2ea>
 8001458:	4b64      	ldr	r3, [pc, #400]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800145c:	4a63      	ldr	r2, [pc, #396]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6713      	str	r3, [r2, #112]	@ 0x70
 8001464:	e01c      	b.n	80014a0 <HAL_RCC_OscConfig+0x324>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b05      	cmp	r3, #5
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0x30c>
 800146e:	4b5f      	ldr	r3, [pc, #380]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001472:	4a5e      	ldr	r2, [pc, #376]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6713      	str	r3, [r2, #112]	@ 0x70
 800147a:	4b5c      	ldr	r3, [pc, #368]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800147e:	4a5b      	ldr	r2, [pc, #364]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6713      	str	r3, [r2, #112]	@ 0x70
 8001486:	e00b      	b.n	80014a0 <HAL_RCC_OscConfig+0x324>
 8001488:	4b58      	ldr	r3, [pc, #352]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148c:	4a57      	ldr	r2, [pc, #348]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	6713      	str	r3, [r2, #112]	@ 0x70
 8001494:	4b55      	ldr	r3, [pc, #340]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001498:	4a54      	ldr	r2, [pc, #336]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 800149a:	f023 0304 	bic.w	r3, r3, #4
 800149e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d015      	beq.n	80014d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a8:	f7ff fb92 	bl	8000bd0 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ae:	e00a      	b.n	80014c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7ff fb8e 	bl	8000bd0 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e0cb      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c6:	4b49      	ldr	r3, [pc, #292]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0ee      	beq.n	80014b0 <HAL_RCC_OscConfig+0x334>
 80014d2:	e014      	b.n	80014fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d4:	f7ff fb7c 	bl	8000bd0 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014dc:	f7ff fb78 	bl	8000bd0 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e0b5      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f2:	4b3e      	ldr	r3, [pc, #248]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1ee      	bne.n	80014dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001504:	4b39      	ldr	r3, [pc, #228]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	4a38      	ldr	r2, [pc, #224]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 800150a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800150e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80a1 	beq.w	800165c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800151a:	4b34      	ldr	r3, [pc, #208]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b08      	cmp	r3, #8
 8001524:	d05c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d141      	bne.n	80015b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152e:	4b31      	ldr	r3, [pc, #196]	@ (80015f4 <HAL_RCC_OscConfig+0x478>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fb4c 	bl	8000bd0 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff fb48 	bl	8000bd0 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e087      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154e:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69da      	ldr	r2, [r3, #28]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001568:	019b      	lsls	r3, r3, #6
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001570:	085b      	lsrs	r3, r3, #1
 8001572:	3b01      	subs	r3, #1
 8001574:	041b      	lsls	r3, r3, #16
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	491b      	ldr	r1, [pc, #108]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_RCC_OscConfig+0x478>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fb21 	bl	8000bd0 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff fb1d 	bl	8000bd0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e05c      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x416>
 80015b0:	e054      	b.n	800165c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <HAL_RCC_OscConfig+0x478>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb0a 	bl	8000bd0 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fb06 	bl	8000bd0 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e045      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_RCC_OscConfig+0x470>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x444>
 80015de:	e03d      	b.n	800165c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d107      	bne.n	80015f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e038      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40007000 	.word	0x40007000
 80015f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <HAL_RCC_OscConfig+0x4ec>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d028      	beq.n	8001658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d121      	bne.n	8001658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	429a      	cmp	r2, r3
 8001620:	d11a      	bne.n	8001658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001628:	4013      	ands	r3, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800162e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001630:	4293      	cmp	r3, r2
 8001632:	d111      	bne.n	8001658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163e:	085b      	lsrs	r3, r3, #1
 8001640:	3b01      	subs	r3, #1
 8001642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001644:	429a      	cmp	r2, r3
 8001646:	d107      	bne.n	8001658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800

0800166c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0cc      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001680:	4b68      	ldr	r3, [pc, #416]	@ (8001824 <HAL_RCC_ClockConfig+0x1b8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d90c      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b65      	ldr	r3, [pc, #404]	@ (8001824 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b63      	ldr	r3, [pc, #396]	@ (8001824 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b8      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c0:	4b59      	ldr	r3, [pc, #356]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4a58      	ldr	r2, [pc, #352]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d8:	4b53      	ldr	r3, [pc, #332]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4a52      	ldr	r2, [pc, #328]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b50      	ldr	r3, [pc, #320]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	494d      	ldr	r1, [pc, #308]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d044      	beq.n	800178c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d119      	bne.n	800174a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07f      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d003      	beq.n	800172a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001726:	2b03      	cmp	r3, #3
 8001728:	d107      	bne.n	800173a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172a:	4b3f      	ldr	r3, [pc, #252]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e06f      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173a:	4b3b      	ldr	r3, [pc, #236]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e067      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800174a:	4b37      	ldr	r3, [pc, #220]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f023 0203 	bic.w	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4934      	ldr	r1, [pc, #208]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	4313      	orrs	r3, r2
 800175a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800175c:	f7ff fa38 	bl	8000bd0 <HAL_GetTick>
 8001760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001762:	e00a      	b.n	800177a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001764:	f7ff fa34 	bl	8000bd0 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e04f      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	4b2b      	ldr	r3, [pc, #172]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 020c 	and.w	r2, r3, #12
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	429a      	cmp	r2, r3
 800178a:	d1eb      	bne.n	8001764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800178c:	4b25      	ldr	r3, [pc, #148]	@ (8001824 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d20c      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e032      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4916      	ldr	r1, [pc, #88]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490e      	ldr	r1, [pc, #56]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f2:	f000 f821 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f6:	4602      	mov	r2, r0
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	490a      	ldr	r1, [pc, #40]	@ (800182c <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	5ccb      	ldrb	r3, [r1, r3]
 8001806:	fa22 f303 	lsr.w	r3, r2, r3
 800180a:	4a09      	ldr	r2, [pc, #36]	@ (8001830 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_RCC_ClockConfig+0x1c8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f998 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00
 8001828:	40023800 	.word	0x40023800
 800182c:	080028fc 	.word	0x080028fc
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800183c:	b094      	sub	sp, #80	@ 0x50
 800183e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001850:	4b79      	ldr	r3, [pc, #484]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b08      	cmp	r3, #8
 800185a:	d00d      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x40>
 800185c:	2b08      	cmp	r3, #8
 800185e:	f200 80e1 	bhi.w	8001a24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x34>
 8001866:	2b04      	cmp	r3, #4
 8001868:	d003      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0x3a>
 800186a:	e0db      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800186c:	4b73      	ldr	r3, [pc, #460]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x204>)
 800186e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001870:	e0db      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001872:	4b73      	ldr	r3, [pc, #460]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x208>)
 8001874:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001876:	e0d8      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001878:	4b6f      	ldr	r3, [pc, #444]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x200>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001880:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001882:	4b6d      	ldr	r3, [pc, #436]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d063      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188e:	4b6a      	ldr	r3, [pc, #424]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	099b      	lsrs	r3, r3, #6
 8001894:	2200      	movs	r2, #0
 8001896:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001898:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800189a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800189c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80018a2:	2300      	movs	r3, #0
 80018a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80018a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018aa:	4622      	mov	r2, r4
 80018ac:	462b      	mov	r3, r5
 80018ae:	f04f 0000 	mov.w	r0, #0
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	0159      	lsls	r1, r3, #5
 80018b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018bc:	0150      	lsls	r0, r2, #5
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4621      	mov	r1, r4
 80018c4:	1a51      	subs	r1, r2, r1
 80018c6:	6139      	str	r1, [r7, #16]
 80018c8:	4629      	mov	r1, r5
 80018ca:	eb63 0301 	sbc.w	r3, r3, r1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018dc:	4659      	mov	r1, fp
 80018de:	018b      	lsls	r3, r1, #6
 80018e0:	4651      	mov	r1, sl
 80018e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018e6:	4651      	mov	r1, sl
 80018e8:	018a      	lsls	r2, r1, #6
 80018ea:	4651      	mov	r1, sl
 80018ec:	ebb2 0801 	subs.w	r8, r2, r1
 80018f0:	4659      	mov	r1, fp
 80018f2:	eb63 0901 	sbc.w	r9, r3, r1
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800190a:	4690      	mov	r8, r2
 800190c:	4699      	mov	r9, r3
 800190e:	4623      	mov	r3, r4
 8001910:	eb18 0303 	adds.w	r3, r8, r3
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	462b      	mov	r3, r5
 8001918:	eb49 0303 	adc.w	r3, r9, r3
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800192a:	4629      	mov	r1, r5
 800192c:	024b      	lsls	r3, r1, #9
 800192e:	4621      	mov	r1, r4
 8001930:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001934:	4621      	mov	r1, r4
 8001936:	024a      	lsls	r2, r1, #9
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800193e:	2200      	movs	r2, #0
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001948:	f7fe fc44 	bl	80001d4 <__aeabi_uldivmod>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4613      	mov	r3, r2
 8001952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001954:	e058      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001956:	4b38      	ldr	r3, [pc, #224]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	2200      	movs	r2, #0
 800195e:	4618      	mov	r0, r3
 8001960:	4611      	mov	r1, r2
 8001962:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001966:	623b      	str	r3, [r7, #32]
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
 800196c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001970:	4642      	mov	r2, r8
 8001972:	464b      	mov	r3, r9
 8001974:	f04f 0000 	mov.w	r0, #0
 8001978:	f04f 0100 	mov.w	r1, #0
 800197c:	0159      	lsls	r1, r3, #5
 800197e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001982:	0150      	lsls	r0, r2, #5
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4641      	mov	r1, r8
 800198a:	ebb2 0a01 	subs.w	sl, r2, r1
 800198e:	4649      	mov	r1, r9
 8001990:	eb63 0b01 	sbc.w	fp, r3, r1
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019a8:	ebb2 040a 	subs.w	r4, r2, sl
 80019ac:	eb63 050b 	sbc.w	r5, r3, fp
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	00eb      	lsls	r3, r5, #3
 80019ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019be:	00e2      	lsls	r2, r4, #3
 80019c0:	4614      	mov	r4, r2
 80019c2:	461d      	mov	r5, r3
 80019c4:	4643      	mov	r3, r8
 80019c6:	18e3      	adds	r3, r4, r3
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	464b      	mov	r3, r9
 80019cc:	eb45 0303 	adc.w	r3, r5, r3
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019de:	4629      	mov	r1, r5
 80019e0:	028b      	lsls	r3, r1, #10
 80019e2:	4621      	mov	r1, r4
 80019e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019e8:	4621      	mov	r1, r4
 80019ea:	028a      	lsls	r2, r1, #10
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f2:	2200      	movs	r2, #0
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	61fa      	str	r2, [r7, #28]
 80019f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fc:	f7fe fbea 	bl	80001d4 <__aeabi_uldivmod>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4613      	mov	r3, r2
 8001a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	3301      	adds	r3, #1
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a22:	e002      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3750      	adds	r7, #80	@ 0x50
 8001a30:	46bd      	mov	sp, r7
 8001a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	00f42400 	.word	0x00f42400
 8001a40:	007a1200 	.word	0x007a1200

08001a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e041      	b.n	8001ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe ff70 	bl	8000950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4610      	mov	r0, r2
 8001a84:	f000 fc1c 	bl	80022c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e041      	b.n	8001b78 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d106      	bne.n	8001b0e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f839 	bl	8001b80 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2202      	movs	r2, #2
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f000 fbcd 	bl	80022c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d104      	bne.n	8001bb2 <HAL_TIM_IC_Start_IT+0x1e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	e013      	b.n	8001bda <HAL_TIM_IC_Start_IT+0x46>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d104      	bne.n	8001bc2 <HAL_TIM_IC_Start_IT+0x2e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	e00b      	b.n	8001bda <HAL_TIM_IC_Start_IT+0x46>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d104      	bne.n	8001bd2 <HAL_TIM_IC_Start_IT+0x3e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	e003      	b.n	8001bda <HAL_TIM_IC_Start_IT+0x46>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d104      	bne.n	8001bec <HAL_TIM_IC_Start_IT+0x58>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	e013      	b.n	8001c14 <HAL_TIM_IC_Start_IT+0x80>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d104      	bne.n	8001bfc <HAL_TIM_IC_Start_IT+0x68>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	e00b      	b.n	8001c14 <HAL_TIM_IC_Start_IT+0x80>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d104      	bne.n	8001c0c <HAL_TIM_IC_Start_IT+0x78>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	e003      	b.n	8001c14 <HAL_TIM_IC_Start_IT+0x80>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c16:	7bbb      	ldrb	r3, [r7, #14]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d102      	bne.n	8001c22 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001c1c:	7b7b      	ldrb	r3, [r7, #13]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d001      	beq.n	8001c26 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0c2      	b.n	8001dac <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d104      	bne.n	8001c36 <HAL_TIM_IC_Start_IT+0xa2>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c34:	e013      	b.n	8001c5e <HAL_TIM_IC_Start_IT+0xca>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d104      	bne.n	8001c46 <HAL_TIM_IC_Start_IT+0xb2>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c44:	e00b      	b.n	8001c5e <HAL_TIM_IC_Start_IT+0xca>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d104      	bne.n	8001c56 <HAL_TIM_IC_Start_IT+0xc2>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c54:	e003      	b.n	8001c5e <HAL_TIM_IC_Start_IT+0xca>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d104      	bne.n	8001c6e <HAL_TIM_IC_Start_IT+0xda>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c6c:	e013      	b.n	8001c96 <HAL_TIM_IC_Start_IT+0x102>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d104      	bne.n	8001c7e <HAL_TIM_IC_Start_IT+0xea>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c7c:	e00b      	b.n	8001c96 <HAL_TIM_IC_Start_IT+0x102>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d104      	bne.n	8001c8e <HAL_TIM_IC_Start_IT+0xfa>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c8c:	e003      	b.n	8001c96 <HAL_TIM_IC_Start_IT+0x102>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2202      	movs	r2, #2
 8001c92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b0c      	cmp	r3, #12
 8001c9a:	d841      	bhi.n	8001d20 <HAL_TIM_IC_Start_IT+0x18c>
 8001c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca4 <HAL_TIM_IC_Start_IT+0x110>)
 8001c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca2:	bf00      	nop
 8001ca4:	08001cd9 	.word	0x08001cd9
 8001ca8:	08001d21 	.word	0x08001d21
 8001cac:	08001d21 	.word	0x08001d21
 8001cb0:	08001d21 	.word	0x08001d21
 8001cb4:	08001ceb 	.word	0x08001ceb
 8001cb8:	08001d21 	.word	0x08001d21
 8001cbc:	08001d21 	.word	0x08001d21
 8001cc0:	08001d21 	.word	0x08001d21
 8001cc4:	08001cfd 	.word	0x08001cfd
 8001cc8:	08001d21 	.word	0x08001d21
 8001ccc:	08001d21 	.word	0x08001d21
 8001cd0:	08001d21 	.word	0x08001d21
 8001cd4:	08001d0f 	.word	0x08001d0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0202 	orr.w	r2, r2, #2
 8001ce6:	60da      	str	r2, [r3, #12]
      break;
 8001ce8:	e01d      	b.n	8001d26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0204 	orr.w	r2, r2, #4
 8001cf8:	60da      	str	r2, [r3, #12]
      break;
 8001cfa:	e014      	b.n	8001d26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0208 	orr.w	r2, r2, #8
 8001d0a:	60da      	str	r2, [r3, #12]
      break;
 8001d0c:	e00b      	b.n	8001d26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0210 	orr.w	r2, r2, #16
 8001d1c:	60da      	str	r2, [r3, #12]
      break;
 8001d1e:	e002      	b.n	8001d26 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
      break;
 8001d24:	bf00      	nop
  }

  if (status == HAL_OK)
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d13e      	bne.n	8001daa <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	6839      	ldr	r1, [r7, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fd01 	bl	800273c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <HAL_TIM_IC_Start_IT+0x220>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d018      	beq.n	8001d76 <HAL_TIM_IC_Start_IT+0x1e2>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4c:	d013      	beq.n	8001d76 <HAL_TIM_IC_Start_IT+0x1e2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a19      	ldr	r2, [pc, #100]	@ (8001db8 <HAL_TIM_IC_Start_IT+0x224>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00e      	beq.n	8001d76 <HAL_TIM_IC_Start_IT+0x1e2>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a17      	ldr	r2, [pc, #92]	@ (8001dbc <HAL_TIM_IC_Start_IT+0x228>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d009      	beq.n	8001d76 <HAL_TIM_IC_Start_IT+0x1e2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a16      	ldr	r2, [pc, #88]	@ (8001dc0 <HAL_TIM_IC_Start_IT+0x22c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d004      	beq.n	8001d76 <HAL_TIM_IC_Start_IT+0x1e2>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <HAL_TIM_IC_Start_IT+0x230>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d111      	bne.n	8001d9a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b06      	cmp	r3, #6
 8001d86:	d010      	beq.n	8001daa <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d98:	e007      	b.n	8001daa <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40000800 	.word	0x40000800
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	40014000 	.word	0x40014000

08001dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d020      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01b      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0202 	mvn.w	r2, #2
 8001dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fb74 	bl	8000500 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fa31 	bl	8002282 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fa38 	bl	8002296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d020      	beq.n	8001e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01b      	beq.n	8001e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0204 	mvn.w	r2, #4
 8001e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fb4e 	bl	8000500 <HAL_TIM_IC_CaptureCallback>
 8001e64:	e005      	b.n	8001e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fa0b 	bl	8002282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fa12 	bl	8002296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d020      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0208 	mvn.w	r2, #8
 8001e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2204      	movs	r2, #4
 8001e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fb28 	bl	8000500 <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f9e5 	bl	8002282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f9ec 	bl	8002296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d020      	beq.n	8001f10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01b      	beq.n	8001f10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0210 	mvn.w	r2, #16
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fb02 	bl	8000500 <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f9bf 	bl	8002282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f9c6 	bl	8002296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00c      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0201 	mvn.w	r2, #1
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f99d 	bl	800226e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00c      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fc90 	bl	8002878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f997 	bl	80022aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00c      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0220 	mvn.w	r2, #32
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fc62 	bl	8002864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e088      	b.n	80020d8 <HAL_TIM_IC_ConfigChannel+0x130>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d11b      	bne.n	800200c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8001fe4:	f000 f9f2 	bl	80023cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 020c 	bic.w	r2, r2, #12
 8001ff6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6999      	ldr	r1, [r3, #24]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	619a      	str	r2, [r3, #24]
 800200a:	e060      	b.n	80020ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b04      	cmp	r3, #4
 8002010:	d11c      	bne.n	800204c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002022:	f000 fa6a 	bl	80024fa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002034:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6999      	ldr	r1, [r3, #24]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	021a      	lsls	r2, r3, #8
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	619a      	str	r2, [r3, #24]
 800204a:	e040      	b.n	80020ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b08      	cmp	r3, #8
 8002050:	d11b      	bne.n	800208a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002062:	f000 fab7 	bl	80025d4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 020c 	bic.w	r2, r2, #12
 8002074:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69d9      	ldr	r1, [r3, #28]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	61da      	str	r2, [r3, #28]
 8002088:	e021      	b.n	80020ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0c      	cmp	r3, #12
 800208e:	d11c      	bne.n	80020ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80020a0:	f000 fad4 	bl	800264c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80020b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	69d9      	ldr	r1, [r3, #28]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	021a      	lsls	r2, r3, #8
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	61da      	str	r2, [r3, #28]
 80020c8:	e001      	b.n	80020ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_TIM_ConfigClockSource+0x1c>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0b4      	b.n	8002266 <HAL_TIM_ConfigClockSource+0x186>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800211a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002134:	d03e      	beq.n	80021b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800213a:	f200 8087 	bhi.w	800224c <HAL_TIM_ConfigClockSource+0x16c>
 800213e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002142:	f000 8086 	beq.w	8002252 <HAL_TIM_ConfigClockSource+0x172>
 8002146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800214a:	d87f      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x16c>
 800214c:	2b70      	cmp	r3, #112	@ 0x70
 800214e:	d01a      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0xa6>
 8002150:	2b70      	cmp	r3, #112	@ 0x70
 8002152:	d87b      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x16c>
 8002154:	2b60      	cmp	r3, #96	@ 0x60
 8002156:	d050      	beq.n	80021fa <HAL_TIM_ConfigClockSource+0x11a>
 8002158:	2b60      	cmp	r3, #96	@ 0x60
 800215a:	d877      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x16c>
 800215c:	2b50      	cmp	r3, #80	@ 0x50
 800215e:	d03c      	beq.n	80021da <HAL_TIM_ConfigClockSource+0xfa>
 8002160:	2b50      	cmp	r3, #80	@ 0x50
 8002162:	d873      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x16c>
 8002164:	2b40      	cmp	r3, #64	@ 0x40
 8002166:	d058      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x13a>
 8002168:	2b40      	cmp	r3, #64	@ 0x40
 800216a:	d86f      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x16c>
 800216c:	2b30      	cmp	r3, #48	@ 0x30
 800216e:	d064      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x15a>
 8002170:	2b30      	cmp	r3, #48	@ 0x30
 8002172:	d86b      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x16c>
 8002174:	2b20      	cmp	r3, #32
 8002176:	d060      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x15a>
 8002178:	2b20      	cmp	r3, #32
 800217a:	d867      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x16c>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d05c      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x15a>
 8002180:	2b10      	cmp	r3, #16
 8002182:	d05a      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x15a>
 8002184:	e062      	b.n	800224c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002196:	f000 fab1 	bl	80026fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80021a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	609a      	str	r2, [r3, #8]
      break;
 80021b2:	e04f      	b.n	8002254 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021c4:	f000 fa9a 	bl	80026fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021d6:	609a      	str	r2, [r3, #8]
      break;
 80021d8:	e03c      	b.n	8002254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021e6:	461a      	mov	r2, r3
 80021e8:	f000 f958 	bl	800249c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2150      	movs	r1, #80	@ 0x50
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fa67 	bl	80026c6 <TIM_ITRx_SetConfig>
      break;
 80021f8:	e02c      	b.n	8002254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002206:	461a      	mov	r2, r3
 8002208:	f000 f9b4 	bl	8002574 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2160      	movs	r1, #96	@ 0x60
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fa57 	bl	80026c6 <TIM_ITRx_SetConfig>
      break;
 8002218:	e01c      	b.n	8002254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002226:	461a      	mov	r2, r3
 8002228:	f000 f938 	bl	800249c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2140      	movs	r1, #64	@ 0x40
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fa47 	bl	80026c6 <TIM_ITRx_SetConfig>
      break;
 8002238:	e00c      	b.n	8002254 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f000 fa3e 	bl	80026c6 <TIM_ITRx_SetConfig>
      break;
 800224a:	e003      	b.n	8002254 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
      break;
 8002250:	e000      	b.n	8002254 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002252:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a37      	ldr	r2, [pc, #220]	@ (80023b0 <TIM_Base_SetConfig+0xf0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00f      	beq.n	80022f8 <TIM_Base_SetConfig+0x38>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022de:	d00b      	beq.n	80022f8 <TIM_Base_SetConfig+0x38>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a34      	ldr	r2, [pc, #208]	@ (80023b4 <TIM_Base_SetConfig+0xf4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d007      	beq.n	80022f8 <TIM_Base_SetConfig+0x38>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a33      	ldr	r2, [pc, #204]	@ (80023b8 <TIM_Base_SetConfig+0xf8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <TIM_Base_SetConfig+0x38>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a32      	ldr	r2, [pc, #200]	@ (80023bc <TIM_Base_SetConfig+0xfc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d108      	bne.n	800230a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a28      	ldr	r2, [pc, #160]	@ (80023b0 <TIM_Base_SetConfig+0xf0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01b      	beq.n	800234a <TIM_Base_SetConfig+0x8a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002318:	d017      	beq.n	800234a <TIM_Base_SetConfig+0x8a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a25      	ldr	r2, [pc, #148]	@ (80023b4 <TIM_Base_SetConfig+0xf4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <TIM_Base_SetConfig+0x8a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a24      	ldr	r2, [pc, #144]	@ (80023b8 <TIM_Base_SetConfig+0xf8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00f      	beq.n	800234a <TIM_Base_SetConfig+0x8a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a23      	ldr	r2, [pc, #140]	@ (80023bc <TIM_Base_SetConfig+0xfc>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00b      	beq.n	800234a <TIM_Base_SetConfig+0x8a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a22      	ldr	r2, [pc, #136]	@ (80023c0 <TIM_Base_SetConfig+0x100>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <TIM_Base_SetConfig+0x8a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a21      	ldr	r2, [pc, #132]	@ (80023c4 <TIM_Base_SetConfig+0x104>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d003      	beq.n	800234a <TIM_Base_SetConfig+0x8a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a20      	ldr	r2, [pc, #128]	@ (80023c8 <TIM_Base_SetConfig+0x108>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d108      	bne.n	800235c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a0c      	ldr	r2, [pc, #48]	@ (80023b0 <TIM_Base_SetConfig+0xf0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d103      	bne.n	800238a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f043 0204 	orr.w	r2, r3, #4
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	601a      	str	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40010000 	.word	0x40010000
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800
 80023bc:	40000c00 	.word	0x40000c00
 80023c0:	40014000 	.word	0x40014000
 80023c4:	40014400 	.word	0x40014400
 80023c8:	40014800 	.word	0x40014800

080023cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f023 0201 	bic.w	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4a24      	ldr	r2, [pc, #144]	@ (8002488 <TIM_TI1_SetConfig+0xbc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <TIM_TI1_SetConfig+0x56>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002400:	d00f      	beq.n	8002422 <TIM_TI1_SetConfig+0x56>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4a21      	ldr	r2, [pc, #132]	@ (800248c <TIM_TI1_SetConfig+0xc0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00b      	beq.n	8002422 <TIM_TI1_SetConfig+0x56>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a20      	ldr	r2, [pc, #128]	@ (8002490 <TIM_TI1_SetConfig+0xc4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <TIM_TI1_SetConfig+0x56>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a1f      	ldr	r2, [pc, #124]	@ (8002494 <TIM_TI1_SetConfig+0xc8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d003      	beq.n	8002422 <TIM_TI1_SetConfig+0x56>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4a1e      	ldr	r2, [pc, #120]	@ (8002498 <TIM_TI1_SetConfig+0xcc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <TIM_TI1_SetConfig+0x5a>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <TIM_TI1_SetConfig+0x5c>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f023 0303 	bic.w	r3, r3, #3
 8002432:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	e003      	b.n	8002446 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800244c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	b2db      	uxtb	r3, r3
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f023 030a 	bic.w	r3, r3, #10
 8002460:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f003 030a 	and.w	r3, r3, #10
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	621a      	str	r2, [r3, #32]
}
 800247a:	bf00      	nop
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40010000 	.word	0x40010000
 800248c:	40000400 	.word	0x40000400
 8002490:	40000800 	.word	0x40000800
 8002494:	40000c00 	.word	0x40000c00
 8002498:	40014000 	.word	0x40014000

0800249c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	f023 0201 	bic.w	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f023 030a 	bic.w	r3, r3, #10
 80024d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	621a      	str	r2, [r3, #32]
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b087      	sub	sp, #28
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	f023 0210 	bic.w	r2, r3, #16
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	031b      	lsls	r3, r3, #12
 800253e:	b29b      	uxth	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800254c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	621a      	str	r2, [r3, #32]
}
 8002568:	bf00      	nop
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	f023 0210 	bic.w	r2, r3, #16
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800259e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	031b      	lsls	r3, r3, #12
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80025b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	621a      	str	r2, [r3, #32]
}
 80025c8:	bf00      	nop
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f023 0303 	bic.w	r3, r3, #3
 8002600:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002610:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	b2db      	uxtb	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002624:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	621a      	str	r2, [r3, #32]
}
 8002640:	bf00      	nop
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002678:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800268a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	031b      	lsls	r3, r3, #12
 8002690:	b29b      	uxth	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800269e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	031b      	lsls	r3, r3, #12
 80026a4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	621a      	str	r2, [r3, #32]
}
 80026ba:	bf00      	nop
 80026bc:	371c      	adds	r7, #28
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f043 0307 	orr.w	r3, r3, #7
 80026e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	021a      	lsls	r2, r3, #8
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	431a      	orrs	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	609a      	str	r2, [r3, #8]
}
 8002730:	bf00      	nop
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2201      	movs	r2, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a1a      	ldr	r2, [r3, #32]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	43db      	mvns	r3, r3
 800275e:	401a      	ands	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a1a      	ldr	r2, [r3, #32]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	431a      	orrs	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	621a      	str	r2, [r3, #32]
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800279c:	2302      	movs	r3, #2
 800279e:	e050      	b.n	8002842 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1c      	ldr	r2, [pc, #112]	@ (8002850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d018      	beq.n	8002816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ec:	d013      	beq.n	8002816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00e      	beq.n	8002816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a16      	ldr	r2, [pc, #88]	@ (8002858 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a15      	ldr	r2, [pc, #84]	@ (800285c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d004      	beq.n	8002816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a13      	ldr	r2, [pc, #76]	@ (8002860 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10c      	bne.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800281c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	4313      	orrs	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40010000 	.word	0x40010000
 8002854:	40000400 	.word	0x40000400
 8002858:	40000800 	.word	0x40000800
 800285c:	40000c00 	.word	0x40000c00
 8002860:	40014000 	.word	0x40014000

08002864 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <memset>:
 800288c:	4402      	add	r2, r0
 800288e:	4603      	mov	r3, r0
 8002890:	4293      	cmp	r3, r2
 8002892:	d100      	bne.n	8002896 <memset+0xa>
 8002894:	4770      	bx	lr
 8002896:	f803 1b01 	strb.w	r1, [r3], #1
 800289a:	e7f9      	b.n	8002890 <memset+0x4>

0800289c <__libc_init_array>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	4d0d      	ldr	r5, [pc, #52]	@ (80028d4 <__libc_init_array+0x38>)
 80028a0:	4c0d      	ldr	r4, [pc, #52]	@ (80028d8 <__libc_init_array+0x3c>)
 80028a2:	1b64      	subs	r4, r4, r5
 80028a4:	10a4      	asrs	r4, r4, #2
 80028a6:	2600      	movs	r6, #0
 80028a8:	42a6      	cmp	r6, r4
 80028aa:	d109      	bne.n	80028c0 <__libc_init_array+0x24>
 80028ac:	4d0b      	ldr	r5, [pc, #44]	@ (80028dc <__libc_init_array+0x40>)
 80028ae:	4c0c      	ldr	r4, [pc, #48]	@ (80028e0 <__libc_init_array+0x44>)
 80028b0:	f000 f818 	bl	80028e4 <_init>
 80028b4:	1b64      	subs	r4, r4, r5
 80028b6:	10a4      	asrs	r4, r4, #2
 80028b8:	2600      	movs	r6, #0
 80028ba:	42a6      	cmp	r6, r4
 80028bc:	d105      	bne.n	80028ca <__libc_init_array+0x2e>
 80028be:	bd70      	pop	{r4, r5, r6, pc}
 80028c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c4:	4798      	blx	r3
 80028c6:	3601      	adds	r6, #1
 80028c8:	e7ee      	b.n	80028a8 <__libc_init_array+0xc>
 80028ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ce:	4798      	blx	r3
 80028d0:	3601      	adds	r6, #1
 80028d2:	e7f2      	b.n	80028ba <__libc_init_array+0x1e>
 80028d4:	08002914 	.word	0x08002914
 80028d8:	08002914 	.word	0x08002914
 80028dc:	08002914 	.word	0x08002914
 80028e0:	08002918 	.word	0x08002918

080028e4 <_init>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	bf00      	nop
 80028e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ea:	bc08      	pop	{r3}
 80028ec:	469e      	mov	lr, r3
 80028ee:	4770      	bx	lr

080028f0 <_fini>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	bf00      	nop
 80028f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f6:	bc08      	pop	{r3}
 80028f8:	469e      	mov	lr, r3
 80028fa:	4770      	bx	lr
