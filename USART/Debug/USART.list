
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f38  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080030d8  080030d8  000040d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800317c  0800317c  0000507c  2**0
                  CONTENTS
  4 .ARM          00000008  0800317c  0800317c  0000417c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003184  08003184  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003184  08003184  00004184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003188  08003188  00004188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800318c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000007c  08003208  0000507c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08003208  000053e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003080  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c0f  00000000  00000000  0000812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  00008d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001b6  00000000  00000000  00008fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f7e4  00000000  00000000  00009166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e36  00000000  00000000  0001894a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000552e6  00000000  00000000  0001c780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00071a66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e4c  00000000  00000000  00071aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000728f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080030c0 	.word	0x080030c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080030c0 	.word	0x080030c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	2302      	movs	r3, #2
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	2302      	movs	r3, #2
 8000d88:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d8a:	4b34      	ldr	r3, [pc, #208]	@ (8000e5c <SystemCoreClockUpdate+0xec>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	d011      	beq.n	8000dbe <SystemCoreClockUpdate+0x4e>
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d844      	bhi.n	8000e2a <SystemCoreClockUpdate+0xba>
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <SystemCoreClockUpdate+0x3e>
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d004      	beq.n	8000db6 <SystemCoreClockUpdate+0x46>
 8000dac:	e03d      	b.n	8000e2a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000dae:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <SystemCoreClockUpdate+0xf0>)
 8000db0:	4a2c      	ldr	r2, [pc, #176]	@ (8000e64 <SystemCoreClockUpdate+0xf4>)
 8000db2:	601a      	str	r2, [r3, #0]
      break;
 8000db4:	e03d      	b.n	8000e32 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000db6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <SystemCoreClockUpdate+0xf0>)
 8000db8:	4a2b      	ldr	r2, [pc, #172]	@ (8000e68 <SystemCoreClockUpdate+0xf8>)
 8000dba:	601a      	str	r2, [r3, #0]
      break;
 8000dbc:	e039      	b.n	8000e32 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000dbe:	4b27      	ldr	r3, [pc, #156]	@ (8000e5c <SystemCoreClockUpdate+0xec>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	0d9b      	lsrs	r3, r3, #22
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000dca:	4b24      	ldr	r3, [pc, #144]	@ (8000e5c <SystemCoreClockUpdate+0xec>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000dd2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00c      	beq.n	8000df4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000dda:	4a23      	ldr	r2, [pc, #140]	@ (8000e68 <SystemCoreClockUpdate+0xf8>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e5c <SystemCoreClockUpdate+0xec>)
 8000de4:	6852      	ldr	r2, [r2, #4]
 8000de6:	0992      	lsrs	r2, r2, #6
 8000de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dec:	fb02 f303 	mul.w	r3, r2, r3
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e00b      	b.n	8000e0c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000df4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <SystemCoreClockUpdate+0xf4>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfc:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <SystemCoreClockUpdate+0xec>)
 8000dfe:	6852      	ldr	r2, [r2, #4]
 8000e00:	0992      	lsrs	r2, r2, #6
 8000e02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000e0c:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <SystemCoreClockUpdate+0xec>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	0c1b      	lsrs	r3, r3, #16
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	3301      	adds	r3, #1
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e24:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <SystemCoreClockUpdate+0xf0>)
 8000e26:	6013      	str	r3, [r2, #0]
      break;
 8000e28:	e003      	b.n	8000e32 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <SystemCoreClockUpdate+0xf0>)
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <SystemCoreClockUpdate+0xf4>)
 8000e2e:	601a      	str	r2, [r3, #0]
      break;
 8000e30:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <SystemCoreClockUpdate+0xec>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	f003 030f 	and.w	r3, r3, #15
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e6c <SystemCoreClockUpdate+0xfc>)
 8000e3e:	5cd3      	ldrb	r3, [r2, r3]
 8000e40:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <SystemCoreClockUpdate+0xf0>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <SystemCoreClockUpdate+0xf0>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	20000000 	.word	0x20000000
 8000e64:	00f42400 	.word	0x00f42400
 8000e68:	007a1200 	.word	0x007a1200
 8000e6c:	08003130 	.word	0x08003130

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	@ (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	@ (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <GetTick>:
#include "Delay.h"

uint32_t uwTick = 0;

static uint32_t GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000098 	.word	0x20000098

08000edc <Delay_Init>:

// Inicializamos Systick e interrupción
void Delay_Init(uint32_t ticks)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	SysTick -> CTRL &= ~SysTick_CTRL_ENABLE_Msk;	//Dehabilitamos systick
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <Delay_Init+0x54>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <Delay_Init+0x54>)
 8000eea:	f023 0301 	bic.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]
	SysTick -> LOAD = ticks - 1;				 	//Cargamos valor LOAD
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8000f30 <Delay_Init+0x54>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	6053      	str	r3, [r2, #4]
	SysTick -> CTRL |= 1U<<2; 						//Escogemos fuente de reloj
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <Delay_Init+0x54>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f30 <Delay_Init+0x54>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(SysTick_IRQn, 7);				//Asignamos prioridad de 7
 8000f04:	2107      	movs	r1, #7
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0a:	f7ff ffb1 	bl	8000e70 <__NVIC_SetPriority>
	SysTick -> CTRL |= 1<<1;						//Activamos interrupción por conteo
 8000f0e:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <Delay_Init+0x54>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a07      	ldr	r2, [pc, #28]	@ (8000f30 <Delay_Init+0x54>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6013      	str	r3, [r2, #0]
	SysTick -> CTRL |= SysTick_CTRL_ENABLE_Msk;		//Habilitamos conteo
 8000f1a:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <Delay_Init+0x54>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <Delay_Init+0x54>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6013      	str	r3, [r2, #0]
	return;
 8000f26:	bf00      	nop
}
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <delay_ms>:
}

#endif

void delay_ms(uint32_t delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	{
		delay_us(1000);
	}
#else

	int32_t tickstart = GetTick();
 8000f3c:	f7ff ffc2 	bl	8000ec4 <GetTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	60fb      	str	r3, [r7, #12]
	uint32_t wait = delay;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	60bb      	str	r3, [r7, #8]
	while((GetTick() - tickstart) < wait);
 8000f48:	bf00      	nop
 8000f4a:	f7ff ffbb 	bl	8000ec4 <GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d8f7      	bhi.n	8000f4a <delay_ms+0x16>

#endif

}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <__NVIC_EnableIRQ>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	@ (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_ClearPendingIRQ>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0c      	blt.n	8000fcc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <__NVIC_ClearPendingIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	3360      	adds	r3, #96	@ 0x60
 8000fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <GPIO_Input_Config>:
 * In main(): GPIO_Input_Config(GPIOB, 13, PULL_NONE , &exti13);
 *
 */

void GPIO_Input_Config(GPIO_TypeDef  *GPIOx, uint8_t Pin, Input_Trigger_t Pull, EXTI_Config_t *exti_t)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	72fb      	strb	r3, [r7, #11]
 800103e:	4613      	mov	r3, r2
 8001040:	72bb      	strb	r3, [r7, #10]
	//Clock
	ENABLE_GPIO_CLOCK(GPIOx);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4a46      	ldr	r2, [pc, #280]	@ (8001160 <GPIO_Input_Config+0x130>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d106      	bne.n	8001058 <GPIO_Input_Config+0x28>
 800104a:	4b46      	ldr	r3, [pc, #280]	@ (8001164 <GPIO_Input_Config+0x134>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a45      	ldr	r2, [pc, #276]	@ (8001164 <GPIO_Input_Config+0x134>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	e035      	b.n	80010c4 <GPIO_Input_Config+0x94>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4a43      	ldr	r2, [pc, #268]	@ (8001168 <GPIO_Input_Config+0x138>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d106      	bne.n	800106e <GPIO_Input_Config+0x3e>
 8001060:	4b40      	ldr	r3, [pc, #256]	@ (8001164 <GPIO_Input_Config+0x134>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001064:	4a3f      	ldr	r2, [pc, #252]	@ (8001164 <GPIO_Input_Config+0x134>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	6313      	str	r3, [r2, #48]	@ 0x30
 800106c:	e02a      	b.n	80010c4 <GPIO_Input_Config+0x94>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4a3e      	ldr	r2, [pc, #248]	@ (800116c <GPIO_Input_Config+0x13c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d106      	bne.n	8001084 <GPIO_Input_Config+0x54>
 8001076:	4b3b      	ldr	r3, [pc, #236]	@ (8001164 <GPIO_Input_Config+0x134>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a3a      	ldr	r2, [pc, #232]	@ (8001164 <GPIO_Input_Config+0x134>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	e01f      	b.n	80010c4 <GPIO_Input_Config+0x94>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4a3a      	ldr	r2, [pc, #232]	@ (8001170 <GPIO_Input_Config+0x140>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d106      	bne.n	800109a <GPIO_Input_Config+0x6a>
 800108c:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <GPIO_Input_Config+0x134>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	4a34      	ldr	r2, [pc, #208]	@ (8001164 <GPIO_Input_Config+0x134>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6313      	str	r3, [r2, #48]	@ 0x30
 8001098:	e014      	b.n	80010c4 <GPIO_Input_Config+0x94>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4a35      	ldr	r2, [pc, #212]	@ (8001174 <GPIO_Input_Config+0x144>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d106      	bne.n	80010b0 <GPIO_Input_Config+0x80>
 80010a2:	4b30      	ldr	r3, [pc, #192]	@ (8001164 <GPIO_Input_Config+0x134>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001164 <GPIO_Input_Config+0x134>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	e009      	b.n	80010c4 <GPIO_Input_Config+0x94>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4a31      	ldr	r2, [pc, #196]	@ (8001178 <GPIO_Input_Config+0x148>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d105      	bne.n	80010c4 <GPIO_Input_Config+0x94>
 80010b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <GPIO_Input_Config+0x134>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	4a29      	ldr	r2, [pc, #164]	@ (8001164 <GPIO_Input_Config+0x134>)
 80010be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c2:	6313      	str	r3, [r2, #48]	@ 0x30

	//Mode
	GPIOx->MODER &= ~(MODER_MASK<<(2*Pin));
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	7afb      	ldrb	r3, [r7, #11]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2103      	movs	r1, #3
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	401a      	ands	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (MODER_INPUT<<(2*Pin));
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	601a      	str	r2, [r3, #0]

	//PuLL
	GPIOx->PUPDR &= ~(PUPDR_MASK<<(2*Pin));
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	7afb      	ldrb	r3, [r7, #11]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2103      	movs	r1, #3
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	401a      	ands	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	60da      	str	r2, [r3, #12]

	switch(Pull)
 80010f8:	7abb      	ldrb	r3, [r7, #10]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d012      	beq.n	8001124 <GPIO_Input_Config+0xf4>
 80010fe:	2b02      	cmp	r3, #2
 8001100:	dc1c      	bgt.n	800113c <GPIO_Input_Config+0x10c>
 8001102:	2b00      	cmp	r3, #0
 8001104:	d01c      	beq.n	8001140 <GPIO_Input_Config+0x110>
 8001106:	2b01      	cmp	r3, #1
 8001108:	d000      	beq.n	800110c <GPIO_Input_Config+0xdc>
			GPIOx->PUPDR &= ~(PUPDR_PU<<(2*Pin));
			break;
		case PULL_PD:
			GPIOx->PUPDR &= ~(PUPDR_PD<<(2*Pin));
			break;
		default: break;
 800110a:	e017      	b.n	800113c <GPIO_Input_Config+0x10c>
			GPIOx->PUPDR &= ~(PUPDR_PU<<(2*Pin));
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	7afb      	ldrb	r3, [r7, #11]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	401a      	ands	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	60da      	str	r2, [r3, #12]
			break;
 8001122:	e00e      	b.n	8001142 <GPIO_Input_Config+0x112>
			GPIOx->PUPDR &= ~(PUPDR_PD<<(2*Pin));
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2102      	movs	r1, #2
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	401a      	ands	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	60da      	str	r2, [r3, #12]
			break;
 800113a:	e002      	b.n	8001142 <GPIO_Input_Config+0x112>
		default: break;
 800113c:	bf00      	nop
 800113e:	e000      	b.n	8001142 <GPIO_Input_Config+0x112>
			break;
 8001140:	bf00      	nop
	}

	//EXTI configuration

	if (exti_t->en)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <GPIO_Input_Config+0x128>
	{
		//Exti_Config
		exti_t->exti_pin = Pin;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7afa      	ldrb	r2, [r7, #11]
 800114e:	705a      	strb	r2, [r3, #1]
		EXTI_Config(GPIOx , exti_t);
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 f904 	bl	8001360 <EXTI_Config>
	else
	{
		//Nothing
	}

}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020000 	.word	0x40020000
 8001164:	40023800 	.word	0x40023800
 8001168:	40020400 	.word	0x40020400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40021c00 	.word	0x40021c00

0800117c <GPIO_Output_Config>:
 *
 * In main(): GPIO_Output_Config(GPIOA, 8, PUPDR_NONE, OSPEEDR_VERYHIGH, OTYPER_PP);
 */

void GPIO_Output_Config(GPIO_TypeDef  *GPIOx, uint8_t Pin, uint8_t Pull, uint8_t Speed, uint8_t output_type)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	4608      	mov	r0, r1
 8001186:	4611      	mov	r1, r2
 8001188:	461a      	mov	r2, r3
 800118a:	4603      	mov	r3, r0
 800118c:	70fb      	strb	r3, [r7, #3]
 800118e:	460b      	mov	r3, r1
 8001190:	70bb      	strb	r3, [r7, #2]
 8001192:	4613      	mov	r3, r2
 8001194:	707b      	strb	r3, [r7, #1]
	//Clock
	ENABLE_GPIO_CLOCK(GPIOx);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4b      	ldr	r2, [pc, #300]	@ (80012c8 <GPIO_Output_Config+0x14c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d106      	bne.n	80011ac <GPIO_Output_Config+0x30>
 800119e:	4b4b      	ldr	r3, [pc, #300]	@ (80012cc <GPIO_Output_Config+0x150>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a4a      	ldr	r2, [pc, #296]	@ (80012cc <GPIO_Output_Config+0x150>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	e035      	b.n	8001218 <GPIO_Output_Config+0x9c>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a48      	ldr	r2, [pc, #288]	@ (80012d0 <GPIO_Output_Config+0x154>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d106      	bne.n	80011c2 <GPIO_Output_Config+0x46>
 80011b4:	4b45      	ldr	r3, [pc, #276]	@ (80012cc <GPIO_Output_Config+0x150>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b8:	4a44      	ldr	r2, [pc, #272]	@ (80012cc <GPIO_Output_Config+0x150>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c0:	e02a      	b.n	8001218 <GPIO_Output_Config+0x9c>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a43      	ldr	r2, [pc, #268]	@ (80012d4 <GPIO_Output_Config+0x158>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d106      	bne.n	80011d8 <GPIO_Output_Config+0x5c>
 80011ca:	4b40      	ldr	r3, [pc, #256]	@ (80012cc <GPIO_Output_Config+0x150>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a3f      	ldr	r2, [pc, #252]	@ (80012cc <GPIO_Output_Config+0x150>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	e01f      	b.n	8001218 <GPIO_Output_Config+0x9c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a3f      	ldr	r2, [pc, #252]	@ (80012d8 <GPIO_Output_Config+0x15c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d106      	bne.n	80011ee <GPIO_Output_Config+0x72>
 80011e0:	4b3a      	ldr	r3, [pc, #232]	@ (80012cc <GPIO_Output_Config+0x150>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e4:	4a39      	ldr	r2, [pc, #228]	@ (80012cc <GPIO_Output_Config+0x150>)
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ec:	e014      	b.n	8001218 <GPIO_Output_Config+0x9c>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a3a      	ldr	r2, [pc, #232]	@ (80012dc <GPIO_Output_Config+0x160>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d106      	bne.n	8001204 <GPIO_Output_Config+0x88>
 80011f6:	4b35      	ldr	r3, [pc, #212]	@ (80012cc <GPIO_Output_Config+0x150>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a34      	ldr	r2, [pc, #208]	@ (80012cc <GPIO_Output_Config+0x150>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	e009      	b.n	8001218 <GPIO_Output_Config+0x9c>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a36      	ldr	r2, [pc, #216]	@ (80012e0 <GPIO_Output_Config+0x164>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d105      	bne.n	8001218 <GPIO_Output_Config+0x9c>
 800120c:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <GPIO_Output_Config+0x150>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001210:	4a2e      	ldr	r2, [pc, #184]	@ (80012cc <GPIO_Output_Config+0x150>)
 8001212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001216:	6313      	str	r3, [r2, #48]	@ 0x30

	//Mode
	GPIOx->MODER &= ~(MODER_MASK<<(2*Pin));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2103      	movs	r1, #3
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	401a      	ands	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (MODER_OUTPUT<<(2*Pin));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	601a      	str	r2, [r3, #0]

	//Pull
	GPIOx->PUPDR &= ~(PUPDR_MASK<<(2*Pin));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2103      	movs	r1, #3
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	401a      	ands	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (Pull<<(2*Pin));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	78b9      	ldrb	r1, [r7, #2]
 800125e:	78fa      	ldrb	r2, [r7, #3]
 8001260:	0052      	lsls	r2, r2, #1
 8001262:	fa01 f202 	lsl.w	r2, r1, r2
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	60da      	str	r2, [r3, #12]

	//Speed
	GPIOx->OSPEEDR &= ~(OSPEEDR_MASK<<(2*Pin));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2103      	movs	r1, #3
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	401a      	ands	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]
	GPIOx->OSPEEDR |= (Speed<<(2*Pin));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	7879      	ldrb	r1, [r7, #1]
 8001288:	78fa      	ldrb	r2, [r7, #3]
 800128a:	0052      	lsls	r2, r2, #1
 800128c:	fa01 f202 	lsl.w	r2, r1, r2
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	609a      	str	r2, [r3, #8]

	//Type of output
	GPIOx->OTYPER &= ~(OTYPER_MASK<<Pin);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	78fb      	ldrb	r3, [r7, #3]
 800129c:	2103      	movs	r1, #3
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	401a      	ands	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	605a      	str	r2, [r3, #4]
	GPIOx->OTYPER |= (output_type<<Pin);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	7c39      	ldrb	r1, [r7, #16]
 80012b0:	78fa      	ldrb	r2, [r7, #3]
 80012b2:	fa01 f202 	lsl.w	r2, r1, r2
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021c00 	.word	0x40021c00

080012e4 <GPIO_Write_Toggle>:
 *
 * GPIO_Write_Toggle(GPIOA, 6);
 */

void GPIO_Write_Toggle(GPIO_TypeDef* GPIOx, uint8_t GPIO_Pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]
	uint8_t param = CHECK_OUTPUT(GPIOx, GPIO_Pin);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa22 f303 	lsr.w	r3, r2, r3
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b01      	cmp	r3, #1
 8001302:	bf0c      	ite	eq
 8001304:	2301      	moveq	r3, #1
 8001306:	2300      	movne	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]
	uint8_t status_read = ((GPIOx->IDR) & (1<<GPIO_Pin));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4013      	ands	r3, r2
 800131e:	73bb      	strb	r3, [r7, #14]

	if(param)
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d016      	beq.n	8001354 <GPIO_Write_Toggle+0x70>
	{
		if(status_read != GPIO_PIN_RESET)
 8001326:	7bbb      	ldrb	r3, [r7, #14]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00a      	beq.n	8001342 <GPIO_Write_Toggle+0x5e>
		{
			GPIOx->BSRR |= (1 << (GPIO_Pin + 16U)); //RESET
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	78fa      	ldrb	r2, [r7, #3]
 8001332:	3210      	adds	r2, #16
 8001334:	2101      	movs	r1, #1
 8001336:	fa01 f202 	lsl.w	r2, r1, r2
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
	}
	else
	{
		//Nothing
	}
}
 8001340:	e008      	b.n	8001354 <GPIO_Write_Toggle+0x70>
			GPIOx->BSRR |= (1<<GPIO_Pin); //SET
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	78fa      	ldrb	r2, [r7, #3]
 8001348:	2101      	movs	r1, #1
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <EXTI_Config>:
 *
 *	EXTI_Config is in GPIO_Input_Config();
 */

void EXTI_Config(GPIO_TypeDef *GPIOx ,EXTI_Config_t *exti_t)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	uint8_t exti_index_r = (uint8_t)(exti_t->exti_pin/4.0);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f8d8 	bl	8000524 <__aeabi_i2d>
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4b9d      	ldr	r3, [pc, #628]	@ (80015f0 <EXTI_Config+0x290>)
 800137a:	f7ff fa67 	bl	800084c <__aeabi_ddiv>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fb49 	bl	8000a1c <__aeabi_d2uiz>
 800138a:	4603      	mov	r3, r0
 800138c:	73fb      	strb	r3, [r7, #15]
	uint8_t exti_index_p = (uint8_t)((exti_t->exti_pin%4)*4);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	785b      	ldrb	r3, [r3, #1]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	73bb      	strb	r3, [r7, #14]

	//Enable SYSCFG
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800139c:	4b95      	ldr	r3, [pc, #596]	@ (80015f4 <EXTI_Config+0x294>)
 800139e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a0:	4a94      	ldr	r2, [pc, #592]	@ (80015f4 <EXTI_Config+0x294>)
 80013a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a6:	6453      	str	r3, [r2, #68]	@ 0x44
	 * EXTICR[3] 12 13 	14 	15
	 *
	 */

	//Enable EXTI
	EXTI->IMR |= (1<<exti_t->exti_pin);
 80013a8:	4b93      	ldr	r3, [pc, #588]	@ (80015f8 <EXTI_Config+0x298>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	7852      	ldrb	r2, [r2, #1]
 80013b0:	4611      	mov	r1, r2
 80013b2:	2201      	movs	r2, #1
 80013b4:	408a      	lsls	r2, r1
 80013b6:	4611      	mov	r1, r2
 80013b8:	4a8f      	ldr	r2, [pc, #572]	@ (80015f8 <EXTI_Config+0x298>)
 80013ba:	430b      	orrs	r3, r1
 80013bc:	6013      	str	r3, [r2, #0]
	SYSCFG -> EXTICR[exti_index_r] &= ~(EXTI_PMASK<<(2*exti_t->exti_pin));
 80013be:	4a8f      	ldr	r2, [pc, #572]	@ (80015fc <EXTI_Config+0x29c>)
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	3302      	adds	r3, #2
 80013c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	785b      	ldrb	r3, [r3, #1]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	210f      	movs	r1, #15
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	4988      	ldr	r1, [pc, #544]	@ (80015fc <EXTI_Config+0x29c>)
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	4002      	ands	r2, r0
 80013de:	3302      	adds	r3, #2
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Conect Pin to Exti Pin

	if (GPIOx == GPIOA)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a86      	ldr	r2, [pc, #536]	@ (8001600 <EXTI_Config+0x2a0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d10a      	bne.n	8001402 <EXTI_Config+0xa2>
	{
		SYSCFG -> EXTICR[exti_index_r] |= (EXTI_PA<<exti_index_p);
 80013ec:	4883      	ldr	r0, [pc, #524]	@ (80015fc <EXTI_Config+0x29c>)
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	4982      	ldr	r1, [pc, #520]	@ (80015fc <EXTI_Config+0x29c>)
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	3202      	adds	r2, #2
 80013f6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80013fa:	3302      	adds	r3, #2
 80013fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001400:	e067      	b.n	80014d2 <EXTI_Config+0x172>
	}
	else if(GPIOx == GPIOB)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a7f      	ldr	r2, [pc, #508]	@ (8001604 <EXTI_Config+0x2a4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d110      	bne.n	800142c <EXTI_Config+0xcc>
	{
		SYSCFG -> EXTICR[exti_index_r] |= (EXTI_PB<<exti_index_p);
 800140a:	4a7c      	ldr	r2, [pc, #496]	@ (80015fc <EXTI_Config+0x29c>)
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	3302      	adds	r3, #2
 8001410:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	2101      	movs	r1, #1
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	4618      	mov	r0, r3
 800141e:	4977      	ldr	r1, [pc, #476]	@ (80015fc <EXTI_Config+0x29c>)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	4302      	orrs	r2, r0
 8001424:	3302      	adds	r3, #2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800142a:	e052      	b.n	80014d2 <EXTI_Config+0x172>
	}
	else if(GPIOx == GPIOC)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a76      	ldr	r2, [pc, #472]	@ (8001608 <EXTI_Config+0x2a8>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d110      	bne.n	8001456 <EXTI_Config+0xf6>
	{
		SYSCFG -> EXTICR[exti_index_r] |= (EXTI_PC<<exti_index_p);
 8001434:	4a71      	ldr	r2, [pc, #452]	@ (80015fc <EXTI_Config+0x29c>)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	3302      	adds	r3, #2
 800143a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800143e:	7bbb      	ldrb	r3, [r7, #14]
 8001440:	2102      	movs	r1, #2
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	4618      	mov	r0, r3
 8001448:	496c      	ldr	r1, [pc, #432]	@ (80015fc <EXTI_Config+0x29c>)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	4302      	orrs	r2, r0
 800144e:	3302      	adds	r3, #2
 8001450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001454:	e03d      	b.n	80014d2 <EXTI_Config+0x172>
	}
	else if(GPIOx == GPIOD)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a6c      	ldr	r2, [pc, #432]	@ (800160c <EXTI_Config+0x2ac>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d110      	bne.n	8001480 <EXTI_Config+0x120>
	{
		SYSCFG -> EXTICR[exti_index_r] |= (EXTI_PD<<exti_index_p);
 800145e:	4a67      	ldr	r2, [pc, #412]	@ (80015fc <EXTI_Config+0x29c>)
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	3302      	adds	r3, #2
 8001464:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	2103      	movs	r1, #3
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	4618      	mov	r0, r3
 8001472:	4962      	ldr	r1, [pc, #392]	@ (80015fc <EXTI_Config+0x29c>)
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	4302      	orrs	r2, r0
 8001478:	3302      	adds	r3, #2
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800147e:	e028      	b.n	80014d2 <EXTI_Config+0x172>
	}
	else if(GPIOx == GPIOE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a63      	ldr	r2, [pc, #396]	@ (8001610 <EXTI_Config+0x2b0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d110      	bne.n	80014aa <EXTI_Config+0x14a>
	{
		SYSCFG -> EXTICR[exti_index_r] |= (EXTI_PE<<exti_index_p);
 8001488:	4a5c      	ldr	r2, [pc, #368]	@ (80015fc <EXTI_Config+0x29c>)
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	3302      	adds	r3, #2
 800148e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	2104      	movs	r1, #4
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	4618      	mov	r0, r3
 800149c:	4957      	ldr	r1, [pc, #348]	@ (80015fc <EXTI_Config+0x29c>)
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	4302      	orrs	r2, r0
 80014a2:	3302      	adds	r3, #2
 80014a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80014a8:	e013      	b.n	80014d2 <EXTI_Config+0x172>
	}
	else if(GPIOx == GPIOH)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a59      	ldr	r2, [pc, #356]	@ (8001614 <EXTI_Config+0x2b4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10f      	bne.n	80014d2 <EXTI_Config+0x172>
	{
		SYSCFG -> EXTICR[exti_index_r] |= (EXTI_PH<<exti_index_p);
 80014b2:	4a52      	ldr	r2, [pc, #328]	@ (80015fc <EXTI_Config+0x29c>)
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	2107      	movs	r1, #7
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	494d      	ldr	r1, [pc, #308]	@ (80015fc <EXTI_Config+0x29c>)
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	4302      	orrs	r2, r0
 80014cc:	3302      	adds	r3, #2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	//Configure Trigger
	switch(exti_t->trigger)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	789b      	ldrb	r3, [r3, #2]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d01e      	beq.n	8001518 <EXTI_Config+0x1b8>
 80014da:	2b02      	cmp	r3, #2
 80014dc:	dc33      	bgt.n	8001546 <EXTI_Config+0x1e6>
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <EXTI_Config+0x188>
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d00c      	beq.n	8001500 <EXTI_Config+0x1a0>
		break;
	case FALLING_RISING_IT:
		EXTI -> FTSR |= (1<<exti_t->exti_pin);
		EXTI -> RTSR |= (1<<exti_t->exti_pin);
		break;
	default: break;
 80014e6:	e02e      	b.n	8001546 <EXTI_Config+0x1e6>
		EXTI -> FTSR |= (1<<exti_t->exti_pin);
 80014e8:	4b43      	ldr	r3, [pc, #268]	@ (80015f8 <EXTI_Config+0x298>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	7852      	ldrb	r2, [r2, #1]
 80014f0:	4611      	mov	r1, r2
 80014f2:	2201      	movs	r2, #1
 80014f4:	408a      	lsls	r2, r1
 80014f6:	4611      	mov	r1, r2
 80014f8:	4a3f      	ldr	r2, [pc, #252]	@ (80015f8 <EXTI_Config+0x298>)
 80014fa:	430b      	orrs	r3, r1
 80014fc:	60d3      	str	r3, [r2, #12]
		break;
 80014fe:	e023      	b.n	8001548 <EXTI_Config+0x1e8>
		EXTI -> FTSR |= (1<<exti_t->exti_pin);
 8001500:	4b3d      	ldr	r3, [pc, #244]	@ (80015f8 <EXTI_Config+0x298>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	7852      	ldrb	r2, [r2, #1]
 8001508:	4611      	mov	r1, r2
 800150a:	2201      	movs	r2, #1
 800150c:	408a      	lsls	r2, r1
 800150e:	4611      	mov	r1, r2
 8001510:	4a39      	ldr	r2, [pc, #228]	@ (80015f8 <EXTI_Config+0x298>)
 8001512:	430b      	orrs	r3, r1
 8001514:	60d3      	str	r3, [r2, #12]
		break;
 8001516:	e017      	b.n	8001548 <EXTI_Config+0x1e8>
		EXTI -> FTSR |= (1<<exti_t->exti_pin);
 8001518:	4b37      	ldr	r3, [pc, #220]	@ (80015f8 <EXTI_Config+0x298>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	7852      	ldrb	r2, [r2, #1]
 8001520:	4611      	mov	r1, r2
 8001522:	2201      	movs	r2, #1
 8001524:	408a      	lsls	r2, r1
 8001526:	4611      	mov	r1, r2
 8001528:	4a33      	ldr	r2, [pc, #204]	@ (80015f8 <EXTI_Config+0x298>)
 800152a:	430b      	orrs	r3, r1
 800152c:	60d3      	str	r3, [r2, #12]
		EXTI -> RTSR |= (1<<exti_t->exti_pin);
 800152e:	4b32      	ldr	r3, [pc, #200]	@ (80015f8 <EXTI_Config+0x298>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	7852      	ldrb	r2, [r2, #1]
 8001536:	4611      	mov	r1, r2
 8001538:	2201      	movs	r2, #1
 800153a:	408a      	lsls	r2, r1
 800153c:	4611      	mov	r1, r2
 800153e:	4a2e      	ldr	r2, [pc, #184]	@ (80015f8 <EXTI_Config+0x298>)
 8001540:	430b      	orrs	r3, r1
 8001542:	6093      	str	r3, [r2, #8]
		break;
 8001544:	e000      	b.n	8001548 <EXTI_Config+0x1e8>
	default: break;
 8001546:	bf00      	nop
	}

	//NVIC
	if(exti_t->exti_pin == 0)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	785b      	ldrb	r3, [r3, #1]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d117      	bne.n	8001580 <EXTI_Config+0x220>
	{
		NVIC_SetPriority(EXTI0_IRQn, exti_t->priority);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	78db      	ldrb	r3, [r3, #3]
 8001554:	4619      	mov	r1, r3
 8001556:	2006      	movs	r0, #6
 8001558:	f7ff fd40 	bl	8000fdc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI0_IRQn);
 800155c:	2006      	movs	r0, #6
 800155e:	f7ff fd01 	bl	8000f64 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 8001562:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <EXTI_Config+0x298>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	7852      	ldrb	r2, [r2, #1]
 800156a:	4611      	mov	r1, r2
 800156c:	2201      	movs	r2, #1
 800156e:	408a      	lsls	r2, r1
 8001570:	4611      	mov	r1, r2
 8001572:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <EXTI_Config+0x298>)
 8001574:	430b      	orrs	r3, r1
 8001576:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8001578:	2006      	movs	r0, #6
 800157a:	f7ff fd11 	bl	8000fa0 <__NVIC_ClearPendingIRQ>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
		EXTI -> PR |= (1<<exti_t->exti_pin);
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
	}

}
 800157e:	e0c2      	b.n	8001706 <EXTI_Config+0x3a6>
	else if(exti_t->exti_pin == 1)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d117      	bne.n	80015b8 <EXTI_Config+0x258>
		NVIC_SetPriority(EXTI1_IRQn, exti_t->priority);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	78db      	ldrb	r3, [r3, #3]
 800158c:	4619      	mov	r1, r3
 800158e:	2007      	movs	r0, #7
 8001590:	f7ff fd24 	bl	8000fdc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI1_IRQn);
 8001594:	2007      	movs	r0, #7
 8001596:	f7ff fce5 	bl	8000f64 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <EXTI_Config+0x298>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	7852      	ldrb	r2, [r2, #1]
 80015a2:	4611      	mov	r1, r2
 80015a4:	2201      	movs	r2, #1
 80015a6:	408a      	lsls	r2, r1
 80015a8:	4611      	mov	r1, r2
 80015aa:	4a13      	ldr	r2, [pc, #76]	@ (80015f8 <EXTI_Config+0x298>)
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80015b0:	2007      	movs	r0, #7
 80015b2:	f7ff fcf5 	bl	8000fa0 <__NVIC_ClearPendingIRQ>
}
 80015b6:	e0a6      	b.n	8001706 <EXTI_Config+0x3a6>
	else if(exti_t->exti_pin == 2)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	785b      	ldrb	r3, [r3, #1]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d12b      	bne.n	8001618 <EXTI_Config+0x2b8>
		NVIC_SetPriority(EXTI2_IRQn, exti_t->priority);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	78db      	ldrb	r3, [r3, #3]
 80015c4:	4619      	mov	r1, r3
 80015c6:	2008      	movs	r0, #8
 80015c8:	f7ff fd08 	bl	8000fdc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI2_IRQn);
 80015cc:	2008      	movs	r0, #8
 80015ce:	f7ff fcc9 	bl	8000f64 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <EXTI_Config+0x298>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	7852      	ldrb	r2, [r2, #1]
 80015da:	4611      	mov	r1, r2
 80015dc:	2201      	movs	r2, #1
 80015de:	408a      	lsls	r2, r1
 80015e0:	4611      	mov	r1, r2
 80015e2:	4a05      	ldr	r2, [pc, #20]	@ (80015f8 <EXTI_Config+0x298>)
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI2_IRQn);
 80015e8:	2008      	movs	r0, #8
 80015ea:	f7ff fcd9 	bl	8000fa0 <__NVIC_ClearPendingIRQ>
}
 80015ee:	e08a      	b.n	8001706 <EXTI_Config+0x3a6>
 80015f0:	40100000 	.word	0x40100000
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40013c00 	.word	0x40013c00
 80015fc:	40013800 	.word	0x40013800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400
 8001608:	40020800 	.word	0x40020800
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40021000 	.word	0x40021000
 8001614:	40021c00 	.word	0x40021c00
	else if(exti_t->exti_pin == 3)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	785b      	ldrb	r3, [r3, #1]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d117      	bne.n	8001650 <EXTI_Config+0x2f0>
		NVIC_SetPriority(EXTI3_IRQn, exti_t->priority);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	78db      	ldrb	r3, [r3, #3]
 8001624:	4619      	mov	r1, r3
 8001626:	2009      	movs	r0, #9
 8001628:	f7ff fcd8 	bl	8000fdc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI3_IRQn);
 800162c:	2009      	movs	r0, #9
 800162e:	f7ff fc99 	bl	8000f64 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 8001632:	4b37      	ldr	r3, [pc, #220]	@ (8001710 <EXTI_Config+0x3b0>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	7852      	ldrb	r2, [r2, #1]
 800163a:	4611      	mov	r1, r2
 800163c:	2201      	movs	r2, #1
 800163e:	408a      	lsls	r2, r1
 8001640:	4611      	mov	r1, r2
 8001642:	4a33      	ldr	r2, [pc, #204]	@ (8001710 <EXTI_Config+0x3b0>)
 8001644:	430b      	orrs	r3, r1
 8001646:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8001648:	2009      	movs	r0, #9
 800164a:	f7ff fca9 	bl	8000fa0 <__NVIC_ClearPendingIRQ>
}
 800164e:	e05a      	b.n	8001706 <EXTI_Config+0x3a6>
	else if(exti_t->exti_pin == 4)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	785b      	ldrb	r3, [r3, #1]
 8001654:	2b04      	cmp	r3, #4
 8001656:	d117      	bne.n	8001688 <EXTI_Config+0x328>
		NVIC_SetPriority(EXTI4_IRQn,exti_t->priority);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	78db      	ldrb	r3, [r3, #3]
 800165c:	4619      	mov	r1, r3
 800165e:	200a      	movs	r0, #10
 8001660:	f7ff fcbc 	bl	8000fdc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI4_IRQn);
 8001664:	200a      	movs	r0, #10
 8001666:	f7ff fc7d 	bl	8000f64 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 800166a:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <EXTI_Config+0x3b0>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	7852      	ldrb	r2, [r2, #1]
 8001672:	4611      	mov	r1, r2
 8001674:	2201      	movs	r2, #1
 8001676:	408a      	lsls	r2, r1
 8001678:	4611      	mov	r1, r2
 800167a:	4a25      	ldr	r2, [pc, #148]	@ (8001710 <EXTI_Config+0x3b0>)
 800167c:	430b      	orrs	r3, r1
 800167e:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8001680:	200a      	movs	r0, #10
 8001682:	f7ff fc8d 	bl	8000fa0 <__NVIC_ClearPendingIRQ>
}
 8001686:	e03e      	b.n	8001706 <EXTI_Config+0x3a6>
	else if((exti_t->exti_pin>=5) && (exti_t->exti_pin<=9))
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	785b      	ldrb	r3, [r3, #1]
 800168c:	2b04      	cmp	r3, #4
 800168e:	d91b      	bls.n	80016c8 <EXTI_Config+0x368>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	785b      	ldrb	r3, [r3, #1]
 8001694:	2b09      	cmp	r3, #9
 8001696:	d817      	bhi.n	80016c8 <EXTI_Config+0x368>
		NVIC_SetPriority(EXTI9_5_IRQn, exti_t->priority);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	78db      	ldrb	r3, [r3, #3]
 800169c:	4619      	mov	r1, r3
 800169e:	2017      	movs	r0, #23
 80016a0:	f7ff fc9c 	bl	8000fdc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016a4:	2017      	movs	r0, #23
 80016a6:	f7ff fc5d 	bl	8000f64 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 80016aa:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <EXTI_Config+0x3b0>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	7852      	ldrb	r2, [r2, #1]
 80016b2:	4611      	mov	r1, r2
 80016b4:	2201      	movs	r2, #1
 80016b6:	408a      	lsls	r2, r1
 80016b8:	4611      	mov	r1, r2
 80016ba:	4a15      	ldr	r2, [pc, #84]	@ (8001710 <EXTI_Config+0x3b0>)
 80016bc:	430b      	orrs	r3, r1
 80016be:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 80016c0:	2017      	movs	r0, #23
 80016c2:	f7ff fc6d 	bl	8000fa0 <__NVIC_ClearPendingIRQ>
}
 80016c6:	e01e      	b.n	8001706 <EXTI_Config+0x3a6>
	else if((exti_t->exti_pin>=10) && (exti_t->exti_pin<=15))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	2b09      	cmp	r3, #9
 80016ce:	d91a      	bls.n	8001706 <EXTI_Config+0x3a6>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d816      	bhi.n	8001706 <EXTI_Config+0x3a6>
		NVIC_SetPriority(EXTI15_10_IRQn, exti_t->priority);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	78db      	ldrb	r3, [r3, #3]
 80016dc:	4619      	mov	r1, r3
 80016de:	2028      	movs	r0, #40	@ 0x28
 80016e0:	f7ff fc7c 	bl	8000fdc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016e4:	2028      	movs	r0, #40	@ 0x28
 80016e6:	f7ff fc3d 	bl	8000f64 <__NVIC_EnableIRQ>
		EXTI -> PR |= (1<<exti_t->exti_pin);
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <EXTI_Config+0x3b0>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	7852      	ldrb	r2, [r2, #1]
 80016f2:	4611      	mov	r1, r2
 80016f4:	2201      	movs	r2, #1
 80016f6:	408a      	lsls	r2, r1
 80016f8:	4611      	mov	r1, r2
 80016fa:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <EXTI_Config+0x3b0>)
 80016fc:	430b      	orrs	r3, r1
 80016fe:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8001700:	2028      	movs	r0, #40	@ 0x28
 8001702:	f7ff fc4d 	bl	8000fa0 <__NVIC_ClearPendingIRQ>
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40013c00 	.word	0x40013c00

08001714 <flash_config>:
 */

#include "RCC.h"

void flash_config(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
	/**Se habilita por recomendación*/
	FLASH -> ACR |= 1<<9;
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <flash_config+0x4c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a10      	ldr	r2, [pc, #64]	@ (8001760 <flash_config+0x4c>)
 800171e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001722:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= 1<<10;
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <flash_config+0x4c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <flash_config+0x4c>)
 800172a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800172e:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= 1<<8;
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <flash_config+0x4c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <flash_config+0x4c>)
 8001736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173a:	6013      	str	r3, [r2, #0]

	/*Se habilitan algunos clocks*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <flash_config+0x50>)
 800173e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001740:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <flash_config+0x50>)
 8001742:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001746:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <flash_config+0x50>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <flash_config+0x50>)
 800174e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001752:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00
 8001764:	40023800 	.word	0x40023800

08001768 <HSI_Config_PLL>:
#endif

#ifdef PLL_ON

void HSI_Config_PLL(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	/*Activamos el HSE*/
	RCC->CR |= RCC_CR_HSION;
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HSI_Config_PLL+0x34>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HSI_Config_PLL+0x34>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]
	/*Esperamos a que esté listo el oscilador*/
	while(!(RCC->CR & RCC_CR_HSIRDY));
 8001778:	bf00      	nop
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HSI_Config_PLL+0x34>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f9      	beq.n	800177a <HSI_Config_PLL+0x12>
	/*Limpiamos la anterior fuente de reloj*/
	RCC->CFGR &=~ RCC_CFGR_SW_Msk;
 8001786:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HSI_Config_PLL+0x34>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HSI_Config_PLL+0x34>)
 800178c:	f023 0303 	bic.w	r3, r3, #3
 8001790:	6093      	str	r3, [r2, #8]
	/*Actualiza SystemCoreClock*/
	SystemCoreClockUpdate();
 8001792:	f7ff faed 	bl	8000d70 <SystemCoreClockUpdate>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800

080017a0 <HSE_Config_PLL>:

void HSE_Config_PLL(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	/*Activamos el HSE*/
	RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HSE_Config_PLL+0x34>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	@ (80017d4 <HSE_Config_PLL+0x34>)
 80017aa:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80017ae:	6013      	str	r3, [r2, #0]
	/*Esperamos a que esté listo el oscilador*/
	while(!(RCC->CR & RCC_CR_HSERDY));
 80017b0:	bf00      	nop
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <HSE_Config_PLL+0x34>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f9      	beq.n	80017b2 <HSE_Config_PLL+0x12>
	/*Limpiamos la anterior fuente de reloj*/
	RCC->CFGR &=~ RCC_CFGR_SW_Msk;
 80017be:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <HSE_Config_PLL+0x34>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <HSE_Config_PLL+0x34>)
 80017c4:	f023 0303 	bic.w	r3, r3, #3
 80017c8:	6093      	str	r3, [r2, #8]
	/*Actualiza SystemCoreClock*/
	SystemCoreClockUpdate();
 80017ca:	f7ff fad1 	bl	8000d70 <SystemCoreClockUpdate>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <PLL_Config>:

void PLL_Config(uint8_t Source)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
	/*Apagamos el PLL  por las dudas*/
	RCC -> CR &= ~RCC_CR_PLLON_Msk;
 80017e2:	4b56      	ldr	r3, [pc, #344]	@ (800193c <PLL_Config+0x164>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a55      	ldr	r2, [pc, #340]	@ (800193c <PLL_Config+0x164>)
 80017e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017ec:	6013      	str	r3, [r2, #0]

	/*Escojemos fuente de reloj para PLL*/

	switch(Source)
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d030      	beq.n	8001856 <PLL_Config+0x7e>
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d155      	bne.n	80018a4 <PLL_Config+0xcc>
	{
		case HSE_SOURCE:

			HSE_Config_PLL(); //FOSC= 8Mhz, M=/4, N=*168, P=1(/4)
 80017f8:	f7ff ffd2 	bl	80017a0 <HSE_Config_PLL>
			/*Configurar la fuente de reloj de PLL*/
			RCC -> PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 80017fc:	4b4f      	ldr	r3, [pc, #316]	@ (800193c <PLL_Config+0x164>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4a4e      	ldr	r2, [pc, #312]	@ (800193c <PLL_Config+0x164>)
 8001802:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001806:	6053      	str	r3, [r2, #4]

			/*Configurar M,N,P,Q*/

			// 8Mhz / 4 = 2Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 8001808:	4b4c      	ldr	r3, [pc, #304]	@ (800193c <PLL_Config+0x164>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a4b      	ldr	r2, [pc, #300]	@ (800193c <PLL_Config+0x164>)
 800180e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001812:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (4<<0); //M 1-2Mhz
 8001814:	4b49      	ldr	r3, [pc, #292]	@ (800193c <PLL_Config+0x164>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4a48      	ldr	r2, [pc, #288]	@ (800193c <PLL_Config+0x164>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6053      	str	r3, [r2, #4]

			//2Mhz * 84 = 168Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 8001820:	4b46      	ldr	r3, [pc, #280]	@ (800193c <PLL_Config+0x164>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4a45      	ldr	r2, [pc, #276]	@ (800193c <PLL_Config+0x164>)
 8001826:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800182a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800182e:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (168<<6);//N 192-472Mhz
 8001830:	4b42      	ldr	r3, [pc, #264]	@ (800193c <PLL_Config+0x164>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a41      	ldr	r2, [pc, #260]	@ (800193c <PLL_Config+0x164>)
 8001836:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 800183a:	6053      	str	r3, [r2, #4]

			//336Mhz / 2 = 84Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 800183c:	4b3f      	ldr	r3, [pc, #252]	@ (800193c <PLL_Config+0x164>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4a3e      	ldr	r2, [pc, #248]	@ (800193c <PLL_Config+0x164>)
 8001842:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001846:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (1<<16);//P <=84Mhz
 8001848:	4b3c      	ldr	r3, [pc, #240]	@ (800193c <PLL_Config+0x164>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a3b      	ldr	r2, [pc, #236]	@ (800193c <PLL_Config+0x164>)
 800184e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001852:	6053      	str	r3, [r2, #4]

			//Q <= 48Mhz (Opcional Configurar
			//RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLQ;
			//RCC -> PLLCFGR |= (4<<24);

			break;
 8001854:	e027      	b.n	80018a6 <PLL_Config+0xce>

		case HSI_SOURCE:

			HSI_Config_PLL(); //FOSC= 16Mhz, M=/8, N=*168, P=1(/4)
 8001856:	f7ff ff87 	bl	8001768 <HSI_Config_PLL>
			/*Configurar la fuente de reloj de PLL*/
			RCC -> PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;
 800185a:	4b38      	ldr	r3, [pc, #224]	@ (800193c <PLL_Config+0x164>)
 800185c:	4a37      	ldr	r2, [pc, #220]	@ (800193c <PLL_Config+0x164>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	6053      	str	r3, [r2, #4]

			/*Configurar M,N,P,Q*/

			// 16Mhz / 8 = 2Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 8001862:	4b36      	ldr	r3, [pc, #216]	@ (800193c <PLL_Config+0x164>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a35      	ldr	r2, [pc, #212]	@ (800193c <PLL_Config+0x164>)
 8001868:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800186c:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (8<<0); //M 1-2Mhz
 800186e:	4b33      	ldr	r3, [pc, #204]	@ (800193c <PLL_Config+0x164>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a32      	ldr	r2, [pc, #200]	@ (800193c <PLL_Config+0x164>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6053      	str	r3, [r2, #4]

			//2Mhz * 84 = 168Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 800187a:	4b30      	ldr	r3, [pc, #192]	@ (800193c <PLL_Config+0x164>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4a2f      	ldr	r2, [pc, #188]	@ (800193c <PLL_Config+0x164>)
 8001880:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001888:	6053      	str	r3, [r2, #4]
			RCC -> PLLCFGR |= (84<<6);//N 192-472Mhz
 800188a:	4b2c      	ldr	r3, [pc, #176]	@ (800193c <PLL_Config+0x164>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4a2b      	ldr	r2, [pc, #172]	@ (800193c <PLL_Config+0x164>)
 8001890:	f443 53a8 	orr.w	r3, r3, #5376	@ 0x1500
 8001894:	6053      	str	r3, [r2, #4]

			//168Mhz / 2 = 84Mhz
			RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLP; //P 84MHz
 8001896:	4b29      	ldr	r3, [pc, #164]	@ (800193c <PLL_Config+0x164>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4a28      	ldr	r2, [pc, #160]	@ (800193c <PLL_Config+0x164>)
 800189c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80018a0:	6053      	str	r3, [r2, #4]

			//Q <= 48Mhz (Opcional Configurar
			//RCC -> PLLCFGR &= ~RCC_PLLCFGR_PLLQ;
			//RCC -> PLLCFGR |= (4<<24);

			break;
 80018a2:	e000      	b.n	80018a6 <PLL_Config+0xce>
		default: break;
 80018a4:	bf00      	nop
	}

	/*Habilitar el PLL*/
	RCC -> CR |= RCC_CR_PLLON;
 80018a6:	4b25      	ldr	r3, [pc, #148]	@ (800193c <PLL_Config+0x164>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a24      	ldr	r2, [pc, #144]	@ (800193c <PLL_Config+0x164>)
 80018ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018b0:	6013      	str	r3, [r2, #0]

	/*Esperamos a que esté listo el cambio de oscilador*/
	while(!(RCC->CR & RCC_CR_PLLRDY));
 80018b2:	bf00      	nop
 80018b4:	4b21      	ldr	r3, [pc, #132]	@ (800193c <PLL_Config+0x164>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f9      	beq.n	80018b4 <PLL_Config+0xdc>

	/*Configurar Prescalers*/
	switch(Source)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <PLL_Config+0xf2>
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	e012      	b.n	80018f0 <PLL_Config+0x118>
			//Configurar luego
			break;

		case HSI_SOURCE:

			RCC -> CFGR &= ~RCC_CFGR_PPRE2_Msk; //APB2 <=84Mhz
 80018ca:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <PLL_Config+0x164>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4a1b      	ldr	r2, [pc, #108]	@ (800193c <PLL_Config+0x164>)
 80018d0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80018d4:	6093      	str	r3, [r2, #8]

			RCC -> CFGR &= ~RCC_CFGR_PPRE1_Msk;
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <PLL_Config+0x164>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	4a18      	ldr	r2, [pc, #96]	@ (800193c <PLL_Config+0x164>)
 80018dc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80018e0:	6093      	str	r3, [r2, #8]
			RCC -> CFGR |= RCC_CFGR_PPRE1_2; //APB1 <=42Mhz
 80018e2:	4b16      	ldr	r3, [pc, #88]	@ (800193c <PLL_Config+0x164>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	4a15      	ldr	r2, [pc, #84]	@ (800193c <PLL_Config+0x164>)
 80018e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018ec:	6093      	str	r3, [r2, #8]

			break;
 80018ee:	bf00      	nop

	}

	/*Configurar la latencia de la flash (Revisar Pag. 46 ref. manual STM32F401X)*/
	FLASH -> ACR &= ~FLASH_ACR_LATENCY;
 80018f0:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <PLL_Config+0x168>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <PLL_Config+0x168>)
 80018f6:	f023 0307 	bic.w	r3, r3, #7
 80018fa:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_LATENCY_2WS;
 80018fc:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <PLL_Config+0x168>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0f      	ldr	r2, [pc, #60]	@ (8001940 <PLL_Config+0x168>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	6013      	str	r3, [r2, #0]

	/*Seleccionar la fuente dek sysclk*/
	RCC->CFGR 	&= ~RCC_CFGR_SW_Msk;
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <PLL_Config+0x164>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a0b      	ldr	r2, [pc, #44]	@ (800193c <PLL_Config+0x164>)
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <PLL_Config+0x164>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a08      	ldr	r2, [pc, #32]	@ (800193c <PLL_Config+0x164>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	6093      	str	r3, [r2, #8]

	/*Esperamos a que esté listo el cambio de oscilador*/
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8001920:	bf00      	nop
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <PLL_Config+0x164>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f9      	beq.n	8001922 <PLL_Config+0x14a>

	/*Actualiza SystemCoreClock*/
	SystemCoreClockUpdate();
 800192e:	f7ff fa1f 	bl	8000d70 <SystemCoreClockUpdate>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40023c00 	.word	0x40023c00

08001944 <__NVIC_EnableIRQ>:
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	@ (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	@ (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	@ (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <USART1_Pin_Configuration>:

/*
 * @brief: Configuración de pines USART1
 */
static void USART1_Pin_Configuration(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; //Clock
 80019d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a50 <USART1_Pin_Configuration+0x7c>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a50 <USART1_Pin_Configuration+0x7c>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA -> MODER &= ~(GPIO_MODER_MODE10_Msk | GPIO_MODER_MODE9_Msk); //Clean GPIO Config
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 80019ea:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80019ee:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE9_1); //Alternate GPIO Config
 80019f0:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 80019f6:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80019fa:	6013      	str	r3, [r2, #0]

	GPIOA -> OSPEEDR  &= ~(GPIO_OSPEEDR_OSPEED10_Msk | GPIO_OSPEEDR_OSPEED9_Msk); //Clean GPIO Config OSPEED
 80019fc:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a14      	ldr	r2, [pc, #80]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 8001a02:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8001a06:	6093      	str	r3, [r2, #8]
	GPIOA -> OSPEEDR |= ((0x03<<GPIO_OSPEEDR_OSPEED10_Pos) | (0x03<<GPIO_OSPEEDR_OSPEED9_Pos)); //GPIO Config OSPEED
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 8001a0e:	f443 1370 	orr.w	r3, r3, #3932160	@ 0x3c0000
 8001a12:	6093      	str	r3, [r2, #8]

	GPIOA -> PUPDR  &= ~(GPIO_PUPDR_PUPD10_Msk | GPIO_PUPDR_PUPD9_Msk); //Clean GPIO Config OSPEED
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4a0e      	ldr	r2, [pc, #56]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 8001a1a:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8001a1e:	60d3      	str	r3, [r2, #12]
	GPIOA -> PUPDR |= ((0x01<<GPIO_PUPDR_PUPD10_Pos) | (0x01<<GPIO_PUPDR_PUPD9_Pos)); //GPIO Config OSPEED
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4a0b      	ldr	r2, [pc, #44]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 8001a26:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8001a2a:	60d3      	str	r3, [r2, #12]

	GPIOA -> AFR[1] &= ~(GPIO_AFRH_AFSEL10_Msk | GPIO_AFRH_AFSEL9_Msk); //Clean GPIO AF
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a30:	4a08      	ldr	r2, [pc, #32]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 8001a32:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001a36:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= ((0x07<<GPIO_AFRH_AFSEL10_Pos) | (0x07<<GPIO_AFRH_AFSEL9_Pos)); //Config GPIO AF
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <USART1_Pin_Configuration+0x80>)
 8001a3e:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 8001a42:	6253      	str	r3, [r2, #36]	@ 0x24

}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000

08001a58 <USART2_Pin_Configuration>:

/*
 * @brief: Configuración de pines USART2
 */
static void USART2_Pin_Configuration(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
	RCC-> AHB1ENR |= GPIOX_CLOCK(USART2_Pin_Tx);
 8001a5c:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <USART2_Pin_Configuration+0xa0>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	4a25      	ldr	r2, [pc, #148]	@ (8001af8 <USART2_Pin_Configuration+0xa0>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC-> AHB1ENR |= GPIOX_CLOCK(USART2_Pin_Rx);
 8001a68:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <USART2_Pin_Configuration+0xa0>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6c:	4a22      	ldr	r2, [pc, #136]	@ (8001af8 <USART2_Pin_Configuration+0xa0>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOX_MODER(MODE_ALTER, USART2_Pin_Tx);
 8001a74:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001a7e:	f043 0320 	orr.w	r3, r3, #32
 8001a82:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_ALTER, USART2_Pin_Rx);
 8001a84:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a92:	6013      	str	r3, [r2, #0]

	GPIOX_AFR(7U,USART2_Pin_Tx);
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a9c:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001a9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aa2:	6213      	str	r3, [r2, #32]
	GPIOX_AFR(7U,USART2_Pin_Rx);
 8001aa4:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001aac:	4a13      	ldr	r2, [pc, #76]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001aae:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001ab2:	6213      	str	r3, [r2, #32]

	GPIOX_OSPEEDR(MODE_SPD_VHIGH, USART2_Pin_Tx);
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a10      	ldr	r2, [pc, #64]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001aba:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001abe:	6093      	str	r3, [r2, #8]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, USART2_Pin_Rx);
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001ac6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001aca:	6093      	str	r3, [r2, #8]

	GPIOX_PUPDR(MODE_PU_UP, USART2_Pin_Tx);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ad4:	4a09      	ldr	r2, [pc, #36]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001ad6:	f043 0310 	orr.w	r3, r3, #16
 8001ada:	60d3      	str	r3, [r2, #12]
	GPIOX_PUPDR(MODE_PU_UP, USART2_Pin_Rx);
 8001adc:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001ae4:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <USART2_Pin_Configuration+0xa4>)
 8001ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <HAL_RCC_GetPCLK1Freq>:
/*
 * NEW FUNCTIONS TO USART
 */

uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b04:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a07      	ldr	r2, [pc, #28]	@ (8001b28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b0a:	6892      	ldr	r2, [r2, #8]
 8001b0c:	0a92      	lsrs	r2, r2, #10
 8001b0e:	f002 0207 	and.w	r2, r2, #7
 8001b12:	4906      	ldr	r1, [pc, #24]	@ (8001b2c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001b14:	5c8a      	ldrb	r2, [r1, r2]
 8001b16:	40d3      	lsrs	r3, r2
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000000 	.word	0x20000000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08003140 	.word	0x08003140

08001b30 <HAL_RCC_GetPCLK2Freq>:

uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b34:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b3a:	6892      	ldr	r2, [r2, #8]
 8001b3c:	0b52      	lsrs	r2, r2, #13
 8001b3e:	f002 0207 	and.w	r2, r2, #7
 8001b42:	4906      	ldr	r1, [pc, #24]	@ (8001b5c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001b44:	5c8a      	ldrb	r2, [r1, r2]
 8001b46:	40d3      	lsrs	r3, r2
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	08003140 	.word	0x08003140

08001b60 <USARTx_Init>:

void USARTx_Init(USARTx_Config_t* USARTx_Config)
{
 8001b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b64:	b0c0      	sub	sp, #256	@ 0x100
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
	uint32_t baud = USARTx_Config -> baudrate;
 8001b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
	uint32_t pclk;
	/*Habilitar Relojs*/
	if(USARTx_Config -> USARTx == USART1)
 8001b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4ba1      	ldr	r3, [pc, #644]	@ (8001e04 <USARTx_Init+0x2a4>)
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d10c      	bne.n	8001b9c <USARTx_Init+0x3c>
	{
		RCC->APB2ENR |=  RCC_APB2RSTR_USART1RST;
 8001b82:	4ba1      	ldr	r3, [pc, #644]	@ (8001e08 <USARTx_Init+0x2a8>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	4aa0      	ldr	r2, [pc, #640]	@ (8001e08 <USARTx_Init+0x2a8>)
 8001b88:	f043 0310 	orr.w	r3, r3, #16
 8001b8c:	6453      	str	r3, [r2, #68]	@ 0x44
		/*Configurar Pines*/
		USART1_Pin_Configuration();
 8001b8e:	f7ff ff21 	bl	80019d4 <USART1_Pin_Configuration>
		pclk = HAL_RCC_GetPCLK2Freq();
 8001b92:	f7ff ffcd 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8001b96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001b9a:	e011      	b.n	8001bc0 <USARTx_Init+0x60>
	}
	else if(USARTx_Config -> USARTx == USART2)
 8001b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4b9a      	ldr	r3, [pc, #616]	@ (8001e0c <USARTx_Init+0x2ac>)
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d10b      	bne.n	8001bc0 <USARTx_Init+0x60>
	{
		RCC->APB1ENR |=  RCC_APB1RSTR_USART2RST;
 8001ba8:	4b97      	ldr	r3, [pc, #604]	@ (8001e08 <USARTx_Init+0x2a8>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	4a96      	ldr	r2, [pc, #600]	@ (8001e08 <USARTx_Init+0x2a8>)
 8001bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb2:	6413      	str	r3, [r2, #64]	@ 0x40
		/*Configurar Pines*/
		USART2_Pin_Configuration();
 8001bb4:	f7ff ff50 	bl	8001a58 <USART2_Pin_Configuration>
		pclk = HAL_RCC_GetPCLK1Freq();
 8001bb8:	f7ff ffa2 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
 8001bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
	}

	/*M bits*/
	if(USARTx_Config -> m_bit != M_8BITS)
 8001bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bc4:	7a1b      	ldrb	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <USARTx_Init+0x7e>
	{
		USARTx_Config -> USARTx -> CR1 |= USART_CR1_M;
 8001bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68d9      	ldr	r1, [r3, #12]
 8001bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	f441 5380 	orr.w	r3, r1, #4096	@ 0x1000
 8001bdc:	60d3      	str	r3, [r2, #12]
	}

	/* Over Sampling and Baud Rate*/
	if(USARTx_Config -> over_bit != OVER_16)
 8001bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001be2:	7a5b      	ldrb	r3, [r3, #9]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 8115 	beq.w	8001e14 <USARTx_Init+0x2b4>
	{
		USARTx_Config -> USARTx-> CR1 |= USART_CR1_OVER8;
 8001bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68d9      	ldr	r1, [r3, #12]
 8001bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	f441 4300 	orr.w	r3, r1, #32768	@ 0x8000
 8001bfc:	60d3      	str	r3, [r2, #12]
		USARTx_Config -> USARTx -> BRR = UART_BRR_SAMPLING8(pclk, baud);
 8001bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c02:	2200      	movs	r2, #0
 8001c04:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001c08:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001c0c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c10:	4622      	mov	r2, r4
 8001c12:	462b      	mov	r3, r5
 8001c14:	1891      	adds	r1, r2, r2
 8001c16:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001c18:	415b      	adcs	r3, r3
 8001c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c20:	4621      	mov	r1, r4
 8001c22:	eb12 0801 	adds.w	r8, r2, r1
 8001c26:	4629      	mov	r1, r5
 8001c28:	eb43 0901 	adc.w	r9, r3, r1
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c40:	4690      	mov	r8, r2
 8001c42:	4699      	mov	r9, r3
 8001c44:	4623      	mov	r3, r4
 8001c46:	eb18 0303 	adds.w	r3, r8, r3
 8001c4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001c4e:	462b      	mov	r3, r5
 8001c50:	eb49 0303 	adc.w	r3, r9, r3
 8001c54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001c58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001c62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	18db      	adds	r3, r3, r3
 8001c6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c70:	4613      	mov	r3, r2
 8001c72:	eb42 0303 	adc.w	r3, r2, r3
 8001c76:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001c80:	f7fe feec 	bl	8000a5c <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4b61      	ldr	r3, [pc, #388]	@ (8001e10 <USARTx_Init+0x2b0>)
 8001c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	011c      	lsls	r4, r3, #4
 8001c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c96:	2200      	movs	r2, #0
 8001c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001c9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001ca0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001ca4:	4642      	mov	r2, r8
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	1891      	adds	r1, r2, r2
 8001caa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001cac:	415b      	adcs	r3, r3
 8001cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001cb4:	4641      	mov	r1, r8
 8001cb6:	eb12 0a01 	adds.w	sl, r2, r1
 8001cba:	4649      	mov	r1, r9
 8001cbc:	eb43 0b01 	adc.w	fp, r3, r1
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ccc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cd4:	4692      	mov	sl, r2
 8001cd6:	469b      	mov	fp, r3
 8001cd8:	4643      	mov	r3, r8
 8001cda:	eb1a 0303 	adds.w	r3, sl, r3
 8001cde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001ce2:	464b      	mov	r3, r9
 8001ce4:	eb4b 0303 	adc.w	r3, fp, r3
 8001ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001cec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001cf6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001cfa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	18db      	adds	r3, r3, r3
 8001d02:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d04:	4613      	mov	r3, r2
 8001d06:	eb42 0303 	adc.w	r3, r2, r3
 8001d0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d10:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001d14:	f7fe fea2 	bl	8000a5c <__aeabi_uldivmod>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e10 <USARTx_Init+0x2b0>)
 8001d20:	fba3 2301 	umull	r2, r3, r3, r1
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	2264      	movs	r2, #100	@ 0x64
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	1acb      	subs	r3, r1, r3
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001d34:	4b36      	ldr	r3, [pc, #216]	@ (8001e10 <USARTx_Init+0x2b0>)
 8001d36:	fba3 2302 	umull	r2, r3, r3, r2
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001d42:	441c      	add	r4, r3
 8001d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001d4e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001d52:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001d56:	4642      	mov	r2, r8
 8001d58:	464b      	mov	r3, r9
 8001d5a:	1891      	adds	r1, r2, r2
 8001d5c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d5e:	415b      	adcs	r3, r3
 8001d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d62:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d66:	4641      	mov	r1, r8
 8001d68:	1851      	adds	r1, r2, r1
 8001d6a:	6339      	str	r1, [r7, #48]	@ 0x30
 8001d6c:	4649      	mov	r1, r9
 8001d6e:	414b      	adcs	r3, r1
 8001d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001d7e:	4659      	mov	r1, fp
 8001d80:	00cb      	lsls	r3, r1, #3
 8001d82:	4651      	mov	r1, sl
 8001d84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d88:	4651      	mov	r1, sl
 8001d8a:	00ca      	lsls	r2, r1, #3
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	4642      	mov	r2, r8
 8001d94:	189b      	adds	r3, r3, r2
 8001d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d9a:	464b      	mov	r3, r9
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	eb42 0303 	adc.w	r3, r2, r3
 8001da2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001daa:	2200      	movs	r2, #0
 8001dac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001db0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001db4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001db8:	460b      	mov	r3, r1
 8001dba:	18db      	adds	r3, r3, r3
 8001dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	eb42 0303 	adc.w	r3, r2, r3
 8001dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001dce:	f7fe fe45 	bl	8000a5c <__aeabi_uldivmod>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <USARTx_Init+0x2b0>)
 8001dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	2164      	movs	r1, #100	@ 0x64
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	3332      	adds	r3, #50	@ 0x32
 8001dea:	4a09      	ldr	r2, [pc, #36]	@ (8001e10 <USARTx_Init+0x2b0>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	f003 0207 	and.w	r2, r3, #7
 8001df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4422      	add	r2, r4
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	e10f      	b.n	8002022 <USARTx_Init+0x4c2>
 8001e02:	bf00      	nop
 8001e04:	40011000 	.word	0x40011000
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40004400 	.word	0x40004400
 8001e10:	51eb851f 	.word	0x51eb851f
	}
	else
	{
		USARTx_Config -> USARTx-> CR1 &= ~USART_CR1_OVER8_Msk;
 8001e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68d9      	ldr	r1, [r3, #12]
 8001e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f421 4300 	bic.w	r3, r1, #32768	@ 0x8000
 8001e26:	60d3      	str	r3, [r2, #12]
		USARTx_Config -> USARTx -> BRR = UART_BRR_SAMPLING16(pclk, baud);
 8001e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001e36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001e3a:	4642      	mov	r2, r8
 8001e3c:	464b      	mov	r3, r9
 8001e3e:	1891      	adds	r1, r2, r2
 8001e40:	6239      	str	r1, [r7, #32]
 8001e42:	415b      	adcs	r3, r3
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e4a:	4641      	mov	r1, r8
 8001e4c:	1854      	adds	r4, r2, r1
 8001e4e:	4649      	mov	r1, r9
 8001e50:	eb43 0501 	adc.w	r5, r3, r1
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	00eb      	lsls	r3, r5, #3
 8001e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e62:	00e2      	lsls	r2, r4, #3
 8001e64:	4614      	mov	r4, r2
 8001e66:	461d      	mov	r5, r3
 8001e68:	4643      	mov	r3, r8
 8001e6a:	18e3      	adds	r3, r4, r3
 8001e6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e70:	464b      	mov	r3, r9
 8001e72:	eb45 0303 	adc.w	r3, r5, r3
 8001e76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e84:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e94:	4629      	mov	r1, r5
 8001e96:	008b      	lsls	r3, r1, #2
 8001e98:	4621      	mov	r1, r4
 8001e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	008a      	lsls	r2, r1, #2
 8001ea2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001ea6:	f7fe fdd9 	bl	8000a5c <__aeabi_uldivmod>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4b8e      	ldr	r3, [pc, #568]	@ (80020e8 <USARTx_Init+0x588>)
 8001eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	011c      	lsls	r4, r3, #4
 8001eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ec2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ec6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001eca:	4642      	mov	r2, r8
 8001ecc:	464b      	mov	r3, r9
 8001ece:	1891      	adds	r1, r2, r2
 8001ed0:	61b9      	str	r1, [r7, #24]
 8001ed2:	415b      	adcs	r3, r3
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eda:	4641      	mov	r1, r8
 8001edc:	1851      	adds	r1, r2, r1
 8001ede:	6139      	str	r1, [r7, #16]
 8001ee0:	4649      	mov	r1, r9
 8001ee2:	414b      	adcs	r3, r1
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ef2:	4659      	mov	r1, fp
 8001ef4:	00cb      	lsls	r3, r1, #3
 8001ef6:	4651      	mov	r1, sl
 8001ef8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001efc:	4651      	mov	r1, sl
 8001efe:	00ca      	lsls	r2, r1, #3
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	4603      	mov	r3, r0
 8001f06:	4642      	mov	r2, r8
 8001f08:	189b      	adds	r3, r3, r2
 8001f0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f0e:	464b      	mov	r3, r9
 8001f10:	460a      	mov	r2, r1
 8001f12:	eb42 0303 	adc.w	r3, r2, r3
 8001f16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001f1e:	2200      	movs	r2, #0
 8001f20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001f30:	4649      	mov	r1, r9
 8001f32:	008b      	lsls	r3, r1, #2
 8001f34:	4641      	mov	r1, r8
 8001f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	008a      	lsls	r2, r1, #2
 8001f3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001f42:	f7fe fd8b 	bl	8000a5c <__aeabi_uldivmod>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4b66      	ldr	r3, [pc, #408]	@ (80020e8 <USARTx_Init+0x588>)
 8001f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2264      	movs	r2, #100	@ 0x64
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	1acb      	subs	r3, r1, r3
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	3332      	adds	r3, #50	@ 0x32
 8001f60:	4a61      	ldr	r2, [pc, #388]	@ (80020e8 <USARTx_Init+0x588>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f6c:	441c      	add	r4, r3
 8001f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f72:	2200      	movs	r2, #0
 8001f74:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f76:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001f7c:	4642      	mov	r2, r8
 8001f7e:	464b      	mov	r3, r9
 8001f80:	1891      	adds	r1, r2, r2
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	415b      	adcs	r3, r3
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f8c:	4641      	mov	r1, r8
 8001f8e:	1851      	adds	r1, r2, r1
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	4649      	mov	r1, r9
 8001f94:	414b      	adcs	r3, r1
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001fa4:	4659      	mov	r1, fp
 8001fa6:	00cb      	lsls	r3, r1, #3
 8001fa8:	4651      	mov	r1, sl
 8001faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fae:	4651      	mov	r1, sl
 8001fb0:	00ca      	lsls	r2, r1, #3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4642      	mov	r2, r8
 8001fba:	189b      	adds	r3, r3, r2
 8001fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fbe:	464b      	mov	r3, r9
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	eb42 0303 	adc.w	r3, r2, r3
 8001fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001fc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fcc:	2200      	movs	r2, #0
 8001fce:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fd0:	667a      	str	r2, [r7, #100]	@ 0x64
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001fde:	4649      	mov	r1, r9
 8001fe0:	008b      	lsls	r3, r1, #2
 8001fe2:	4641      	mov	r1, r8
 8001fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fe8:	4641      	mov	r1, r8
 8001fea:	008a      	lsls	r2, r1, #2
 8001fec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001ff0:	f7fe fd34 	bl	8000a5c <__aeabi_uldivmod>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80020e8 <USARTx_Init+0x588>)
 8001ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2164      	movs	r1, #100	@ 0x64
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	3332      	adds	r3, #50	@ 0x32
 800200c:	4a36      	ldr	r2, [pc, #216]	@ (80020e8 <USARTx_Init+0x588>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4422      	add	r2, r4
 8002020:	609a      	str	r2, [r3, #8]
	}

	/* Stop bits*/
	if((USARTx_Config -> stop_bit) ==  STOP_ONE)
 8002022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002026:	7a9b      	ldrb	r3, [r3, #10]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <USARTx_Init+0x4e2>
	{
		//Nothing
		USARTx_Config -> USARTx -> CR2 |= USART_CR2_STOP_Msk;
 800202c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 5240 	orr.w	r2, r2, #12288	@ 0x3000
 800203e:	611a      	str	r2, [r3, #16]
 8002040:	e019      	b.n	8002076 <USARTx_Init+0x516>

	}
	else if((USARTx_Config -> stop_bit) ==  STOP_HALF)
 8002042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002046:	7a9b      	ldrb	r3, [r3, #10]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10a      	bne.n	8002062 <USARTx_Init+0x502>
	{
		USARTx_Config -> USARTx -> CR2 |= USART_CR2_STOP_0;
 800204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800205e:	611a      	str	r2, [r3, #16]
 8002060:	e009      	b.n	8002076 <USARTx_Init+0x516>
	}
	else
	{
		USARTx_Config -> USARTx -> CR2 |= USART_CR2_STOP_1;
 8002062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002074:	611a      	str	r2, [r3, #16]
	}

	/* Paridad */
	if(USARTx_Config -> enable_parity != PARITY_DIS)
 8002076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800207a:	7adb      	ldrb	r3, [r3, #11]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d018      	beq.n	80020b2 <USARTx_Init+0x552>
	{
		USARTx_Config -> USARTx -> CR2 |= USART_CR1_PCE;
 8002080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002092:	611a      	str	r2, [r3, #16]

		if(USARTx_Config -> parity_bit != PAR_EVEN )
 8002094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002098:	7b1b      	ldrb	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <USARTx_Init+0x552>
		{
			USARTx_Config -> USARTx -> CR1 |= USART_CR1_PS;
 800209e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b0:	60da      	str	r2, [r3, #12]
		}
	}

	/* Enable transmisión y recepción */
	USARTx_Config -> USARTx -> CR1 |= USART_CR1_TE | USART_CR1_RE;
 80020b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 020c 	orr.w	r2, r2, #12
 80020c4:	60da      	str	r2, [r3, #12]

	/*Configuración de interrupciones*/

	/*Habilitar USART*/
	USARTx_Config -> USARTx -> CR1 |= USART_CR1_UE;
 80020c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020d8:	60da      	str	r2, [r3, #12]
}
 80020da:	bf00      	nop
 80020dc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80020e0:	46bd      	mov	sp, r7
 80020e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020e6:	bf00      	nop
 80020e8:	51eb851f 	.word	0x51eb851f

080020ec <USARTx_Init_IT>:

void USARTx_Init_IT(USARTx_Config_t* USARTx_Config)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	uint8_t prior =  USARTx_Config -> priority;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7b5b      	ldrb	r3, [r3, #13]
 80020f8:	73fb      	strb	r3, [r7, #15]

	if(USARTx_Config -> USARTx == USART1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002138 <USARTx_Init_IT+0x4c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d108      	bne.n	8002116 <USARTx_Init_IT+0x2a>
	{
		NVIC_EnableIRQ(USART1_IRQn);
 8002104:	2025      	movs	r0, #37	@ 0x25
 8002106:	f7ff fc1d 	bl	8001944 <__NVIC_EnableIRQ>
		NVIC_SetPriority(USART1_IRQn, prior);
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	4619      	mov	r1, r3
 800210e:	2025      	movs	r0, #37	@ 0x25
 8002110:	f7ff fc36 	bl	8001980 <__NVIC_SetPriority>
	else if(USARTx_Config -> USARTx == USART2)
	{
		NVIC_EnableIRQ(USART2_IRQn);
		NVIC_SetPriority(USART2_IRQn, prior);
	}
}
 8002114:	e00c      	b.n	8002130 <USARTx_Init_IT+0x44>
	else if(USARTx_Config -> USARTx == USART2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a08      	ldr	r2, [pc, #32]	@ (800213c <USARTx_Init_IT+0x50>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d107      	bne.n	8002130 <USARTx_Init_IT+0x44>
		NVIC_EnableIRQ(USART2_IRQn);
 8002120:	2026      	movs	r0, #38	@ 0x26
 8002122:	f7ff fc0f 	bl	8001944 <__NVIC_EnableIRQ>
		NVIC_SetPriority(USART2_IRQn, prior);
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	4619      	mov	r1, r3
 800212a:	2026      	movs	r0, #38	@ 0x26
 800212c:	f7ff fc28 	bl	8001980 <__NVIC_SetPriority>
}
 8002130:	bf00      	nop
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40011000 	.word	0x40011000
 800213c:	40004400 	.word	0x40004400

08002140 <USARTx_Send_Data>:

void USARTx_Send_Data(USART_TypeDef *USARTx, uint8_t *pTxSend, uint32_t size)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]

	uint16_t *pTxBuffer;

	/*Durante el size de la data*/
	for(uint8_t i=0; i<size; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	75fb      	strb	r3, [r7, #23]
 8002150:	e02d      	b.n	80021ae <USARTx_Send_Data+0x6e>
	{
		/*Mientras no está vacío, se queda acá*/
		while(!(USARTx -> SR &  USART_SR_TXE));
 8002152:	bf00      	nop
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f9      	beq.n	8002154 <USARTx_Send_Data+0x14>

		/*9 bits*/
		if(USARTx->CR1 & USART_CR1_M)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d015      	beq.n	8002198 <USARTx_Send_Data+0x58>
		{
			pTxBuffer = (uint16_t *) pTxSend;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	613b      	str	r3, [r7, #16]
			USARTx -> DR = (*pTxBuffer & (uint16_t)0x1FF);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	605a      	str	r2, [r3, #4]
			/*Si no se configura la paridad*/
			if(!(USARTx->CR1 & USART_CR1_PCE))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d103      	bne.n	8002190 <USARTx_Send_Data+0x50>
			{
				/*Pasamos dos espacios de pTxSend*/
				pTxSend += 2;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3302      	adds	r3, #2
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	e00b      	b.n	80021a8 <USARTx_Send_Data+0x68>
			}
			else /*Si se configura la paridad*/
			{
				/*Pasamos solo un espacio de pTxSend*/
				pTxSend++;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	3301      	adds	r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	e007      	b.n	80021a8 <USARTx_Send_Data+0x68>
			}
		}
		else /*8 bits*/
		{
			/*Solo para la versión de imprimibles*/
			USARTx -> DR = (*pTxSend & (uint8_t)0xFF);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	605a      	str	r2, [r3, #4]
			pTxSend++;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3301      	adds	r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i<size; i++)
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	3301      	adds	r3, #1
 80021ac:	75fb      	strb	r3, [r7, #23]
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d8cd      	bhi.n	8002152 <USARTx_Send_Data+0x12>
		}

	}

	/*Revisar si la transmisión se completó*/
	while(!(USARTx->SR & USART_SR_TC));
 80021b6:	bf00      	nop
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f9      	beq.n	80021b8 <USARTx_Send_Data+0x78>

	return;
 80021c4:	bf00      	nop
}
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <USARTx_SendDataIT>:
 * en una función.
 * Dicha función evaluará si se envía o recibe e interrupciones.
 */

uint8_t USARTx_SendDataIT(USARTx_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t size)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
	uint8_t txState = pUSARTHandle -> TxBusyState;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	7d1b      	ldrb	r3, [r3, #20]
 80021e0:	75fb      	strb	r3, [r7, #23]

	if(txState != USART_BUSY_IN_TX)
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d010      	beq.n	800220a <USARTx_SendDataIT+0x3a>
	{
		pUSARTHandle -> TxLen = size;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	60da      	str	r2, [r3, #12]
		pUSARTHandle -> pTxBuffer = pTxBuffer; //Aquí se guarda la dirección de pRxBuffer, recordar que es un arreglo y funciona como tal
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	605a      	str	r2, [r3, #4]
		pUSARTHandle -> TxBusyState = USART_BUSY_IN_TX;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2202      	movs	r2, #2
 80021f8:	751a      	strb	r2, [r3, #20]
		pUSARTHandle -> pUSARTx -> CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8002208:	60da      	str	r2, [r3, #12]
	}
	return txState;
 800220a:	7dfb      	ldrb	r3, [r7, #23]
}
 800220c:	4618      	mov	r0, r3
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <USARTx_ReceiveDataIT>:
 * Se encarga de almacenar los datos necesarios para la recepción
 * Dicha función evaluará si se envía o recibe datos e interrupciones.
 */

uint8_t USARTx_ReceiveDataIT(USARTx_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t size)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
	uint8_t rxState = pUSARTHandle -> RxBusyState;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	7d5b      	ldrb	r3, [r3, #21]
 8002228:	75fb      	strb	r3, [r7, #23]

	if(rxState != USART_BUSY_IN_RX)
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d013      	beq.n	8002258 <USARTx_ReceiveDataIT+0x40>
	{
		pUSARTHandle -> RxLen = size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]
		pUSARTHandle -> pRxBuffer = pRxBuffer; //Aquí se guarda la dirección de pRxBuffer, recordar que es un arreglo y funciona como tal
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	609a      	str	r2, [r3, #8]
		pUSARTHandle -> RxBusyState = USART_BUSY_IN_RX;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	755a      	strb	r2, [r3, #21]
		(void)pUSARTHandle -> pUSARTx -> DR;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
		pUSARTHandle -> pUSARTx -> CR1 |= USART_CR1_RXNEIE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0220 	orr.w	r2, r2, #32
 8002256:	60da      	str	r2, [r3, #12]
	}
	return rxState;
 8002258:	7dfb      	ldrb	r3, [r7, #23]
}
 800225a:	4618      	mov	r0, r3
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <USARTx_IRQHandling>:

void USARTx_IRQHandling(USARTx_Handle_t *pUSARTHandle)
{
 8002266:	b480      	push	{r7}
 8002268:	b087      	sub	sp, #28
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

	/*TC flag: Aquí se llega al final de toda transmisión de datos*/

	/*Si llegamos al final de transmisión*/
	temp1 = pUSARTHandle -> pUSARTx -> SR & USART_SR_TC;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227a:	75fb      	strb	r3, [r7, #23]
	/*Evaluar si la interrupción por TC está activa*/
	temp2 = pUSARTHandle -> pUSARTx -> CR1 & USART_CR1_TCIE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002288:	75bb      	strb	r3, [r7, #22]

	if(temp1 && temp2)
 800228a:	7dfb      	ldrb	r3, [r7, #23]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d023      	beq.n	80022d8 <USARTx_IRQHandling+0x72>
 8002290:	7dbb      	ldrb	r3, [r7, #22]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d020      	beq.n	80022d8 <USARTx_IRQHandling+0x72>
	{
		/*Si estamos en transmisión IT*/
		if(pUSARTHandle -> TxBusyState == USART_BUSY_IN_TX)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7d1b      	ldrb	r3, [r3, #20]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d11c      	bne.n	80022d8 <USARTx_IRQHandling+0x72>
		{
			/*Si la data que se envía es vacío*/
			if(!(pUSARTHandle -> TxLen))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d118      	bne.n	80022d8 <USARTx_IRQHandling+0x72>
			{
				pUSARTHandle -> pUSARTx-> SR &=~ USART_SR_TC; //Se limpia la bancera TC
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022b4:	601a      	str	r2, [r3, #0]
				pUSARTHandle -> pUSARTx-> CR1 &=~ USART_CR1_TCIE; //Se desactiva la interrupción por TC
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022c4:	60da      	str	r2, [r3, #12]
				pUSARTHandle -> TxBusyState = USART_READY; //Se indica que está listo para otro estaod
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	751a      	strb	r2, [r3, #20]
				pUSARTHandle -> pTxBuffer = NULL; //Se limpia el buffer
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	605a      	str	r2, [r3, #4]
				pUSARTHandle -> TxLen = 0; //Restablecer la longitud a cero
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	60da      	str	r2, [r3, #12]
	}

	/*TXE flag: Para la transmisión continua*/

	/*Si el buffer está vacío luego de guardar en el registro de desplazamiento el contenido de DR*/
	temp1 = pUSARTHandle -> pUSARTx -> SR & USART_SR_TXE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80022e4:	75fb      	strb	r3, [r7, #23]
	/*Si está activa a la interupción por TX*/
	temp2 = pUSARTHandle -> pUSARTx -> SR & USART_CR1_TXEIE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80022f2:	75bb      	strb	r3, [r7, #22]

	if(temp1 && temp2)
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d055      	beq.n	80023a6 <USARTx_IRQHandling+0x140>
 80022fa:	7dbb      	ldrb	r3, [r7, #22]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d052      	beq.n	80023a6 <USARTx_IRQHandling+0x140>
	{
		/*Si estamos en transmisión IT*/
		if(pUSARTHandle -> TxBusyState == USART_BUSY_IN_TX)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7d1b      	ldrb	r3, [r3, #20]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d14e      	bne.n	80023a6 <USARTx_IRQHandling+0x140>
		{
			/*Si la data que se envía tiene almenos un caracter*/
			if(pUSARTHandle -> TxLen > 0)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d04a      	beq.n	80023a6 <USARTx_IRQHandling+0x140>
			{
				/*9 bits*/
				if(pUSARTHandle -> pUSARTx -> CR1 & USART_CR1_M)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d027      	beq.n	800236e <USARTx_IRQHandling+0x108>
				{
					pdata = (uint16_t *) pUSARTHandle -> pTxBuffer;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	613b      	str	r3, [r7, #16]
					pUSARTHandle -> pUSARTx -> DR = (*pdata & (uint16_t)0x1FF);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002332:	605a      	str	r2, [r3, #4]
					/*Si no se configura la paridad*/
					if(!(pUSARTHandle -> pUSARTx -> CR1 & USART_CR1_PCE))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10a      	bne.n	8002358 <USARTx_IRQHandling+0xf2>
					{
						/*Pasamos dos espacios*/
						pUSARTHandle -> pTxBuffer += 2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	1c9a      	adds	r2, r3, #2
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	605a      	str	r2, [r3, #4]
						/**/
						pUSARTHandle -> TxLen -= 2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	1e9a      	subs	r2, r3, #2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	e01a      	b.n	800238e <USARTx_IRQHandling+0x128>
					}
					else /*Si se configura la paridad*/
					{
						/*Pasamos solo un espacio*/
						pUSARTHandle -> pTxBuffer += 1;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	605a      	str	r2, [r3, #4]
						/**/
						pUSARTHandle -> TxLen -= 1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	1e5a      	subs	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	e00f      	b.n	800238e <USARTx_IRQHandling+0x128>
					}
				}
				else /*8 bits*/
				{
					/*Solo para la versión de imprimibles*/
					pUSARTHandle -> pUSARTx -> DR = (*pUSARTHandle -> pTxBuffer & (uint8_t)0xFF);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
					pUSARTHandle -> pTxBuffer++;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	605a      	str	r2, [r3, #4]
					pUSARTHandle -> TxLen -=1;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60da      	str	r2, [r3, #12]
				}

				/*Terminamos de transmitir cuando se termine la data*/
				if(pUSARTHandle->TxLen == 0)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d107      	bne.n	80023a6 <USARTx_IRQHandling+0x140>
				{
					pUSARTHandle->pUSARTx->CR1 &=~ USART_CR1_TXEIE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023a4:	60da      	str	r2, [r3, #12]
			}
		}
	}

	/*RXNE flag: Para la recepción continua*/
	temp1 = pUSARTHandle -> pUSARTx -> SR & USART_SR_RXNE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	75fb      	strb	r3, [r7, #23]
	temp2 = pUSARTHandle -> pUSARTx -> CR1 & USART_CR1_RXNEIE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	75bb      	strb	r3, [r7, #22]

	if(temp1 && temp2)
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d076      	beq.n	80024b6 <USARTx_IRQHandling+0x250>
 80023c8:	7dbb      	ldrb	r3, [r7, #22]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d073      	beq.n	80024b6 <USARTx_IRQHandling+0x250>
	{
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX){
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7d5b      	ldrb	r3, [r3, #21]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d16f      	bne.n	80024b6 <USARTx_IRQHandling+0x250>

			if(pUSARTHandle -> RxLen > 0)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d05c      	beq.n	8002498 <USARTx_IRQHandling+0x232>
			{
				/*9 bits*/
				if(pUSARTHandle -> pUSARTx -> CR1 & USART_CR1_M)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d032      	beq.n	8002452 <USARTx_IRQHandling+0x1ec>
				{

					/*Si no se configura la paridad*/
					if(!(pUSARTHandle -> pUSARTx -> CR1 & USART_CR1_PCE))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d119      	bne.n	800242e <USARTx_IRQHandling+0x1c8>
					{

						*((uint16_t*)pUSARTHandle-> pRxBuffer) = ((pUSARTHandle -> pUSARTx -> DR) & (uint16_t)0x1FF);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	b29a      	uxth	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800240a:	b292      	uxth	r2, r2
 800240c:	801a      	strh	r2, [r3, #0]
						pUSARTHandle -> pRxBuffer ++;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	609a      	str	r2, [r3, #8]
						pUSARTHandle -> pRxBuffer ++;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	609a      	str	r2, [r3, #8]
						pUSARTHandle -> RxLen -= 2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	1e9a      	subs	r2, r3, #2
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	611a      	str	r2, [r3, #16]
 800242c:	e034      	b.n	8002498 <USARTx_IRQHandling+0x232>
					}
					else /*Si se configura la paridad*/
					{
						*pUSARTHandle -> pRxBuffer = ((pUSARTHandle -> pUSARTx -> DR) & (uint8_t)0xFF);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]
						pUSARTHandle -> pRxBuffer++;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	609a      	str	r2, [r3, #8]
						pUSARTHandle -> RxLen -= 1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	1e5a      	subs	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	611a      	str	r2, [r3, #16]
 8002450:	e022      	b.n	8002498 <USARTx_IRQHandling+0x232>
					}
				}
				else /*8 bits*/
				{
					if(!(pUSARTHandle -> pUSARTx -> CR1 & USART_CR1_PCE))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d107      	bne.n	8002470 <USARTx_IRQHandling+0x20a>
					{
						*pUSARTHandle -> pRxBuffer = (uint8_t) (pUSARTHandle -> pUSARTx -> DR & (uint8_t) 0xFF);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e009      	b.n	8002484 <USARTx_IRQHandling+0x21e>
					}
					else /*Solo leemos 7 bits por la paridad*/
					{
						*pUSARTHandle -> pRxBuffer = (uint8_t)(pUSARTHandle -> pUSARTx -> DR & (uint8_t)0x7F);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]
					}

					pUSARTHandle -> pRxBuffer++;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]
					pUSARTHandle -> RxLen -= 1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	1e5a      	subs	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	611a      	str	r2, [r3, #16]

				}
			}
			/*Limpiamos la interrupción cuando se lea toda la data*/
			if(!(pUSARTHandle -> RxLen)){
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <USARTx_IRQHandling+0x250>
				pUSARTHandle -> pUSARTx -> CR1 &=~ USART_CR1_RXNEIE; //Desactivamos la interrupción
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0220 	bic.w	r2, r2, #32
 80024ae:	60da      	str	r2, [r3, #12]
				pUSARTHandle -> RxBusyState = USART_READY; //Indicamos que está listo para recibir
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	755a      	strb	r2, [r3, #21]
		}
	}

	/*CTS flag: para el control*/

	temp1 = pUSARTHandle -> pUSARTx -> SR & USART_SR_CTS;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2300      	movs	r3, #0
 80024be:	75fb      	strb	r3, [r7, #23]
	temp2 = pUSARTHandle -> pUSARTx -> CR3 & USART_CR3_CTSE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	2300      	movs	r3, #0
 80024c8:	75bb      	strb	r3, [r7, #22]
	temp3 = pUSARTHandle -> pUSARTx -> CR3 & USART_CR3_CTSIE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]

	if(temp1 && temp2 && temp3)
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00d      	beq.n	80024f6 <USARTx_IRQHandling+0x290>
 80024da:	7dbb      	ldrb	r3, [r7, #22]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <USARTx_IRQHandling+0x290>
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d007      	beq.n	80024f6 <USARTx_IRQHandling+0x290>
	{
			pUSARTHandle -> pUSARTx -> SR &=~ USART_SR_CTS;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024f4:	601a      	str	r2, [r3, #0]
			//Aquí va una función para indicar por el terminal
	}


}
 80024f6:	bf00      	nop
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <main>:
/* Prototipo de funciones */
void USART2_Callback(void);

/* Función principal */
int main(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af02      	add	r7, sp, #8
	uint8_t cont = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	71fb      	strb	r3, [r7, #7]

	flash_config();
 800250e:	f7ff f901 	bl	8001714 <flash_config>
	PLL_Config(HSI_SOURCE); //Se comenta, ya que, el USART utiliza los 8Mhz en la librería empleada.
 8002512:	2000      	movs	r0, #0
 8002514:	f7ff f960 	bl	80017d8 <PLL_Config>
	#if USE_DELAY_US == 1
		Delay_Init(SystemCoreClock/1000000);
	#else
		Delay_Init(SystemCoreClock/1000);
 8002518:	4b36      	ldr	r3, [pc, #216]	@ (80025f4 <main+0xf0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a36      	ldr	r2, [pc, #216]	@ (80025f8 <main+0xf4>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fcd9 	bl	8000edc <Delay_Init>
	#endif

	/*Configuramos USART*/
	USARTx_Init(&USART2_Config);//USART_Init(USART2, 115200); // Inicialización del USART2
 800252a:	4834      	ldr	r0, [pc, #208]	@ (80025fc <main+0xf8>)
 800252c:	f7ff fb18 	bl	8001b60 <USARTx_Init>
	len = sprintf((char*)Data1, "Usart_Send Data correcto\r\n");
 8002530:	4933      	ldr	r1, [pc, #204]	@ (8002600 <main+0xfc>)
 8002532:	4834      	ldr	r0, [pc, #208]	@ (8002604 <main+0x100>)
 8002534:	f000 f924 	bl	8002780 <siprintf>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	4b32      	ldr	r3, [pc, #200]	@ (8002608 <main+0x104>)
 800253e:	601a      	str	r2, [r3, #0]
	USARTx_Send_Data(USART2, Data1, len);
 8002540:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <main+0x104>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	492f      	ldr	r1, [pc, #188]	@ (8002604 <main+0x100>)
 8002548:	4830      	ldr	r0, [pc, #192]	@ (800260c <main+0x108>)
 800254a:	f7ff fdf9 	bl	8002140 <USARTx_Send_Data>

	/*Activamos interrupción por USART*/
	USARTx_Init_IT(&USART2_Config);
 800254e:	482b      	ldr	r0, [pc, #172]	@ (80025fc <main+0xf8>)
 8002550:	f7ff fdcc 	bl	80020ec <USARTx_Init_IT>
	len = sprintf((char*)Data2, "USART configurado como interrupcion\r\n");
 8002554:	492e      	ldr	r1, [pc, #184]	@ (8002610 <main+0x10c>)
 8002556:	482f      	ldr	r0, [pc, #188]	@ (8002614 <main+0x110>)
 8002558:	f000 f912 	bl	8002780 <siprintf>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	4b29      	ldr	r3, [pc, #164]	@ (8002608 <main+0x104>)
 8002562:	601a      	str	r2, [r3, #0]
	USARTx_SendDataIT(&usart2_handle, Data2, len);
 8002564:	4b28      	ldr	r3, [pc, #160]	@ (8002608 <main+0x104>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	492a      	ldr	r1, [pc, #168]	@ (8002614 <main+0x110>)
 800256c:	482a      	ldr	r0, [pc, #168]	@ (8002618 <main+0x114>)
 800256e:	f7ff fe2f 	bl	80021d0 <USARTx_SendDataIT>
	if(usart2_handle.TxBusyState == USART_READY && cont==0)
 8002572:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <main+0x114>)
 8002574:	7d1b      	ldrb	r3, [r3, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d107      	bne.n	800258a <main+0x86>
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <main+0x86>
	{
		memset((void *)Data2, '\0', sizeof(Data2));
 8002580:	22c8      	movs	r2, #200	@ 0xc8
 8002582:	2100      	movs	r1, #0
 8002584:	4823      	ldr	r0, [pc, #140]	@ (8002614 <main+0x110>)
 8002586:	f000 f91b 	bl	80027c0 <memset>
	}

	/*Configuramos entradas y salidas*/
	GPIO_Output_Config(GPIOA, 5, PUPDR_NONE, OSPEEDR_HIGH, OTYPER_PP);
 800258a:	2300      	movs	r3, #0
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2302      	movs	r3, #2
 8002590:	2200      	movs	r2, #0
 8002592:	2105      	movs	r1, #5
 8002594:	4821      	ldr	r0, [pc, #132]	@ (800261c <main+0x118>)
 8002596:	f7fe fdf1 	bl	800117c <GPIO_Output_Config>
	GPIO_Input_Config(GPIOC, 13, PUPDR_NONE, &exti_button);
 800259a:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <main+0x11c>)
 800259c:	2200      	movs	r2, #0
 800259e:	210d      	movs	r1, #13
 80025a0:	4820      	ldr	r0, [pc, #128]	@ (8002624 <main+0x120>)
 80025a2:	f7fe fd45 	bl	8001030 <GPIO_Input_Config>

	USARTx_ReceiveDataIT(&usart2_handle, DataRx, 10);
 80025a6:	220a      	movs	r2, #10
 80025a8:	491f      	ldr	r1, [pc, #124]	@ (8002628 <main+0x124>)
 80025aa:	481b      	ldr	r0, [pc, #108]	@ (8002618 <main+0x114>)
 80025ac:	f7ff fe34 	bl	8002218 <USARTx_ReceiveDataIT>
	while(1)
	{
		GPIO_Write_Toggle(GPIOA, 5);
 80025b0:	2105      	movs	r1, #5
 80025b2:	481a      	ldr	r0, [pc, #104]	@ (800261c <main+0x118>)
 80025b4:	f7fe fe96 	bl	80012e4 <GPIO_Write_Toggle>
		delay_ms(100);
 80025b8:	2064      	movs	r0, #100	@ 0x64
 80025ba:	f7fe fcbb 	bl	8000f34 <delay_ms>

		/*Echo*/
		if(usart2_handle.RxBusyState == USART_READY && cont==0)
 80025be:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <main+0x114>)
 80025c0:	7d5b      	ldrb	r3, [r3, #21]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f4      	bne.n	80025b0 <main+0xac>
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f1      	bne.n	80025b0 <main+0xac>
		{
			cont++;
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	3301      	adds	r3, #1
 80025d0:	71fb      	strb	r3, [r7, #7]
			len = sprintf((char*)Data2, "\nUSART Echo: %s\r\n",DataRx);
 80025d2:	4a15      	ldr	r2, [pc, #84]	@ (8002628 <main+0x124>)
 80025d4:	4915      	ldr	r1, [pc, #84]	@ (800262c <main+0x128>)
 80025d6:	480f      	ldr	r0, [pc, #60]	@ (8002614 <main+0x110>)
 80025d8:	f000 f8d2 	bl	8002780 <siprintf>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <main+0x104>)
 80025e2:	601a      	str	r2, [r3, #0]
			USARTx_SendDataIT(&usart2_handle, Data2, len);
 80025e4:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <main+0x104>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	490a      	ldr	r1, [pc, #40]	@ (8002614 <main+0x110>)
 80025ec:	480a      	ldr	r0, [pc, #40]	@ (8002618 <main+0x114>)
 80025ee:	f7ff fdef 	bl	80021d0 <USARTx_SendDataIT>
		GPIO_Write_Toggle(GPIOA, 5);
 80025f2:	e7dd      	b.n	80025b0 <main+0xac>
 80025f4:	20000000 	.word	0x20000000
 80025f8:	10624dd3 	.word	0x10624dd3
 80025fc:	2000001c 	.word	0x2000001c
 8002600:	080030d8 	.word	0x080030d8
 8002604:	200000a0 	.word	0x200000a0
 8002608:	20000230 	.word	0x20000230
 800260c:	40004400 	.word	0x40004400
 8002610:	080030f4 	.word	0x080030f4
 8002614:	20000168 	.word	0x20000168
 8002618:	20000004 	.word	0x20000004
 800261c:	40020000 	.word	0x40020000
 8002620:	2000009c 	.word	0x2000009c
 8002624:	40020800 	.word	0x40020800
 8002628:	20000234 	.word	0x20000234
 800262c:	0800311c 	.word	0x0800311c

08002630 <USART2_Callback>:
		}
	}
}

void USART2_Callback(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
	USARTx_IRQHandling(&usart2_handle);
 8002634:	4802      	ldr	r0, [pc, #8]	@ (8002640 <USART2_Callback+0x10>)
 8002636:	f7ff fe16 	bl	8002266 <USARTx_IRQHandling>
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000004 	.word	0x20000004

08002644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  while (1)
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <NMI_Handler+0x4>

0800264c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0

  while (1)
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <HardFault_Handler+0x4>

08002654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  while (1)
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <MemManage_Handler+0x4>

0800265c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  while (1)
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <BusFault_Handler+0x4>

08002664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <UsageFault_Handler+0x4>

0800266c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0

}
 800267e:	bf00      	nop
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0

}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
	uwTick++;
 800269c:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <SysTick_Handler+0x18>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a03      	ldr	r2, [pc, #12]	@ (80026b0 <SysTick_Handler+0x18>)
 80026a4:	6013      	str	r3, [r2, #0]
}
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	20000098 	.word	0x20000098

080026b4 <USART2_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/


void USART2_IRQHandler()
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	USART2_Callback();
 80026b8:	f7ff ffba 	bl	8002630 <USART2_Callback>
	return;
 80026bc:	bf00      	nop
}
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c8:	4a14      	ldr	r2, [pc, #80]	@ (800271c <_sbrk+0x5c>)
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <_sbrk+0x60>)
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d4:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026dc:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <_sbrk+0x64>)
 80026de:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <_sbrk+0x68>)
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <_sbrk+0x64>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d207      	bcs.n	8002700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f0:	f000 f86e 	bl	80027d0 <__errno>
 80026f4:	4603      	mov	r3, r0
 80026f6:	220c      	movs	r2, #12
 80026f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
 80026fe:	e009      	b.n	8002714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002700:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002706:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	4a05      	ldr	r2, [pc, #20]	@ (8002724 <_sbrk+0x64>)
 8002710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002712:	68fb      	ldr	r3, [r7, #12]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20018000 	.word	0x20018000
 8002720:	00000400 	.word	0x00000400
 8002724:	20000298 	.word	0x20000298
 8002728:	200003e8 	.word	0x200003e8

0800272c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800272c:	480d      	ldr	r0, [pc, #52]	@ (8002764 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800272e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002730:	f7fe fb0c 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002734:	480c      	ldr	r0, [pc, #48]	@ (8002768 <LoopForever+0x6>)
  ldr r1, =_edata
 8002736:	490d      	ldr	r1, [pc, #52]	@ (800276c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002738:	4a0d      	ldr	r2, [pc, #52]	@ (8002770 <LoopForever+0xe>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800274c:	4c0a      	ldr	r4, [pc, #40]	@ (8002778 <LoopForever+0x16>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800275a:	f000 f83f 	bl	80027dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800275e:	f7ff fed1 	bl	8002504 <main>

08002762 <LoopForever>:

LoopForever:
  b LoopForever
 8002762:	e7fe      	b.n	8002762 <LoopForever>
  ldr   r0, =_estack
 8002764:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800276c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002770:	0800318c 	.word	0x0800318c
  ldr r2, =_sbss
 8002774:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002778:	200003e4 	.word	0x200003e4

0800277c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800277c:	e7fe      	b.n	800277c <ADC_IRQHandler>
	...

08002780 <siprintf>:
 8002780:	b40e      	push	{r1, r2, r3}
 8002782:	b500      	push	{lr}
 8002784:	b09c      	sub	sp, #112	@ 0x70
 8002786:	ab1d      	add	r3, sp, #116	@ 0x74
 8002788:	9002      	str	r0, [sp, #8]
 800278a:	9006      	str	r0, [sp, #24]
 800278c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002790:	4809      	ldr	r0, [pc, #36]	@ (80027b8 <siprintf+0x38>)
 8002792:	9107      	str	r1, [sp, #28]
 8002794:	9104      	str	r1, [sp, #16]
 8002796:	4909      	ldr	r1, [pc, #36]	@ (80027bc <siprintf+0x3c>)
 8002798:	f853 2b04 	ldr.w	r2, [r3], #4
 800279c:	9105      	str	r1, [sp, #20]
 800279e:	6800      	ldr	r0, [r0, #0]
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	a902      	add	r1, sp, #8
 80027a4:	f000 f994 	bl	8002ad0 <_svfiprintf_r>
 80027a8:	9b02      	ldr	r3, [sp, #8]
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	b01c      	add	sp, #112	@ 0x70
 80027b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80027b4:	b003      	add	sp, #12
 80027b6:	4770      	bx	lr
 80027b8:	2000002c 	.word	0x2000002c
 80027bc:	ffff0208 	.word	0xffff0208

080027c0 <memset>:
 80027c0:	4402      	add	r2, r0
 80027c2:	4603      	mov	r3, r0
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d100      	bne.n	80027ca <memset+0xa>
 80027c8:	4770      	bx	lr
 80027ca:	f803 1b01 	strb.w	r1, [r3], #1
 80027ce:	e7f9      	b.n	80027c4 <memset+0x4>

080027d0 <__errno>:
 80027d0:	4b01      	ldr	r3, [pc, #4]	@ (80027d8 <__errno+0x8>)
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	2000002c 	.word	0x2000002c

080027dc <__libc_init_array>:
 80027dc:	b570      	push	{r4, r5, r6, lr}
 80027de:	4d0d      	ldr	r5, [pc, #52]	@ (8002814 <__libc_init_array+0x38>)
 80027e0:	4c0d      	ldr	r4, [pc, #52]	@ (8002818 <__libc_init_array+0x3c>)
 80027e2:	1b64      	subs	r4, r4, r5
 80027e4:	10a4      	asrs	r4, r4, #2
 80027e6:	2600      	movs	r6, #0
 80027e8:	42a6      	cmp	r6, r4
 80027ea:	d109      	bne.n	8002800 <__libc_init_array+0x24>
 80027ec:	4d0b      	ldr	r5, [pc, #44]	@ (800281c <__libc_init_array+0x40>)
 80027ee:	4c0c      	ldr	r4, [pc, #48]	@ (8002820 <__libc_init_array+0x44>)
 80027f0:	f000 fc66 	bl	80030c0 <_init>
 80027f4:	1b64      	subs	r4, r4, r5
 80027f6:	10a4      	asrs	r4, r4, #2
 80027f8:	2600      	movs	r6, #0
 80027fa:	42a6      	cmp	r6, r4
 80027fc:	d105      	bne.n	800280a <__libc_init_array+0x2e>
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	f855 3b04 	ldr.w	r3, [r5], #4
 8002804:	4798      	blx	r3
 8002806:	3601      	adds	r6, #1
 8002808:	e7ee      	b.n	80027e8 <__libc_init_array+0xc>
 800280a:	f855 3b04 	ldr.w	r3, [r5], #4
 800280e:	4798      	blx	r3
 8002810:	3601      	adds	r6, #1
 8002812:	e7f2      	b.n	80027fa <__libc_init_array+0x1e>
 8002814:	08003184 	.word	0x08003184
 8002818:	08003184 	.word	0x08003184
 800281c:	08003184 	.word	0x08003184
 8002820:	08003188 	.word	0x08003188

08002824 <__retarget_lock_acquire_recursive>:
 8002824:	4770      	bx	lr

08002826 <__retarget_lock_release_recursive>:
 8002826:	4770      	bx	lr

08002828 <_free_r>:
 8002828:	b538      	push	{r3, r4, r5, lr}
 800282a:	4605      	mov	r5, r0
 800282c:	2900      	cmp	r1, #0
 800282e:	d041      	beq.n	80028b4 <_free_r+0x8c>
 8002830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002834:	1f0c      	subs	r4, r1, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	bfb8      	it	lt
 800283a:	18e4      	addlt	r4, r4, r3
 800283c:	f000 f8e0 	bl	8002a00 <__malloc_lock>
 8002840:	4a1d      	ldr	r2, [pc, #116]	@ (80028b8 <_free_r+0x90>)
 8002842:	6813      	ldr	r3, [r2, #0]
 8002844:	b933      	cbnz	r3, 8002854 <_free_r+0x2c>
 8002846:	6063      	str	r3, [r4, #4]
 8002848:	6014      	str	r4, [r2, #0]
 800284a:	4628      	mov	r0, r5
 800284c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002850:	f000 b8dc 	b.w	8002a0c <__malloc_unlock>
 8002854:	42a3      	cmp	r3, r4
 8002856:	d908      	bls.n	800286a <_free_r+0x42>
 8002858:	6820      	ldr	r0, [r4, #0]
 800285a:	1821      	adds	r1, r4, r0
 800285c:	428b      	cmp	r3, r1
 800285e:	bf01      	itttt	eq
 8002860:	6819      	ldreq	r1, [r3, #0]
 8002862:	685b      	ldreq	r3, [r3, #4]
 8002864:	1809      	addeq	r1, r1, r0
 8002866:	6021      	streq	r1, [r4, #0]
 8002868:	e7ed      	b.n	8002846 <_free_r+0x1e>
 800286a:	461a      	mov	r2, r3
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	b10b      	cbz	r3, 8002874 <_free_r+0x4c>
 8002870:	42a3      	cmp	r3, r4
 8002872:	d9fa      	bls.n	800286a <_free_r+0x42>
 8002874:	6811      	ldr	r1, [r2, #0]
 8002876:	1850      	adds	r0, r2, r1
 8002878:	42a0      	cmp	r0, r4
 800287a:	d10b      	bne.n	8002894 <_free_r+0x6c>
 800287c:	6820      	ldr	r0, [r4, #0]
 800287e:	4401      	add	r1, r0
 8002880:	1850      	adds	r0, r2, r1
 8002882:	4283      	cmp	r3, r0
 8002884:	6011      	str	r1, [r2, #0]
 8002886:	d1e0      	bne.n	800284a <_free_r+0x22>
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	6053      	str	r3, [r2, #4]
 800288e:	4408      	add	r0, r1
 8002890:	6010      	str	r0, [r2, #0]
 8002892:	e7da      	b.n	800284a <_free_r+0x22>
 8002894:	d902      	bls.n	800289c <_free_r+0x74>
 8002896:	230c      	movs	r3, #12
 8002898:	602b      	str	r3, [r5, #0]
 800289a:	e7d6      	b.n	800284a <_free_r+0x22>
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	1821      	adds	r1, r4, r0
 80028a0:	428b      	cmp	r3, r1
 80028a2:	bf04      	itt	eq
 80028a4:	6819      	ldreq	r1, [r3, #0]
 80028a6:	685b      	ldreq	r3, [r3, #4]
 80028a8:	6063      	str	r3, [r4, #4]
 80028aa:	bf04      	itt	eq
 80028ac:	1809      	addeq	r1, r1, r0
 80028ae:	6021      	streq	r1, [r4, #0]
 80028b0:	6054      	str	r4, [r2, #4]
 80028b2:	e7ca      	b.n	800284a <_free_r+0x22>
 80028b4:	bd38      	pop	{r3, r4, r5, pc}
 80028b6:	bf00      	nop
 80028b8:	200003e0 	.word	0x200003e0

080028bc <sbrk_aligned>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	4e0f      	ldr	r6, [pc, #60]	@ (80028fc <sbrk_aligned+0x40>)
 80028c0:	460c      	mov	r4, r1
 80028c2:	6831      	ldr	r1, [r6, #0]
 80028c4:	4605      	mov	r5, r0
 80028c6:	b911      	cbnz	r1, 80028ce <sbrk_aligned+0x12>
 80028c8:	f000 fba6 	bl	8003018 <_sbrk_r>
 80028cc:	6030      	str	r0, [r6, #0]
 80028ce:	4621      	mov	r1, r4
 80028d0:	4628      	mov	r0, r5
 80028d2:	f000 fba1 	bl	8003018 <_sbrk_r>
 80028d6:	1c43      	adds	r3, r0, #1
 80028d8:	d103      	bne.n	80028e2 <sbrk_aligned+0x26>
 80028da:	f04f 34ff 	mov.w	r4, #4294967295
 80028de:	4620      	mov	r0, r4
 80028e0:	bd70      	pop	{r4, r5, r6, pc}
 80028e2:	1cc4      	adds	r4, r0, #3
 80028e4:	f024 0403 	bic.w	r4, r4, #3
 80028e8:	42a0      	cmp	r0, r4
 80028ea:	d0f8      	beq.n	80028de <sbrk_aligned+0x22>
 80028ec:	1a21      	subs	r1, r4, r0
 80028ee:	4628      	mov	r0, r5
 80028f0:	f000 fb92 	bl	8003018 <_sbrk_r>
 80028f4:	3001      	adds	r0, #1
 80028f6:	d1f2      	bne.n	80028de <sbrk_aligned+0x22>
 80028f8:	e7ef      	b.n	80028da <sbrk_aligned+0x1e>
 80028fa:	bf00      	nop
 80028fc:	200003dc 	.word	0x200003dc

08002900 <_malloc_r>:
 8002900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002904:	1ccd      	adds	r5, r1, #3
 8002906:	f025 0503 	bic.w	r5, r5, #3
 800290a:	3508      	adds	r5, #8
 800290c:	2d0c      	cmp	r5, #12
 800290e:	bf38      	it	cc
 8002910:	250c      	movcc	r5, #12
 8002912:	2d00      	cmp	r5, #0
 8002914:	4606      	mov	r6, r0
 8002916:	db01      	blt.n	800291c <_malloc_r+0x1c>
 8002918:	42a9      	cmp	r1, r5
 800291a:	d904      	bls.n	8002926 <_malloc_r+0x26>
 800291c:	230c      	movs	r3, #12
 800291e:	6033      	str	r3, [r6, #0]
 8002920:	2000      	movs	r0, #0
 8002922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80029fc <_malloc_r+0xfc>
 800292a:	f000 f869 	bl	8002a00 <__malloc_lock>
 800292e:	f8d8 3000 	ldr.w	r3, [r8]
 8002932:	461c      	mov	r4, r3
 8002934:	bb44      	cbnz	r4, 8002988 <_malloc_r+0x88>
 8002936:	4629      	mov	r1, r5
 8002938:	4630      	mov	r0, r6
 800293a:	f7ff ffbf 	bl	80028bc <sbrk_aligned>
 800293e:	1c43      	adds	r3, r0, #1
 8002940:	4604      	mov	r4, r0
 8002942:	d158      	bne.n	80029f6 <_malloc_r+0xf6>
 8002944:	f8d8 4000 	ldr.w	r4, [r8]
 8002948:	4627      	mov	r7, r4
 800294a:	2f00      	cmp	r7, #0
 800294c:	d143      	bne.n	80029d6 <_malloc_r+0xd6>
 800294e:	2c00      	cmp	r4, #0
 8002950:	d04b      	beq.n	80029ea <_malloc_r+0xea>
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	4639      	mov	r1, r7
 8002956:	4630      	mov	r0, r6
 8002958:	eb04 0903 	add.w	r9, r4, r3
 800295c:	f000 fb5c 	bl	8003018 <_sbrk_r>
 8002960:	4581      	cmp	r9, r0
 8002962:	d142      	bne.n	80029ea <_malloc_r+0xea>
 8002964:	6821      	ldr	r1, [r4, #0]
 8002966:	1a6d      	subs	r5, r5, r1
 8002968:	4629      	mov	r1, r5
 800296a:	4630      	mov	r0, r6
 800296c:	f7ff ffa6 	bl	80028bc <sbrk_aligned>
 8002970:	3001      	adds	r0, #1
 8002972:	d03a      	beq.n	80029ea <_malloc_r+0xea>
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	442b      	add	r3, r5
 8002978:	6023      	str	r3, [r4, #0]
 800297a:	f8d8 3000 	ldr.w	r3, [r8]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	bb62      	cbnz	r2, 80029dc <_malloc_r+0xdc>
 8002982:	f8c8 7000 	str.w	r7, [r8]
 8002986:	e00f      	b.n	80029a8 <_malloc_r+0xa8>
 8002988:	6822      	ldr	r2, [r4, #0]
 800298a:	1b52      	subs	r2, r2, r5
 800298c:	d420      	bmi.n	80029d0 <_malloc_r+0xd0>
 800298e:	2a0b      	cmp	r2, #11
 8002990:	d917      	bls.n	80029c2 <_malloc_r+0xc2>
 8002992:	1961      	adds	r1, r4, r5
 8002994:	42a3      	cmp	r3, r4
 8002996:	6025      	str	r5, [r4, #0]
 8002998:	bf18      	it	ne
 800299a:	6059      	strne	r1, [r3, #4]
 800299c:	6863      	ldr	r3, [r4, #4]
 800299e:	bf08      	it	eq
 80029a0:	f8c8 1000 	streq.w	r1, [r8]
 80029a4:	5162      	str	r2, [r4, r5]
 80029a6:	604b      	str	r3, [r1, #4]
 80029a8:	4630      	mov	r0, r6
 80029aa:	f000 f82f 	bl	8002a0c <__malloc_unlock>
 80029ae:	f104 000b 	add.w	r0, r4, #11
 80029b2:	1d23      	adds	r3, r4, #4
 80029b4:	f020 0007 	bic.w	r0, r0, #7
 80029b8:	1ac2      	subs	r2, r0, r3
 80029ba:	bf1c      	itt	ne
 80029bc:	1a1b      	subne	r3, r3, r0
 80029be:	50a3      	strne	r3, [r4, r2]
 80029c0:	e7af      	b.n	8002922 <_malloc_r+0x22>
 80029c2:	6862      	ldr	r2, [r4, #4]
 80029c4:	42a3      	cmp	r3, r4
 80029c6:	bf0c      	ite	eq
 80029c8:	f8c8 2000 	streq.w	r2, [r8]
 80029cc:	605a      	strne	r2, [r3, #4]
 80029ce:	e7eb      	b.n	80029a8 <_malloc_r+0xa8>
 80029d0:	4623      	mov	r3, r4
 80029d2:	6864      	ldr	r4, [r4, #4]
 80029d4:	e7ae      	b.n	8002934 <_malloc_r+0x34>
 80029d6:	463c      	mov	r4, r7
 80029d8:	687f      	ldr	r7, [r7, #4]
 80029da:	e7b6      	b.n	800294a <_malloc_r+0x4a>
 80029dc:	461a      	mov	r2, r3
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	42a3      	cmp	r3, r4
 80029e2:	d1fb      	bne.n	80029dc <_malloc_r+0xdc>
 80029e4:	2300      	movs	r3, #0
 80029e6:	6053      	str	r3, [r2, #4]
 80029e8:	e7de      	b.n	80029a8 <_malloc_r+0xa8>
 80029ea:	230c      	movs	r3, #12
 80029ec:	6033      	str	r3, [r6, #0]
 80029ee:	4630      	mov	r0, r6
 80029f0:	f000 f80c 	bl	8002a0c <__malloc_unlock>
 80029f4:	e794      	b.n	8002920 <_malloc_r+0x20>
 80029f6:	6005      	str	r5, [r0, #0]
 80029f8:	e7d6      	b.n	80029a8 <_malloc_r+0xa8>
 80029fa:	bf00      	nop
 80029fc:	200003e0 	.word	0x200003e0

08002a00 <__malloc_lock>:
 8002a00:	4801      	ldr	r0, [pc, #4]	@ (8002a08 <__malloc_lock+0x8>)
 8002a02:	f7ff bf0f 	b.w	8002824 <__retarget_lock_acquire_recursive>
 8002a06:	bf00      	nop
 8002a08:	200003d8 	.word	0x200003d8

08002a0c <__malloc_unlock>:
 8002a0c:	4801      	ldr	r0, [pc, #4]	@ (8002a14 <__malloc_unlock+0x8>)
 8002a0e:	f7ff bf0a 	b.w	8002826 <__retarget_lock_release_recursive>
 8002a12:	bf00      	nop
 8002a14:	200003d8 	.word	0x200003d8

08002a18 <__ssputs_r>:
 8002a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a1c:	688e      	ldr	r6, [r1, #8]
 8002a1e:	461f      	mov	r7, r3
 8002a20:	42be      	cmp	r6, r7
 8002a22:	680b      	ldr	r3, [r1, #0]
 8002a24:	4682      	mov	sl, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	4690      	mov	r8, r2
 8002a2a:	d82d      	bhi.n	8002a88 <__ssputs_r+0x70>
 8002a2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002a34:	d026      	beq.n	8002a84 <__ssputs_r+0x6c>
 8002a36:	6965      	ldr	r5, [r4, #20]
 8002a38:	6909      	ldr	r1, [r1, #16]
 8002a3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a3e:	eba3 0901 	sub.w	r9, r3, r1
 8002a42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a46:	1c7b      	adds	r3, r7, #1
 8002a48:	444b      	add	r3, r9
 8002a4a:	106d      	asrs	r5, r5, #1
 8002a4c:	429d      	cmp	r5, r3
 8002a4e:	bf38      	it	cc
 8002a50:	461d      	movcc	r5, r3
 8002a52:	0553      	lsls	r3, r2, #21
 8002a54:	d527      	bpl.n	8002aa6 <__ssputs_r+0x8e>
 8002a56:	4629      	mov	r1, r5
 8002a58:	f7ff ff52 	bl	8002900 <_malloc_r>
 8002a5c:	4606      	mov	r6, r0
 8002a5e:	b360      	cbz	r0, 8002aba <__ssputs_r+0xa2>
 8002a60:	6921      	ldr	r1, [r4, #16]
 8002a62:	464a      	mov	r2, r9
 8002a64:	f000 fae8 	bl	8003038 <memcpy>
 8002a68:	89a3      	ldrh	r3, [r4, #12]
 8002a6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a72:	81a3      	strh	r3, [r4, #12]
 8002a74:	6126      	str	r6, [r4, #16]
 8002a76:	6165      	str	r5, [r4, #20]
 8002a78:	444e      	add	r6, r9
 8002a7a:	eba5 0509 	sub.w	r5, r5, r9
 8002a7e:	6026      	str	r6, [r4, #0]
 8002a80:	60a5      	str	r5, [r4, #8]
 8002a82:	463e      	mov	r6, r7
 8002a84:	42be      	cmp	r6, r7
 8002a86:	d900      	bls.n	8002a8a <__ssputs_r+0x72>
 8002a88:	463e      	mov	r6, r7
 8002a8a:	6820      	ldr	r0, [r4, #0]
 8002a8c:	4632      	mov	r2, r6
 8002a8e:	4641      	mov	r1, r8
 8002a90:	f000 faa8 	bl	8002fe4 <memmove>
 8002a94:	68a3      	ldr	r3, [r4, #8]
 8002a96:	1b9b      	subs	r3, r3, r6
 8002a98:	60a3      	str	r3, [r4, #8]
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	4433      	add	r3, r6
 8002a9e:	6023      	str	r3, [r4, #0]
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aa6:	462a      	mov	r2, r5
 8002aa8:	f000 fad4 	bl	8003054 <_realloc_r>
 8002aac:	4606      	mov	r6, r0
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d1e0      	bne.n	8002a74 <__ssputs_r+0x5c>
 8002ab2:	6921      	ldr	r1, [r4, #16]
 8002ab4:	4650      	mov	r0, sl
 8002ab6:	f7ff feb7 	bl	8002828 <_free_r>
 8002aba:	230c      	movs	r3, #12
 8002abc:	f8ca 3000 	str.w	r3, [sl]
 8002ac0:	89a3      	ldrh	r3, [r4, #12]
 8002ac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ac6:	81a3      	strh	r3, [r4, #12]
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8002acc:	e7e9      	b.n	8002aa2 <__ssputs_r+0x8a>
	...

08002ad0 <_svfiprintf_r>:
 8002ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad4:	4698      	mov	r8, r3
 8002ad6:	898b      	ldrh	r3, [r1, #12]
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	b09d      	sub	sp, #116	@ 0x74
 8002adc:	4607      	mov	r7, r0
 8002ade:	460d      	mov	r5, r1
 8002ae0:	4614      	mov	r4, r2
 8002ae2:	d510      	bpl.n	8002b06 <_svfiprintf_r+0x36>
 8002ae4:	690b      	ldr	r3, [r1, #16]
 8002ae6:	b973      	cbnz	r3, 8002b06 <_svfiprintf_r+0x36>
 8002ae8:	2140      	movs	r1, #64	@ 0x40
 8002aea:	f7ff ff09 	bl	8002900 <_malloc_r>
 8002aee:	6028      	str	r0, [r5, #0]
 8002af0:	6128      	str	r0, [r5, #16]
 8002af2:	b930      	cbnz	r0, 8002b02 <_svfiprintf_r+0x32>
 8002af4:	230c      	movs	r3, #12
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	f04f 30ff 	mov.w	r0, #4294967295
 8002afc:	b01d      	add	sp, #116	@ 0x74
 8002afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b02:	2340      	movs	r3, #64	@ 0x40
 8002b04:	616b      	str	r3, [r5, #20]
 8002b06:	2300      	movs	r3, #0
 8002b08:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b14:	2330      	movs	r3, #48	@ 0x30
 8002b16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002cb4 <_svfiprintf_r+0x1e4>
 8002b1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002b1e:	f04f 0901 	mov.w	r9, #1
 8002b22:	4623      	mov	r3, r4
 8002b24:	469a      	mov	sl, r3
 8002b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b2a:	b10a      	cbz	r2, 8002b30 <_svfiprintf_r+0x60>
 8002b2c:	2a25      	cmp	r2, #37	@ 0x25
 8002b2e:	d1f9      	bne.n	8002b24 <_svfiprintf_r+0x54>
 8002b30:	ebba 0b04 	subs.w	fp, sl, r4
 8002b34:	d00b      	beq.n	8002b4e <_svfiprintf_r+0x7e>
 8002b36:	465b      	mov	r3, fp
 8002b38:	4622      	mov	r2, r4
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	4638      	mov	r0, r7
 8002b3e:	f7ff ff6b 	bl	8002a18 <__ssputs_r>
 8002b42:	3001      	adds	r0, #1
 8002b44:	f000 80a7 	beq.w	8002c96 <_svfiprintf_r+0x1c6>
 8002b48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002b4a:	445a      	add	r2, fp
 8002b4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 809f 	beq.w	8002c96 <_svfiprintf_r+0x1c6>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b62:	f10a 0a01 	add.w	sl, sl, #1
 8002b66:	9304      	str	r3, [sp, #16]
 8002b68:	9307      	str	r3, [sp, #28]
 8002b6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b70:	4654      	mov	r4, sl
 8002b72:	2205      	movs	r2, #5
 8002b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b78:	484e      	ldr	r0, [pc, #312]	@ (8002cb4 <_svfiprintf_r+0x1e4>)
 8002b7a:	f7fd fb31 	bl	80001e0 <memchr>
 8002b7e:	9a04      	ldr	r2, [sp, #16]
 8002b80:	b9d8      	cbnz	r0, 8002bba <_svfiprintf_r+0xea>
 8002b82:	06d0      	lsls	r0, r2, #27
 8002b84:	bf44      	itt	mi
 8002b86:	2320      	movmi	r3, #32
 8002b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b8c:	0711      	lsls	r1, r2, #28
 8002b8e:	bf44      	itt	mi
 8002b90:	232b      	movmi	r3, #43	@ 0x2b
 8002b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b96:	f89a 3000 	ldrb.w	r3, [sl]
 8002b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b9c:	d015      	beq.n	8002bca <_svfiprintf_r+0xfa>
 8002b9e:	9a07      	ldr	r2, [sp, #28]
 8002ba0:	4654      	mov	r4, sl
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f04f 0c0a 	mov.w	ip, #10
 8002ba8:	4621      	mov	r1, r4
 8002baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bae:	3b30      	subs	r3, #48	@ 0x30
 8002bb0:	2b09      	cmp	r3, #9
 8002bb2:	d94b      	bls.n	8002c4c <_svfiprintf_r+0x17c>
 8002bb4:	b1b0      	cbz	r0, 8002be4 <_svfiprintf_r+0x114>
 8002bb6:	9207      	str	r2, [sp, #28]
 8002bb8:	e014      	b.n	8002be4 <_svfiprintf_r+0x114>
 8002bba:	eba0 0308 	sub.w	r3, r0, r8
 8002bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	9304      	str	r3, [sp, #16]
 8002bc6:	46a2      	mov	sl, r4
 8002bc8:	e7d2      	b.n	8002b70 <_svfiprintf_r+0xa0>
 8002bca:	9b03      	ldr	r3, [sp, #12]
 8002bcc:	1d19      	adds	r1, r3, #4
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	9103      	str	r1, [sp, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bfbb      	ittet	lt
 8002bd6:	425b      	neglt	r3, r3
 8002bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8002bdc:	9307      	strge	r3, [sp, #28]
 8002bde:	9307      	strlt	r3, [sp, #28]
 8002be0:	bfb8      	it	lt
 8002be2:	9204      	strlt	r2, [sp, #16]
 8002be4:	7823      	ldrb	r3, [r4, #0]
 8002be6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002be8:	d10a      	bne.n	8002c00 <_svfiprintf_r+0x130>
 8002bea:	7863      	ldrb	r3, [r4, #1]
 8002bec:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bee:	d132      	bne.n	8002c56 <_svfiprintf_r+0x186>
 8002bf0:	9b03      	ldr	r3, [sp, #12]
 8002bf2:	1d1a      	adds	r2, r3, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	9203      	str	r2, [sp, #12]
 8002bf8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002bfc:	3402      	adds	r4, #2
 8002bfe:	9305      	str	r3, [sp, #20]
 8002c00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002cc4 <_svfiprintf_r+0x1f4>
 8002c04:	7821      	ldrb	r1, [r4, #0]
 8002c06:	2203      	movs	r2, #3
 8002c08:	4650      	mov	r0, sl
 8002c0a:	f7fd fae9 	bl	80001e0 <memchr>
 8002c0e:	b138      	cbz	r0, 8002c20 <_svfiprintf_r+0x150>
 8002c10:	9b04      	ldr	r3, [sp, #16]
 8002c12:	eba0 000a 	sub.w	r0, r0, sl
 8002c16:	2240      	movs	r2, #64	@ 0x40
 8002c18:	4082      	lsls	r2, r0
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	3401      	adds	r4, #1
 8002c1e:	9304      	str	r3, [sp, #16]
 8002c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c24:	4824      	ldr	r0, [pc, #144]	@ (8002cb8 <_svfiprintf_r+0x1e8>)
 8002c26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002c2a:	2206      	movs	r2, #6
 8002c2c:	f7fd fad8 	bl	80001e0 <memchr>
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d036      	beq.n	8002ca2 <_svfiprintf_r+0x1d2>
 8002c34:	4b21      	ldr	r3, [pc, #132]	@ (8002cbc <_svfiprintf_r+0x1ec>)
 8002c36:	bb1b      	cbnz	r3, 8002c80 <_svfiprintf_r+0x1b0>
 8002c38:	9b03      	ldr	r3, [sp, #12]
 8002c3a:	3307      	adds	r3, #7
 8002c3c:	f023 0307 	bic.w	r3, r3, #7
 8002c40:	3308      	adds	r3, #8
 8002c42:	9303      	str	r3, [sp, #12]
 8002c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c46:	4433      	add	r3, r6
 8002c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c4a:	e76a      	b.n	8002b22 <_svfiprintf_r+0x52>
 8002c4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c50:	460c      	mov	r4, r1
 8002c52:	2001      	movs	r0, #1
 8002c54:	e7a8      	b.n	8002ba8 <_svfiprintf_r+0xd8>
 8002c56:	2300      	movs	r3, #0
 8002c58:	3401      	adds	r4, #1
 8002c5a:	9305      	str	r3, [sp, #20]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f04f 0c0a 	mov.w	ip, #10
 8002c62:	4620      	mov	r0, r4
 8002c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c68:	3a30      	subs	r2, #48	@ 0x30
 8002c6a:	2a09      	cmp	r2, #9
 8002c6c:	d903      	bls.n	8002c76 <_svfiprintf_r+0x1a6>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0c6      	beq.n	8002c00 <_svfiprintf_r+0x130>
 8002c72:	9105      	str	r1, [sp, #20]
 8002c74:	e7c4      	b.n	8002c00 <_svfiprintf_r+0x130>
 8002c76:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e7f0      	b.n	8002c62 <_svfiprintf_r+0x192>
 8002c80:	ab03      	add	r3, sp, #12
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	462a      	mov	r2, r5
 8002c86:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc0 <_svfiprintf_r+0x1f0>)
 8002c88:	a904      	add	r1, sp, #16
 8002c8a:	4638      	mov	r0, r7
 8002c8c:	f3af 8000 	nop.w
 8002c90:	1c42      	adds	r2, r0, #1
 8002c92:	4606      	mov	r6, r0
 8002c94:	d1d6      	bne.n	8002c44 <_svfiprintf_r+0x174>
 8002c96:	89ab      	ldrh	r3, [r5, #12]
 8002c98:	065b      	lsls	r3, r3, #25
 8002c9a:	f53f af2d 	bmi.w	8002af8 <_svfiprintf_r+0x28>
 8002c9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ca0:	e72c      	b.n	8002afc <_svfiprintf_r+0x2c>
 8002ca2:	ab03      	add	r3, sp, #12
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	462a      	mov	r2, r5
 8002ca8:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <_svfiprintf_r+0x1f0>)
 8002caa:	a904      	add	r1, sp, #16
 8002cac:	4638      	mov	r0, r7
 8002cae:	f000 f879 	bl	8002da4 <_printf_i>
 8002cb2:	e7ed      	b.n	8002c90 <_svfiprintf_r+0x1c0>
 8002cb4:	08003148 	.word	0x08003148
 8002cb8:	08003152 	.word	0x08003152
 8002cbc:	00000000 	.word	0x00000000
 8002cc0:	08002a19 	.word	0x08002a19
 8002cc4:	0800314e 	.word	0x0800314e

08002cc8 <_printf_common>:
 8002cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ccc:	4616      	mov	r6, r2
 8002cce:	4698      	mov	r8, r3
 8002cd0:	688a      	ldr	r2, [r1, #8]
 8002cd2:	690b      	ldr	r3, [r1, #16]
 8002cd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bfb8      	it	lt
 8002cdc:	4613      	movlt	r3, r2
 8002cde:	6033      	str	r3, [r6, #0]
 8002ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002ce4:	4607      	mov	r7, r0
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	b10a      	cbz	r2, 8002cee <_printf_common+0x26>
 8002cea:	3301      	adds	r3, #1
 8002cec:	6033      	str	r3, [r6, #0]
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	0699      	lsls	r1, r3, #26
 8002cf2:	bf42      	ittt	mi
 8002cf4:	6833      	ldrmi	r3, [r6, #0]
 8002cf6:	3302      	addmi	r3, #2
 8002cf8:	6033      	strmi	r3, [r6, #0]
 8002cfa:	6825      	ldr	r5, [r4, #0]
 8002cfc:	f015 0506 	ands.w	r5, r5, #6
 8002d00:	d106      	bne.n	8002d10 <_printf_common+0x48>
 8002d02:	f104 0a19 	add.w	sl, r4, #25
 8002d06:	68e3      	ldr	r3, [r4, #12]
 8002d08:	6832      	ldr	r2, [r6, #0]
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	42ab      	cmp	r3, r5
 8002d0e:	dc26      	bgt.n	8002d5e <_printf_common+0x96>
 8002d10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002d14:	6822      	ldr	r2, [r4, #0]
 8002d16:	3b00      	subs	r3, #0
 8002d18:	bf18      	it	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	0692      	lsls	r2, r2, #26
 8002d1e:	d42b      	bmi.n	8002d78 <_printf_common+0xb0>
 8002d20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002d24:	4641      	mov	r1, r8
 8002d26:	4638      	mov	r0, r7
 8002d28:	47c8      	blx	r9
 8002d2a:	3001      	adds	r0, #1
 8002d2c:	d01e      	beq.n	8002d6c <_printf_common+0xa4>
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	6922      	ldr	r2, [r4, #16]
 8002d32:	f003 0306 	and.w	r3, r3, #6
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	bf02      	ittt	eq
 8002d3a:	68e5      	ldreq	r5, [r4, #12]
 8002d3c:	6833      	ldreq	r3, [r6, #0]
 8002d3e:	1aed      	subeq	r5, r5, r3
 8002d40:	68a3      	ldr	r3, [r4, #8]
 8002d42:	bf0c      	ite	eq
 8002d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d48:	2500      	movne	r5, #0
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	bfc4      	itt	gt
 8002d4e:	1a9b      	subgt	r3, r3, r2
 8002d50:	18ed      	addgt	r5, r5, r3
 8002d52:	2600      	movs	r6, #0
 8002d54:	341a      	adds	r4, #26
 8002d56:	42b5      	cmp	r5, r6
 8002d58:	d11a      	bne.n	8002d90 <_printf_common+0xc8>
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	e008      	b.n	8002d70 <_printf_common+0xa8>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4652      	mov	r2, sl
 8002d62:	4641      	mov	r1, r8
 8002d64:	4638      	mov	r0, r7
 8002d66:	47c8      	blx	r9
 8002d68:	3001      	adds	r0, #1
 8002d6a:	d103      	bne.n	8002d74 <_printf_common+0xac>
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d74:	3501      	adds	r5, #1
 8002d76:	e7c6      	b.n	8002d06 <_printf_common+0x3e>
 8002d78:	18e1      	adds	r1, r4, r3
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	2030      	movs	r0, #48	@ 0x30
 8002d7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002d82:	4422      	add	r2, r4
 8002d84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002d88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	e7c7      	b.n	8002d20 <_printf_common+0x58>
 8002d90:	2301      	movs	r3, #1
 8002d92:	4622      	mov	r2, r4
 8002d94:	4641      	mov	r1, r8
 8002d96:	4638      	mov	r0, r7
 8002d98:	47c8      	blx	r9
 8002d9a:	3001      	adds	r0, #1
 8002d9c:	d0e6      	beq.n	8002d6c <_printf_common+0xa4>
 8002d9e:	3601      	adds	r6, #1
 8002da0:	e7d9      	b.n	8002d56 <_printf_common+0x8e>
	...

08002da4 <_printf_i>:
 8002da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002da8:	7e0f      	ldrb	r7, [r1, #24]
 8002daa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002dac:	2f78      	cmp	r7, #120	@ 0x78
 8002dae:	4691      	mov	r9, r2
 8002db0:	4680      	mov	r8, r0
 8002db2:	460c      	mov	r4, r1
 8002db4:	469a      	mov	sl, r3
 8002db6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002dba:	d807      	bhi.n	8002dcc <_printf_i+0x28>
 8002dbc:	2f62      	cmp	r7, #98	@ 0x62
 8002dbe:	d80a      	bhi.n	8002dd6 <_printf_i+0x32>
 8002dc0:	2f00      	cmp	r7, #0
 8002dc2:	f000 80d2 	beq.w	8002f6a <_printf_i+0x1c6>
 8002dc6:	2f58      	cmp	r7, #88	@ 0x58
 8002dc8:	f000 80b9 	beq.w	8002f3e <_printf_i+0x19a>
 8002dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002dd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002dd4:	e03a      	b.n	8002e4c <_printf_i+0xa8>
 8002dd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002dda:	2b15      	cmp	r3, #21
 8002ddc:	d8f6      	bhi.n	8002dcc <_printf_i+0x28>
 8002dde:	a101      	add	r1, pc, #4	@ (adr r1, 8002de4 <_printf_i+0x40>)
 8002de0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002de4:	08002e3d 	.word	0x08002e3d
 8002de8:	08002e51 	.word	0x08002e51
 8002dec:	08002dcd 	.word	0x08002dcd
 8002df0:	08002dcd 	.word	0x08002dcd
 8002df4:	08002dcd 	.word	0x08002dcd
 8002df8:	08002dcd 	.word	0x08002dcd
 8002dfc:	08002e51 	.word	0x08002e51
 8002e00:	08002dcd 	.word	0x08002dcd
 8002e04:	08002dcd 	.word	0x08002dcd
 8002e08:	08002dcd 	.word	0x08002dcd
 8002e0c:	08002dcd 	.word	0x08002dcd
 8002e10:	08002f51 	.word	0x08002f51
 8002e14:	08002e7b 	.word	0x08002e7b
 8002e18:	08002f0b 	.word	0x08002f0b
 8002e1c:	08002dcd 	.word	0x08002dcd
 8002e20:	08002dcd 	.word	0x08002dcd
 8002e24:	08002f73 	.word	0x08002f73
 8002e28:	08002dcd 	.word	0x08002dcd
 8002e2c:	08002e7b 	.word	0x08002e7b
 8002e30:	08002dcd 	.word	0x08002dcd
 8002e34:	08002dcd 	.word	0x08002dcd
 8002e38:	08002f13 	.word	0x08002f13
 8002e3c:	6833      	ldr	r3, [r6, #0]
 8002e3e:	1d1a      	adds	r2, r3, #4
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6032      	str	r2, [r6, #0]
 8002e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e09d      	b.n	8002f8c <_printf_i+0x1e8>
 8002e50:	6833      	ldr	r3, [r6, #0]
 8002e52:	6820      	ldr	r0, [r4, #0]
 8002e54:	1d19      	adds	r1, r3, #4
 8002e56:	6031      	str	r1, [r6, #0]
 8002e58:	0606      	lsls	r6, r0, #24
 8002e5a:	d501      	bpl.n	8002e60 <_printf_i+0xbc>
 8002e5c:	681d      	ldr	r5, [r3, #0]
 8002e5e:	e003      	b.n	8002e68 <_printf_i+0xc4>
 8002e60:	0645      	lsls	r5, r0, #25
 8002e62:	d5fb      	bpl.n	8002e5c <_printf_i+0xb8>
 8002e64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002e68:	2d00      	cmp	r5, #0
 8002e6a:	da03      	bge.n	8002e74 <_printf_i+0xd0>
 8002e6c:	232d      	movs	r3, #45	@ 0x2d
 8002e6e:	426d      	negs	r5, r5
 8002e70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e74:	4859      	ldr	r0, [pc, #356]	@ (8002fdc <_printf_i+0x238>)
 8002e76:	230a      	movs	r3, #10
 8002e78:	e011      	b.n	8002e9e <_printf_i+0xfa>
 8002e7a:	6821      	ldr	r1, [r4, #0]
 8002e7c:	6833      	ldr	r3, [r6, #0]
 8002e7e:	0608      	lsls	r0, r1, #24
 8002e80:	f853 5b04 	ldr.w	r5, [r3], #4
 8002e84:	d402      	bmi.n	8002e8c <_printf_i+0xe8>
 8002e86:	0649      	lsls	r1, r1, #25
 8002e88:	bf48      	it	mi
 8002e8a:	b2ad      	uxthmi	r5, r5
 8002e8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002e8e:	4853      	ldr	r0, [pc, #332]	@ (8002fdc <_printf_i+0x238>)
 8002e90:	6033      	str	r3, [r6, #0]
 8002e92:	bf14      	ite	ne
 8002e94:	230a      	movne	r3, #10
 8002e96:	2308      	moveq	r3, #8
 8002e98:	2100      	movs	r1, #0
 8002e9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002e9e:	6866      	ldr	r6, [r4, #4]
 8002ea0:	60a6      	str	r6, [r4, #8]
 8002ea2:	2e00      	cmp	r6, #0
 8002ea4:	bfa2      	ittt	ge
 8002ea6:	6821      	ldrge	r1, [r4, #0]
 8002ea8:	f021 0104 	bicge.w	r1, r1, #4
 8002eac:	6021      	strge	r1, [r4, #0]
 8002eae:	b90d      	cbnz	r5, 8002eb4 <_printf_i+0x110>
 8002eb0:	2e00      	cmp	r6, #0
 8002eb2:	d04b      	beq.n	8002f4c <_printf_i+0x1a8>
 8002eb4:	4616      	mov	r6, r2
 8002eb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8002eba:	fb03 5711 	mls	r7, r3, r1, r5
 8002ebe:	5dc7      	ldrb	r7, [r0, r7]
 8002ec0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ec4:	462f      	mov	r7, r5
 8002ec6:	42bb      	cmp	r3, r7
 8002ec8:	460d      	mov	r5, r1
 8002eca:	d9f4      	bls.n	8002eb6 <_printf_i+0x112>
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d10b      	bne.n	8002ee8 <_printf_i+0x144>
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	07df      	lsls	r7, r3, #31
 8002ed4:	d508      	bpl.n	8002ee8 <_printf_i+0x144>
 8002ed6:	6923      	ldr	r3, [r4, #16]
 8002ed8:	6861      	ldr	r1, [r4, #4]
 8002eda:	4299      	cmp	r1, r3
 8002edc:	bfde      	ittt	le
 8002ede:	2330      	movle	r3, #48	@ 0x30
 8002ee0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ee4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ee8:	1b92      	subs	r2, r2, r6
 8002eea:	6122      	str	r2, [r4, #16]
 8002eec:	f8cd a000 	str.w	sl, [sp]
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	aa03      	add	r2, sp, #12
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	4640      	mov	r0, r8
 8002ef8:	f7ff fee6 	bl	8002cc8 <_printf_common>
 8002efc:	3001      	adds	r0, #1
 8002efe:	d14a      	bne.n	8002f96 <_printf_i+0x1f2>
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	b004      	add	sp, #16
 8002f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	f043 0320 	orr.w	r3, r3, #32
 8002f10:	6023      	str	r3, [r4, #0]
 8002f12:	4833      	ldr	r0, [pc, #204]	@ (8002fe0 <_printf_i+0x23c>)
 8002f14:	2778      	movs	r7, #120	@ 0x78
 8002f16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	6831      	ldr	r1, [r6, #0]
 8002f1e:	061f      	lsls	r7, r3, #24
 8002f20:	f851 5b04 	ldr.w	r5, [r1], #4
 8002f24:	d402      	bmi.n	8002f2c <_printf_i+0x188>
 8002f26:	065f      	lsls	r7, r3, #25
 8002f28:	bf48      	it	mi
 8002f2a:	b2ad      	uxthmi	r5, r5
 8002f2c:	6031      	str	r1, [r6, #0]
 8002f2e:	07d9      	lsls	r1, r3, #31
 8002f30:	bf44      	itt	mi
 8002f32:	f043 0320 	orrmi.w	r3, r3, #32
 8002f36:	6023      	strmi	r3, [r4, #0]
 8002f38:	b11d      	cbz	r5, 8002f42 <_printf_i+0x19e>
 8002f3a:	2310      	movs	r3, #16
 8002f3c:	e7ac      	b.n	8002e98 <_printf_i+0xf4>
 8002f3e:	4827      	ldr	r0, [pc, #156]	@ (8002fdc <_printf_i+0x238>)
 8002f40:	e7e9      	b.n	8002f16 <_printf_i+0x172>
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	f023 0320 	bic.w	r3, r3, #32
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	e7f6      	b.n	8002f3a <_printf_i+0x196>
 8002f4c:	4616      	mov	r6, r2
 8002f4e:	e7bd      	b.n	8002ecc <_printf_i+0x128>
 8002f50:	6833      	ldr	r3, [r6, #0]
 8002f52:	6825      	ldr	r5, [r4, #0]
 8002f54:	6961      	ldr	r1, [r4, #20]
 8002f56:	1d18      	adds	r0, r3, #4
 8002f58:	6030      	str	r0, [r6, #0]
 8002f5a:	062e      	lsls	r6, r5, #24
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	d501      	bpl.n	8002f64 <_printf_i+0x1c0>
 8002f60:	6019      	str	r1, [r3, #0]
 8002f62:	e002      	b.n	8002f6a <_printf_i+0x1c6>
 8002f64:	0668      	lsls	r0, r5, #25
 8002f66:	d5fb      	bpl.n	8002f60 <_printf_i+0x1bc>
 8002f68:	8019      	strh	r1, [r3, #0]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	6123      	str	r3, [r4, #16]
 8002f6e:	4616      	mov	r6, r2
 8002f70:	e7bc      	b.n	8002eec <_printf_i+0x148>
 8002f72:	6833      	ldr	r3, [r6, #0]
 8002f74:	1d1a      	adds	r2, r3, #4
 8002f76:	6032      	str	r2, [r6, #0]
 8002f78:	681e      	ldr	r6, [r3, #0]
 8002f7a:	6862      	ldr	r2, [r4, #4]
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f7fd f92e 	bl	80001e0 <memchr>
 8002f84:	b108      	cbz	r0, 8002f8a <_printf_i+0x1e6>
 8002f86:	1b80      	subs	r0, r0, r6
 8002f88:	6060      	str	r0, [r4, #4]
 8002f8a:	6863      	ldr	r3, [r4, #4]
 8002f8c:	6123      	str	r3, [r4, #16]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f94:	e7aa      	b.n	8002eec <_printf_i+0x148>
 8002f96:	6923      	ldr	r3, [r4, #16]
 8002f98:	4632      	mov	r2, r6
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	4640      	mov	r0, r8
 8002f9e:	47d0      	blx	sl
 8002fa0:	3001      	adds	r0, #1
 8002fa2:	d0ad      	beq.n	8002f00 <_printf_i+0x15c>
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	079b      	lsls	r3, r3, #30
 8002fa8:	d413      	bmi.n	8002fd2 <_printf_i+0x22e>
 8002faa:	68e0      	ldr	r0, [r4, #12]
 8002fac:	9b03      	ldr	r3, [sp, #12]
 8002fae:	4298      	cmp	r0, r3
 8002fb0:	bfb8      	it	lt
 8002fb2:	4618      	movlt	r0, r3
 8002fb4:	e7a6      	b.n	8002f04 <_printf_i+0x160>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	4632      	mov	r2, r6
 8002fba:	4649      	mov	r1, r9
 8002fbc:	4640      	mov	r0, r8
 8002fbe:	47d0      	blx	sl
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	d09d      	beq.n	8002f00 <_printf_i+0x15c>
 8002fc4:	3501      	adds	r5, #1
 8002fc6:	68e3      	ldr	r3, [r4, #12]
 8002fc8:	9903      	ldr	r1, [sp, #12]
 8002fca:	1a5b      	subs	r3, r3, r1
 8002fcc:	42ab      	cmp	r3, r5
 8002fce:	dcf2      	bgt.n	8002fb6 <_printf_i+0x212>
 8002fd0:	e7eb      	b.n	8002faa <_printf_i+0x206>
 8002fd2:	2500      	movs	r5, #0
 8002fd4:	f104 0619 	add.w	r6, r4, #25
 8002fd8:	e7f5      	b.n	8002fc6 <_printf_i+0x222>
 8002fda:	bf00      	nop
 8002fdc:	08003159 	.word	0x08003159
 8002fe0:	0800316a 	.word	0x0800316a

08002fe4 <memmove>:
 8002fe4:	4288      	cmp	r0, r1
 8002fe6:	b510      	push	{r4, lr}
 8002fe8:	eb01 0402 	add.w	r4, r1, r2
 8002fec:	d902      	bls.n	8002ff4 <memmove+0x10>
 8002fee:	4284      	cmp	r4, r0
 8002ff0:	4623      	mov	r3, r4
 8002ff2:	d807      	bhi.n	8003004 <memmove+0x20>
 8002ff4:	1e43      	subs	r3, r0, #1
 8002ff6:	42a1      	cmp	r1, r4
 8002ff8:	d008      	beq.n	800300c <memmove+0x28>
 8002ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003002:	e7f8      	b.n	8002ff6 <memmove+0x12>
 8003004:	4402      	add	r2, r0
 8003006:	4601      	mov	r1, r0
 8003008:	428a      	cmp	r2, r1
 800300a:	d100      	bne.n	800300e <memmove+0x2a>
 800300c:	bd10      	pop	{r4, pc}
 800300e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003016:	e7f7      	b.n	8003008 <memmove+0x24>

08003018 <_sbrk_r>:
 8003018:	b538      	push	{r3, r4, r5, lr}
 800301a:	4d06      	ldr	r5, [pc, #24]	@ (8003034 <_sbrk_r+0x1c>)
 800301c:	2300      	movs	r3, #0
 800301e:	4604      	mov	r4, r0
 8003020:	4608      	mov	r0, r1
 8003022:	602b      	str	r3, [r5, #0]
 8003024:	f7ff fb4c 	bl	80026c0 <_sbrk>
 8003028:	1c43      	adds	r3, r0, #1
 800302a:	d102      	bne.n	8003032 <_sbrk_r+0x1a>
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	b103      	cbz	r3, 8003032 <_sbrk_r+0x1a>
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	bd38      	pop	{r3, r4, r5, pc}
 8003034:	200003d4 	.word	0x200003d4

08003038 <memcpy>:
 8003038:	440a      	add	r2, r1
 800303a:	4291      	cmp	r1, r2
 800303c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003040:	d100      	bne.n	8003044 <memcpy+0xc>
 8003042:	4770      	bx	lr
 8003044:	b510      	push	{r4, lr}
 8003046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800304a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800304e:	4291      	cmp	r1, r2
 8003050:	d1f9      	bne.n	8003046 <memcpy+0xe>
 8003052:	bd10      	pop	{r4, pc}

08003054 <_realloc_r>:
 8003054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003058:	4680      	mov	r8, r0
 800305a:	4615      	mov	r5, r2
 800305c:	460c      	mov	r4, r1
 800305e:	b921      	cbnz	r1, 800306a <_realloc_r+0x16>
 8003060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003064:	4611      	mov	r1, r2
 8003066:	f7ff bc4b 	b.w	8002900 <_malloc_r>
 800306a:	b92a      	cbnz	r2, 8003078 <_realloc_r+0x24>
 800306c:	f7ff fbdc 	bl	8002828 <_free_r>
 8003070:	2400      	movs	r4, #0
 8003072:	4620      	mov	r0, r4
 8003074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003078:	f000 f81a 	bl	80030b0 <_malloc_usable_size_r>
 800307c:	4285      	cmp	r5, r0
 800307e:	4606      	mov	r6, r0
 8003080:	d802      	bhi.n	8003088 <_realloc_r+0x34>
 8003082:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003086:	d8f4      	bhi.n	8003072 <_realloc_r+0x1e>
 8003088:	4629      	mov	r1, r5
 800308a:	4640      	mov	r0, r8
 800308c:	f7ff fc38 	bl	8002900 <_malloc_r>
 8003090:	4607      	mov	r7, r0
 8003092:	2800      	cmp	r0, #0
 8003094:	d0ec      	beq.n	8003070 <_realloc_r+0x1c>
 8003096:	42b5      	cmp	r5, r6
 8003098:	462a      	mov	r2, r5
 800309a:	4621      	mov	r1, r4
 800309c:	bf28      	it	cs
 800309e:	4632      	movcs	r2, r6
 80030a0:	f7ff ffca 	bl	8003038 <memcpy>
 80030a4:	4621      	mov	r1, r4
 80030a6:	4640      	mov	r0, r8
 80030a8:	f7ff fbbe 	bl	8002828 <_free_r>
 80030ac:	463c      	mov	r4, r7
 80030ae:	e7e0      	b.n	8003072 <_realloc_r+0x1e>

080030b0 <_malloc_usable_size_r>:
 80030b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030b4:	1f18      	subs	r0, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bfbc      	itt	lt
 80030ba:	580b      	ldrlt	r3, [r1, r0]
 80030bc:	18c0      	addlt	r0, r0, r3
 80030be:	4770      	bx	lr

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
