
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000308  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800049c  0800049c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800049c  0800049c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800049c  0800049c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800049c  0800049c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800049c  0800049c  0000149c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004a0  080004a0  000014a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004a4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004a8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004a8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009f2  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002a9  00000000  00000000  00002a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00002cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005f  00000000  00000000  00002d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e7e6  00000000  00000000  00002dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d97  00000000  00000000  000115a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000532c9  00000000  00000000  0001233c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00065605  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000138  00000000  00000000  00065648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00065780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000484 	.word	0x08000484

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000484 	.word	0x08000484

080001d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b06      	ldr	r3, [pc, #24]	@ (80001f4 <SystemInit+0x20>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001de:	4a05      	ldr	r2, [pc, #20]	@ (80001f4 <SystemInit+0x20>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <main>:
void flash_config(void);

/***************** Función principal *****************/

int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	flash_config();
 80001fc:	f000 f85e 	bl	80002bc <flash_config>
	systemFreq = SystemCoreClock;
 8000200:	4b10      	ldr	r3, [pc, #64]	@ (8000244 <main+0x4c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a10      	ldr	r2, [pc, #64]	@ (8000248 <main+0x50>)
 8000206:	6013      	str	r3, [r2, #0]
	GPIOA_Config();
 8000208:	f000 f882 	bl	8000310 <GPIOA_Config>
	GPIOC_Config();
 800020c:	f000 f8c2 	bl	8000394 <GPIOC_Config>

	while(1)
	{
		if(GPIOC->IDR & (1<<13))
 8000210:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <main+0x54>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000218:	2b00      	cmp	r3, #0
 800021a:	d009      	beq.n	8000230 <main+0x38>
		{
			GPIOA -> ODR |= (1<<5);
 800021c:	4b0c      	ldr	r3, [pc, #48]	@ (8000250 <main+0x58>)
 800021e:	695b      	ldr	r3, [r3, #20]
 8000220:	4a0b      	ldr	r2, [pc, #44]	@ (8000250 <main+0x58>)
 8000222:	f043 0320 	orr.w	r3, r3, #32
 8000226:	6153      	str	r3, [r2, #20]
			delayMs(100);
 8000228:	2064      	movs	r0, #100	@ 0x64
 800022a:	f000 f813 	bl	8000254 <delayMs>
 800022e:	e7ef      	b.n	8000210 <main+0x18>
		}
		else
		{
			GPIOA -> ODR &= ~(1<<5);
 8000230:	4b07      	ldr	r3, [pc, #28]	@ (8000250 <main+0x58>)
 8000232:	695b      	ldr	r3, [r3, #20]
 8000234:	4a06      	ldr	r2, [pc, #24]	@ (8000250 <main+0x58>)
 8000236:	f023 0320 	bic.w	r3, r3, #32
 800023a:	6153      	str	r3, [r2, #20]
			delayMs(100);
 800023c:	2064      	movs	r0, #100	@ 0x64
 800023e:	f000 f809 	bl	8000254 <delayMs>
		if(GPIOC->IDR & (1<<13))
 8000242:	e7e5      	b.n	8000210 <main+0x18>
 8000244:	20000000 	.word	0x20000000
 8000248:	20000020 	.word	0x20000020
 800024c:	40020800 	.word	0x40020800
 8000250:	40020000 	.word	0x40020000

08000254 <delayMs>:
}

/***************** Definición de funciones *****************/

void delayMs(uint32_t delay)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	SysTick -> LOAD = SystemCoreClock/1000;
 800025c:	4b14      	ldr	r3, [pc, #80]	@ (80002b0 <delayMs+0x5c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a14      	ldr	r2, [pc, #80]	@ (80002b4 <delayMs+0x60>)
 8000262:	4915      	ldr	r1, [pc, #84]	@ (80002b8 <delayMs+0x64>)
 8000264:	fba1 1303 	umull	r1, r3, r1, r3
 8000268:	099b      	lsrs	r3, r3, #6
 800026a:	6053      	str	r3, [r2, #4]
	SysTick -> VAL = 0;
 800026c:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <delayMs+0x60>)
 800026e:	2200      	movs	r2, #0
 8000270:	609a      	str	r2, [r3, #8]
	SysTick -> CTRL |= (1<<2) | (1<<0);
 8000272:	4b10      	ldr	r3, [pc, #64]	@ (80002b4 <delayMs+0x60>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a0f      	ldr	r2, [pc, #60]	@ (80002b4 <delayMs+0x60>)
 8000278:	f043 0305 	orr.w	r3, r3, #5
 800027c:	6013      	str	r3, [r2, #0]

	for(i=0; i<delay; i++)
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e009      	b.n	8000298 <delayMs+0x44>
	{
		while(!(SysTick -> CTRL & 1<<16));
 8000284:	bf00      	nop
 8000286:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <delayMs+0x60>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800028e:	2b00      	cmp	r3, #0
 8000290:	d0f9      	beq.n	8000286 <delayMs+0x32>
	for(i=0; i<delay; i++)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	3301      	adds	r3, #1
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	429a      	cmp	r2, r3
 800029e:	d3f1      	bcc.n	8000284 <delayMs+0x30>
	}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000000 	.word	0x20000000
 80002b4:	e000e010 	.word	0xe000e010
 80002b8:	10624dd3 	.word	0x10624dd3

080002bc <flash_config>:

void flash_config(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	/**Se habilita por recomendación*/
	FLASH -> ACR |= 1<<9;
 80002c0:	4b11      	ldr	r3, [pc, #68]	@ (8000308 <flash_config+0x4c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a10      	ldr	r2, [pc, #64]	@ (8000308 <flash_config+0x4c>)
 80002c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002ca:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= 1<<10;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000308 <flash_config+0x4c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000308 <flash_config+0x4c>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002d6:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= 1<<8;
 80002d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <flash_config+0x4c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <flash_config+0x4c>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002e2:	6013      	str	r3, [r2, #0]

	/*Se habilitan algunos clocks*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002e4:	4b09      	ldr	r3, [pc, #36]	@ (800030c <flash_config+0x50>)
 80002e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002e8:	4a08      	ldr	r2, [pc, #32]	@ (800030c <flash_config+0x50>)
 80002ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002ee:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002f0:	4b06      	ldr	r3, [pc, #24]	@ (800030c <flash_config+0x50>)
 80002f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002f4:	4a05      	ldr	r2, [pc, #20]	@ (800030c <flash_config+0x50>)
 80002f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002fa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40023c00 	.word	0x40023c00
 800030c:	40023800 	.word	0x40023800

08000310 <GPIOA_Config>:

void GPIOA_Config(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	//PA5 as an output, puss-pull. high-speed, no pull up down

	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;		//GPIOA Clock Enable
 8000314:	4b1d      	ldr	r3, [pc, #116]	@ (800038c <GPIOA_Config+0x7c>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000318:	4a1c      	ldr	r2, [pc, #112]	@ (800038c <GPIOA_Config+0x7c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA -> MODER &= ~((1<<2*5)| (1<<(2*5+1)));	//Clear MODER
 8000320:	4b1b      	ldr	r3, [pc, #108]	@ (8000390 <GPIOA_Config+0x80>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a1a      	ldr	r2, [pc, #104]	@ (8000390 <GPIOA_Config+0x80>)
 8000326:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800032a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (1<<2*5);						//Output mode
 800032c:	4b18      	ldr	r3, [pc, #96]	@ (8000390 <GPIOA_Config+0x80>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a17      	ldr	r2, [pc, #92]	@ (8000390 <GPIOA_Config+0x80>)
 8000332:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000336:	6013      	str	r3, [r2, #0]

	GPIOA -> OTYPER &= ~(1<<5);						//Clear OTYPER
 8000338:	4b15      	ldr	r3, [pc, #84]	@ (8000390 <GPIOA_Config+0x80>)
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	4a14      	ldr	r2, [pc, #80]	@ (8000390 <GPIOA_Config+0x80>)
 800033e:	f023 0320 	bic.w	r3, r3, #32
 8000342:	6053      	str	r3, [r2, #4]
	GPIOA -> OTYPER &= ~(1<<5);						//Push-pull
 8000344:	4b12      	ldr	r3, [pc, #72]	@ (8000390 <GPIOA_Config+0x80>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	4a11      	ldr	r2, [pc, #68]	@ (8000390 <GPIOA_Config+0x80>)
 800034a:	f023 0320 	bic.w	r3, r3, #32
 800034e:	6053      	str	r3, [r2, #4]

	GPIOA -> OSPEEDR &= ~((1<<2*5)| (1<<(2*5+1)));	//Clear OSPEEDR
 8000350:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <GPIOA_Config+0x80>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a0e      	ldr	r2, [pc, #56]	@ (8000390 <GPIOA_Config+0x80>)
 8000356:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800035a:	6093      	str	r3, [r2, #8]
	GPIOA -> OSPEEDR |= ((1<<2*5)| (1<<(2*5+1)));	//Very high
 800035c:	4b0c      	ldr	r3, [pc, #48]	@ (8000390 <GPIOA_Config+0x80>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a0b      	ldr	r2, [pc, #44]	@ (8000390 <GPIOA_Config+0x80>)
 8000362:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000366:	6093      	str	r3, [r2, #8]

	GPIOA -> PUPDR &= ~((1<<2*5)| (1<<(2*5+1)));	//Clear PUPDR
 8000368:	4b09      	ldr	r3, [pc, #36]	@ (8000390 <GPIOA_Config+0x80>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a08      	ldr	r2, [pc, #32]	@ (8000390 <GPIOA_Config+0x80>)
 800036e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000372:	60d3      	str	r3, [r2, #12]
	GPIOA -> PUPDR &= ~((1<<2*5)| (1<<(2*5+1)));	//No pull-up/down
 8000374:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <GPIOA_Config+0x80>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a05      	ldr	r2, [pc, #20]	@ (8000390 <GPIOA_Config+0x80>)
 800037a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800037e:	60d3      	str	r3, [r2, #12]
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40023800 	.word	0x40023800
 8000390:	40020000 	.word	0x40020000

08000394 <GPIOC_Config>:

void GPIOC_Config(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	//PC13 as an input

	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOCEN;		//GPIOC Clock Enable
 8000398:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <GPIOC_Config+0x4c>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039c:	4a10      	ldr	r2, [pc, #64]	@ (80003e0 <GPIOC_Config+0x4c>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOC -> MODER &= ~((1<<2*13)|(1<<(2*13+1)));	//Clear MODER
 80003a4:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <GPIOC_Config+0x50>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a0e      	ldr	r2, [pc, #56]	@ (80003e4 <GPIOC_Config+0x50>)
 80003aa:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80003ae:	6013      	str	r3, [r2, #0]
	GPIOC -> MODER &= ~((1<<2*13)|(1<<(2*13+1)));	//Input mode
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <GPIOC_Config+0x50>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0b      	ldr	r2, [pc, #44]	@ (80003e4 <GPIOC_Config+0x50>)
 80003b6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80003ba:	6013      	str	r3, [r2, #0]

	GPIOC -> PUPDR &= ~((1<<2*13)| (1<<(2*13+1)));	//Clear PUPDR
 80003bc:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <GPIOC_Config+0x50>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	4a08      	ldr	r2, [pc, #32]	@ (80003e4 <GPIOC_Config+0x50>)
 80003c2:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80003c6:	60d3      	str	r3, [r2, #12]
	GPIOC -> PUPDR &= ~((1<<2*13)| (1<<(2*13+1)));	//pull-up
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <GPIOC_Config+0x50>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	4a05      	ldr	r2, [pc, #20]	@ (80003e4 <GPIOC_Config+0x50>)
 80003ce:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80003d2:	60d3      	str	r3, [r2, #12]
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40023800 	.word	0x40023800
 80003e4:	40020800 	.word	0x40020800

080003e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e8:	480d      	ldr	r0, [pc, #52]	@ (8000420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ec:	f7ff fef2 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f0:	480c      	ldr	r0, [pc, #48]	@ (8000424 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f2:	490d      	ldr	r1, [pc, #52]	@ (8000428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f4:	4a0d      	ldr	r2, [pc, #52]	@ (800042c <LoopForever+0xe>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f8:	e002      	b.n	8000400 <LoopCopyDataInit>

080003fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fe:	3304      	adds	r3, #4

08000400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000404:	d3f9      	bcc.n	80003fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000406:	4a0a      	ldr	r2, [pc, #40]	@ (8000430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000408:	4c0a      	ldr	r4, [pc, #40]	@ (8000434 <LoopForever+0x16>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800040c:	e001      	b.n	8000412 <LoopFillZerobss>

0800040e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000410:	3204      	adds	r2, #4

08000412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000414:	d3fb      	bcc.n	800040e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000416:	f000 f811 	bl	800043c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041a:	f7ff feed 	bl	80001f8 <main>

0800041e <LoopForever>:

LoopForever:
  b LoopForever
 800041e:	e7fe      	b.n	800041e <LoopForever>
  ldr   r0, =_estack
 8000420:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000428:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800042c:	080004a4 	.word	0x080004a4
  ldr r2, =_sbss
 8000430:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000434:	20000024 	.word	0x20000024

08000438 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000438:	e7fe      	b.n	8000438 <ADC_IRQHandler>
	...

0800043c <__libc_init_array>:
 800043c:	b570      	push	{r4, r5, r6, lr}
 800043e:	4d0d      	ldr	r5, [pc, #52]	@ (8000474 <__libc_init_array+0x38>)
 8000440:	4c0d      	ldr	r4, [pc, #52]	@ (8000478 <__libc_init_array+0x3c>)
 8000442:	1b64      	subs	r4, r4, r5
 8000444:	10a4      	asrs	r4, r4, #2
 8000446:	2600      	movs	r6, #0
 8000448:	42a6      	cmp	r6, r4
 800044a:	d109      	bne.n	8000460 <__libc_init_array+0x24>
 800044c:	4d0b      	ldr	r5, [pc, #44]	@ (800047c <__libc_init_array+0x40>)
 800044e:	4c0c      	ldr	r4, [pc, #48]	@ (8000480 <__libc_init_array+0x44>)
 8000450:	f000 f818 	bl	8000484 <_init>
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	10a4      	asrs	r4, r4, #2
 8000458:	2600      	movs	r6, #0
 800045a:	42a6      	cmp	r6, r4
 800045c:	d105      	bne.n	800046a <__libc_init_array+0x2e>
 800045e:	bd70      	pop	{r4, r5, r6, pc}
 8000460:	f855 3b04 	ldr.w	r3, [r5], #4
 8000464:	4798      	blx	r3
 8000466:	3601      	adds	r6, #1
 8000468:	e7ee      	b.n	8000448 <__libc_init_array+0xc>
 800046a:	f855 3b04 	ldr.w	r3, [r5], #4
 800046e:	4798      	blx	r3
 8000470:	3601      	adds	r6, #1
 8000472:	e7f2      	b.n	800045a <__libc_init_array+0x1e>
 8000474:	0800049c 	.word	0x0800049c
 8000478:	0800049c 	.word	0x0800049c
 800047c:	0800049c 	.word	0x0800049c
 8000480:	080004a0 	.word	0x080004a0

08000484 <_init>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	bf00      	nop
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr

08000490 <_fini>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	bf00      	nop
 8000494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000496:	bc08      	pop	{r3}
 8000498:	469e      	mov	lr, r3
 800049a:	4770      	bx	lr
