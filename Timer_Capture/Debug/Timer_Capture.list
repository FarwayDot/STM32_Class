
Timer_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000057c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000710  08000718  00001718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000710  08000710  00001718  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000710  08000710  00001718  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000710  08000718  00001718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000710  08000710  00001710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000714  08000714  00001714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000000  08000718  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000718  00002034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000316c  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000af6  00000000  00000000  000048b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00000837  00000000  00000000  000053aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00005be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000147  00000000  00000000  00005dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ee67  00000000  00000000  00005f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003441  00000000  00000000  00014d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000540de  00000000  00000000  000181b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0006c295  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000338  00000000  00000000  0006c2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0006c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006f8 	.word	0x080006f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006f8 	.word	0x080006f8

080001d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d4:	4a03      	ldr	r2, [pc, #12]	@ (80001e4 <SystemInit+0x10>)
 80001d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80001da:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80001de:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001e2:	4770      	bx	lr
 80001e4:	e000ed00 	.word	0xe000ed00

080001e8 <GPIO_Output_Config>:
 *
 * In main(): GPIO_Output_Config(GPIOA, 8, PUPDR_NONE, OSPEEDR_VERYHIGH, OTYPER_PP);
 */

void GPIO_Output_Config(GPIO_TypeDef  *GPIOx, uint8_t Pin, uint8_t Pull, uint8_t Speed, uint8_t output_type)
{
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	469c      	mov	ip, r3
	//Clock
	ENABLE_GPIO_CLOCK(GPIOx);
 80001ec:	4b31      	ldr	r3, [pc, #196]	@ (80002b4 <GPIO_Output_Config+0xcc>)
 80001ee:	4298      	cmp	r0, r3
 80001f0:	d014      	beq.n	800021c <GPIO_Output_Config+0x34>
 80001f2:	4b31      	ldr	r3, [pc, #196]	@ (80002b8 <GPIO_Output_Config+0xd0>)
 80001f4:	4298      	cmp	r0, r3
 80001f6:	d044      	beq.n	8000282 <GPIO_Output_Config+0x9a>
 80001f8:	4b30      	ldr	r3, [pc, #192]	@ (80002bc <GPIO_Output_Config+0xd4>)
 80001fa:	4298      	cmp	r0, r3
 80001fc:	d047      	beq.n	800028e <GPIO_Output_Config+0xa6>
 80001fe:	4b30      	ldr	r3, [pc, #192]	@ (80002c0 <GPIO_Output_Config+0xd8>)
 8000200:	4298      	cmp	r0, r3
 8000202:	d04a      	beq.n	800029a <GPIO_Output_Config+0xb2>
 8000204:	4b2f      	ldr	r3, [pc, #188]	@ (80002c4 <GPIO_Output_Config+0xdc>)
 8000206:	4298      	cmp	r0, r3
 8000208:	d04d      	beq.n	80002a6 <GPIO_Output_Config+0xbe>
 800020a:	4b2f      	ldr	r3, [pc, #188]	@ (80002c8 <GPIO_Output_Config+0xe0>)
 800020c:	4298      	cmp	r0, r3
 800020e:	d10a      	bne.n	8000226 <GPIO_Output_Config+0x3e>
 8000210:	4c2e      	ldr	r4, [pc, #184]	@ (80002cc <GPIO_Output_Config+0xe4>)
 8000212:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000218:	6323      	str	r3, [r4, #48]	@ 0x30
 800021a:	e004      	b.n	8000226 <GPIO_Output_Config+0x3e>
 800021c:	4c2b      	ldr	r4, [pc, #172]	@ (80002cc <GPIO_Output_Config+0xe4>)
 800021e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	6323      	str	r3, [r4, #48]	@ 0x30

	//Mode
	GPIOx->MODER &= ~(MODER_MASK<<(2*Pin));
 8000226:	6804      	ldr	r4, [r0, #0]
 8000228:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 800022c:	2303      	movs	r3, #3
 800022e:	fa03 f50e 	lsl.w	r5, r3, lr
 8000232:	ea24 0405 	bic.w	r4, r4, r5
 8000236:	6004      	str	r4, [r0, #0]
	GPIOx->MODER |= (MODER_OUTPUT<<(2*Pin));
 8000238:	6804      	ldr	r4, [r0, #0]
 800023a:	2601      	movs	r6, #1
 800023c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000240:	4334      	orrs	r4, r6
 8000242:	6004      	str	r4, [r0, #0]

	//Pull
	GPIOx->PUPDR &= ~(PUPDR_MASK<<(2*Pin));
 8000244:	68c4      	ldr	r4, [r0, #12]
 8000246:	ea24 0405 	bic.w	r4, r4, r5
 800024a:	60c4      	str	r4, [r0, #12]
	GPIOx->PUPDR |= (Pull<<(2*Pin));
 800024c:	68c4      	ldr	r4, [r0, #12]
 800024e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000252:	4322      	orrs	r2, r4
 8000254:	60c2      	str	r2, [r0, #12]

	//Speed
	GPIOx->OSPEEDR &= ~(OSPEEDR_MASK<<(2*Pin));
 8000256:	6882      	ldr	r2, [r0, #8]
 8000258:	ea22 0205 	bic.w	r2, r2, r5
 800025c:	6082      	str	r2, [r0, #8]
	GPIOx->OSPEEDR |= (Speed<<(2*Pin));
 800025e:	6882      	ldr	r2, [r0, #8]
 8000260:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000264:	ea42 020c 	orr.w	r2, r2, ip
 8000268:	6082      	str	r2, [r0, #8]

	//Type of output
	GPIOx->OTYPER &= ~(OTYPER_MASK<<Pin);
 800026a:	6842      	ldr	r2, [r0, #4]
 800026c:	408b      	lsls	r3, r1
 800026e:	ea22 0303 	bic.w	r3, r2, r3
 8000272:	6043      	str	r3, [r0, #4]
	GPIOx->OTYPER |= (output_type<<Pin);
 8000274:	6843      	ldr	r3, [r0, #4]
 8000276:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800027a:	408a      	lsls	r2, r1
 800027c:	4313      	orrs	r3, r2
 800027e:	6043      	str	r3, [r0, #4]
}
 8000280:	bd70      	pop	{r4, r5, r6, pc}
	ENABLE_GPIO_CLOCK(GPIOx);
 8000282:	4c12      	ldr	r4, [pc, #72]	@ (80002cc <GPIO_Output_Config+0xe4>)
 8000284:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000286:	f043 0302 	orr.w	r3, r3, #2
 800028a:	6323      	str	r3, [r4, #48]	@ 0x30
 800028c:	e7cb      	b.n	8000226 <GPIO_Output_Config+0x3e>
 800028e:	4c0f      	ldr	r4, [pc, #60]	@ (80002cc <GPIO_Output_Config+0xe4>)
 8000290:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	6323      	str	r3, [r4, #48]	@ 0x30
 8000298:	e7c5      	b.n	8000226 <GPIO_Output_Config+0x3e>
 800029a:	4c0c      	ldr	r4, [pc, #48]	@ (80002cc <GPIO_Output_Config+0xe4>)
 800029c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800029e:	f043 0308 	orr.w	r3, r3, #8
 80002a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80002a4:	e7bf      	b.n	8000226 <GPIO_Output_Config+0x3e>
 80002a6:	4c09      	ldr	r4, [pc, #36]	@ (80002cc <GPIO_Output_Config+0xe4>)
 80002a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80002b0:	e7b9      	b.n	8000226 <GPIO_Output_Config+0x3e>
 80002b2:	bf00      	nop
 80002b4:	40020000 	.word	0x40020000
 80002b8:	40020400 	.word	0x40020400
 80002bc:	40020800 	.word	0x40020800
 80002c0:	40020c00 	.word	0x40020c00
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40021c00 	.word	0x40021c00
 80002cc:	40023800 	.word	0x40023800

080002d0 <GPIO_Write>:
 * GPIO_Write(GPIOA, 6, HIGH);
 */

void GPIO_Write(GPIO_TypeDef* GPIOx, uint8_t GPIO_Pin, uint8_t Level)
{
	uint8_t param = CHECK_OUTPUT(GPIOx, GPIO_Pin);
 80002d0:	6803      	ldr	r3, [r0, #0]
 80002d2:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80002d6:	fa23 f30c 	lsr.w	r3, r3, ip
 80002da:	f003 0303 	and.w	r3, r3, #3

	if(param)
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d000      	beq.n	80002e4 <GPIO_Write+0x14>
	else
	{
		//Nothing
	}

}
 80002e2:	4770      	bx	lr
		if(Level != GPIO_PIN_RESET)
 80002e4:	b12a      	cbz	r2, 80002f2 <GPIO_Write+0x22>
			GPIOx->BSRR |= (1<<GPIO_Pin); //SET
 80002e6:	6983      	ldr	r3, [r0, #24]
 80002e8:	2201      	movs	r2, #1
 80002ea:	408a      	lsls	r2, r1
 80002ec:	4313      	orrs	r3, r2
 80002ee:	6183      	str	r3, [r0, #24]
 80002f0:	4770      	bx	lr
			GPIOx->BSRR |= (1 << (GPIO_Pin + 16U)); //RESET
 80002f2:	6983      	ldr	r3, [r0, #24]
 80002f4:	3110      	adds	r1, #16
 80002f6:	2201      	movs	r2, #1
 80002f8:	408a      	lsls	r2, r1
 80002fa:	4313      	orrs	r3, r2
 80002fc:	6183      	str	r3, [r0, #24]
}
 80002fe:	e7f0      	b.n	80002e2 <GPIO_Write+0x12>

08000300 <GPIO_Write_Toggle>:
 *
 * GPIO_Write_Toggle(GPIOA, 6);
 */

void GPIO_Write_Toggle(GPIO_TypeDef* GPIOx, uint8_t GPIO_Pin)
{
 8000300:	b410      	push	{r4}
	uint8_t param = CHECK_OUTPUT(GPIOx, GPIO_Pin);
 8000302:	6803      	ldr	r3, [r0, #0]
 8000304:	004a      	lsls	r2, r1, #1
 8000306:	40d3      	lsrs	r3, r2
 8000308:	f003 0303 	and.w	r3, r3, #3
	uint8_t status_read = ((GPIOx->IDR) & (1<<GPIO_Pin));
 800030c:	6904      	ldr	r4, [r0, #16]
 800030e:	2201      	movs	r2, #1
 8000310:	408a      	lsls	r2, r1
 8000312:	fa5f fc82 	uxtb.w	ip, r2
 8000316:	ea04 040c 	and.w	r4, r4, ip

	if(param)
 800031a:	2b01      	cmp	r3, #1
 800031c:	d002      	beq.n	8000324 <GPIO_Write_Toggle+0x24>
	}
	else
	{
		//Nothing
	}
}
 800031e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000322:	4770      	bx	lr
		if(status_read != GPIO_PIN_RESET)
 8000324:	b134      	cbz	r4, 8000334 <GPIO_Write_Toggle+0x34>
			GPIOx->BSRR |= (1 << (GPIO_Pin + 16U)); //RESET
 8000326:	6983      	ldr	r3, [r0, #24]
 8000328:	3110      	adds	r1, #16
 800032a:	2201      	movs	r2, #1
 800032c:	408a      	lsls	r2, r1
 800032e:	4313      	orrs	r3, r2
 8000330:	6183      	str	r3, [r0, #24]
 8000332:	e7f4      	b.n	800031e <GPIO_Write_Toggle+0x1e>
			GPIOx->BSRR |= (1<<GPIO_Pin); //SET
 8000334:	6983      	ldr	r3, [r0, #24]
 8000336:	4313      	orrs	r3, r2
 8000338:	6183      	str	r3, [r0, #24]
}
 800033a:	e7f0      	b.n	800031e <GPIO_Write_Toggle+0x1e>

0800033c <flash_config>:
#include "RCC.h"

void flash_config(void)
{
	/**Se habilita por recomendación*/
	FLASH -> ACR |= 1<<9;
 800033c:	4b0b      	ldr	r3, [pc, #44]	@ (800036c <flash_config+0x30>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000344:	601a      	str	r2, [r3, #0]
	FLASH -> ACR |= 1<<10;
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800034c:	601a      	str	r2, [r3, #0]
	FLASH -> ACR |= 1<<8;
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000354:	601a      	str	r2, [r3, #0]

	/*Se habilitan algunos clocks*/
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000356:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800035a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800035c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000360:	645a      	str	r2, [r3, #68]	@ 0x44
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000364:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000368:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800036a:	4770      	bx	lr
 800036c:	40023c00 	.word	0x40023c00

08000370 <main>:
/* Prototipo de funciones */


/* Función principal */
int main(void)
{
 8000370:	b500      	push	{lr}
 8000372:	b083      	sub	sp, #12

	flash_config();
 8000374:	f7ff ffe2 	bl	800033c <flash_config>

	RCC -> CR &= ~RCC_CR_HSION_Msk;
 8000378:	4b25      	ldr	r3, [pc, #148]	@ (8000410 <main+0xa0>)
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	f022 0201 	bic.w	r2, r2, #1
 8000380:	601a      	str	r2, [r3, #0]
	RCC -> CR |= RCC_CR_HSION;
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	f042 0201 	orr.w	r2, r2, #1
 8000388:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY));
 800038a:	4b21      	ldr	r3, [pc, #132]	@ (8000410 <main+0xa0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f013 0f02 	tst.w	r3, #2
 8000392:	d0fa      	beq.n	800038a <main+0x1a>

	RCC -> CFGR &= ~RCC_CFGR_SW_Msk;
 8000394:	4b1e      	ldr	r3, [pc, #120]	@ (8000410 <main+0xa0>)
 8000396:	689a      	ldr	r2, [r3, #8]
 8000398:	f022 0203 	bic.w	r2, r2, #3
 800039c:	609a      	str	r2, [r3, #8]

	RCC -> CFGR &= ~RCC_CFGR_HPRE_Msk;
 800039e:	689a      	ldr	r2, [r3, #8]
 80003a0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80003a4:	609a      	str	r2, [r3, #8]
	RCC -> CFGR &= ~RCC_CFGR_PPRE1_Msk;
 80003a6:	689a      	ldr	r2, [r3, #8]
 80003a8:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80003ac:	609a      	str	r2, [r3, #8]
	RCC -> CFGR &= ~RCC_CFGR_PPRE2_Msk;
 80003ae:	689a      	ldr	r2, [r3, #8]
 80003b0:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80003b4:	609a      	str	r2, [r3, #8]
	//flag = (volatile uint32_t *)(PERIPH_BB_BASE + 0x8200);
	//ptr = &TIM3->SR;
	//*flag = 0;

	//Configuración input capture
	timer2_ch3_input_capture_config(15, 0xFFFFFFFF);
 80003b6:	f04f 31ff 	mov.w	r1, #4294967295
 80003ba:	200f      	movs	r0, #15
 80003bc:	f000 f902 	bl	80005c4 <timer2_ch3_input_capture_config>

	//Configuración timer 3
	timer3_count_config(15, 49);
 80003c0:	2131      	movs	r1, #49	@ 0x31
 80003c2:	200f      	movs	r0, #15
 80003c4:	f000 f896 	bl	80004f4 <timer3_count_config>

	//Habilitamos conteo
	timer2_ch3_input_capture_start(ISR_ON);
 80003c8:	2001      	movs	r0, #1
 80003ca:	f000 f929 	bl	8000620 <timer2_ch3_input_capture_start>
	timer3_count_start();
 80003ce:	f000 f8ad 	bl	800052c <timer3_count_start>

	//Señal de PWM
	GPIO_Output_Config(LED_PWM_GPIO, LED_PWM_PIN, PUPDR_NONE, OSPEEDR_MEDIUM, OTYPER_PP);
 80003d2:	4d10      	ldr	r5, [pc, #64]	@ (8000414 <main+0xa4>)
 80003d4:	2400      	movs	r4, #0
 80003d6:	9400      	str	r4, [sp, #0]
 80003d8:	2301      	movs	r3, #1
 80003da:	4622      	mov	r2, r4
 80003dc:	2107      	movs	r1, #7
 80003de:	4628      	mov	r0, r5
 80003e0:	f7ff ff02 	bl	80001e8 <GPIO_Output_Config>

	//Señal de sincronización
	GPIO_Output_Config(LED_SYNC_GPIO, LED_SYNC_PIN, PUPDR_NONE, OSPEEDR_MEDIUM, OTYPER_PP);
 80003e4:	9400      	str	r4, [sp, #0]
 80003e6:	2301      	movs	r3, #1
 80003e8:	4622      	mov	r2, r4
 80003ea:	2105      	movs	r1, #5
 80003ec:	4628      	mov	r0, r5
 80003ee:	f7ff fefb 	bl	80001e8 <GPIO_Output_Config>

	while(1)
	{
		if (TIM3->SR & TIM_SR_UIF)
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <main+0xa8>)
 80003f4:	691b      	ldr	r3, [r3, #16]
 80003f6:	f013 0f01 	tst.w	r3, #1
 80003fa:	d0fa      	beq.n	80003f2 <main+0x82>
		{
			TIM3->SR &= ~TIM_SR_UIF;
 80003fc:	4a06      	ldr	r2, [pc, #24]	@ (8000418 <main+0xa8>)
 80003fe:	6913      	ldr	r3, [r2, #16]
 8000400:	f023 0301 	bic.w	r3, r3, #1
 8000404:	6113      	str	r3, [r2, #16]
			GPIO_Write_Toggle(LED_PWM_GPIO, LED_PWM_PIN);
 8000406:	2107      	movs	r1, #7
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <main+0xa4>)
 800040a:	f7ff ff79 	bl	8000300 <GPIO_Write_Toggle>
 800040e:	e7f0      	b.n	80003f2 <main+0x82>
 8000410:	40023800 	.word	0x40023800
 8000414:	40020000 	.word	0x40020000
 8000418:	40000400 	.word	0x40000400

0800041c <NMI_Handler>:
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  while (1)
 800041c:	e7fe      	b.n	800041c <NMI_Handler>

0800041e <HardFault_Handler>:
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{

  while (1)
 800041e:	e7fe      	b.n	800041e <HardFault_Handler>

08000420 <MemManage_Handler>:
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  while (1)
 8000420:	e7fe      	b.n	8000420 <MemManage_Handler>

08000422 <BusFault_Handler>:
/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  while (1)
 8000422:	e7fe      	b.n	8000422 <BusFault_Handler>

08000424 <UsageFault_Handler>:
/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  while (1)
 8000424:	e7fe      	b.n	8000424 <UsageFault_Handler>

08000426 <SVC_Handler>:
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{

}
 8000426:	4770      	bx	lr

08000428 <DebugMon_Handler>:
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{

}
 8000428:	4770      	bx	lr

0800042a <PendSV_Handler>:
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{

}
 800042a:	4770      	bx	lr

0800042c <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
	uwTick++;
 800042c:	4a02      	ldr	r2, [pc, #8]	@ (8000438 <SysTick_Handler+0xc>)
 800042e:	6813      	ldr	r3, [r2, #0]
 8000430:	3301      	adds	r3, #1
 8000432:	6013      	str	r3, [r2, #0]
}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	2000001c 	.word	0x2000001c

0800043c <TIM2_IRQHandler>:
/******************************************************************************/

/*Private functions*/

void TIM2_IRQHandler(void)
{
 800043c:	b508      	push	{r3, lr}
#ifdef PRUEBA_TIMER_COUNT

	LED_Toggle_IT();

#else
	if(TIM2->SR & TIM_SR_CC3IF)
 800043e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000442:	691b      	ldr	r3, [r3, #16]
 8000444:	f013 0f08 	tst.w	r3, #8
 8000448:	d015      	beq.n	8000476 <TIM2_IRQHandler+0x3a>
	{
		TIM2->SR &= ~TIM_SR_CC3IF;
 800044a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800044e:	6913      	ldr	r3, [r2, #16]
 8000450:	f023 0308 	bic.w	r3, r3, #8
 8000454:	6113      	str	r3, [r2, #16]

		if(Is_First_Captured == 0) //Si es la primera captura
 8000456:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <TIM2_IRQHandler+0x9c>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	b96b      	cbnz	r3, 8000478 <TIM2_IRQHandler+0x3c>
		{
			GPIO_Write(GPIOA, 5, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	2105      	movs	r1, #5
 8000460:	481e      	ldr	r0, [pc, #120]	@ (80004dc <TIM2_IRQHandler+0xa0>)
 8000462:	f7ff ff35 	bl	80002d0 <GPIO_Write>
			IC_Val1 = TIM2 -> CCR3;
 8000466:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800046a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <TIM2_IRQHandler+0xa4>)
 800046e:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;
 8000470:	4b19      	ldr	r3, [pc, #100]	@ (80004d8 <TIM2_IRQHandler+0x9c>)
 8000472:	2201      	movs	r2, #1
 8000474:	701a      	strb	r2, [r3, #0]
	}
#endif



}
 8000476:	bd08      	pop	{r3, pc}
			GPIO_Write(GPIOA, 5, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2105      	movs	r1, #5
 800047c:	4817      	ldr	r0, [pc, #92]	@ (80004dc <TIM2_IRQHandler+0xa0>)
 800047e:	f7ff ff27 	bl	80002d0 <GPIO_Write>
			IC_Val2 = TIM2 -> CCR3;
 8000482:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000488:	4a16      	ldr	r2, [pc, #88]	@ (80004e4 <TIM2_IRQHandler+0xa8>)
 800048a:	6013      	str	r3, [r2, #0]
			if(IC_Val2 > IC_Val1)
 800048c:	4a14      	ldr	r2, [pc, #80]	@ (80004e0 <TIM2_IRQHandler+0xa4>)
 800048e:	6812      	ldr	r2, [r2, #0]
 8000490:	4293      	cmp	r3, r2
 8000492:	d919      	bls.n	80004c8 <TIM2_IRQHandler+0x8c>
				Difference = IC_Val2 - IC_Val1;
 8000494:	1a9b      	subs	r3, r3, r2
 8000496:	4a14      	ldr	r2, [pc, #80]	@ (80004e8 <TIM2_IRQHandler+0xac>)
 8000498:	6013      	str	r3, [r2, #0]
			frequency = ((TIM_CLK/(TIM2->PSC + 1))/Difference) * TIM2_CH3_IC3PSC;
 800049a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800049e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80004a0:	3201      	adds	r2, #1
 80004a2:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <TIM2_IRQHandler+0xb0>)
 80004a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80004a8:	4a0f      	ldr	r2, [pc, #60]	@ (80004e8 <TIM2_IRQHandler+0xac>)
 80004aa:	6812      	ldr	r2, [r2, #0]
 80004ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80004b0:	ee07 3a90 	vmov	s15, r3
 80004b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004b8:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <TIM2_IRQHandler+0xb4>)
 80004ba:	edc3 7a00 	vstr	s15, [r3]
			TIM2 -> CNT = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	624b      	str	r3, [r1, #36]	@ 0x24
			Is_First_Captured = 0;
 80004c2:	4a05      	ldr	r2, [pc, #20]	@ (80004d8 <TIM2_IRQHandler+0x9c>)
 80004c4:	7013      	strb	r3, [r2, #0]
}
 80004c6:	e7d6      	b.n	8000476 <TIM2_IRQHandler+0x3a>
				Difference = (TIM2->ARR  - IC_Val1) + IC_Val2;
 80004c8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80004cc:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 80004ce:	1a8a      	subs	r2, r1, r2
 80004d0:	4413      	add	r3, r2
 80004d2:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <TIM2_IRQHandler+0xac>)
 80004d4:	6013      	str	r3, [r2, #0]
 80004d6:	e7e0      	b.n	800049a <TIM2_IRQHandler+0x5e>
 80004d8:	20000024 	.word	0x20000024
 80004dc:	40020000 	.word	0x40020000
 80004e0:	20000030 	.word	0x20000030
 80004e4:	2000002c 	.word	0x2000002c
 80004e8:	20000028 	.word	0x20000028
 80004ec:	00f42400 	.word	0x00f42400
 80004f0:	20000020 	.word	0x20000020

080004f4 <timer3_count_config>:
#include "timer_capture.h"

void timer3_count_config(uint16_t psc, uint32_t arr)
{
	/*Activamos RCC del TIM3*/
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80004f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000524 <timer3_count_config+0x30>)
 80004f6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80004f8:	f043 0302 	orr.w	r3, r3, #2
 80004fc:	6413      	str	r3, [r2, #64]	@ 0x40

	//Deshabilitamos conteo
	TIM3->CR1 &= ~TIM_CR1_CEN;
 80004fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000528 <timer3_count_config+0x34>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	f022 0201 	bic.w	r2, r2, #1
 8000506:	601a      	str	r2, [r3, #0]

	//Deshabilitamos banderas
	TIM3->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
 8000508:	6a1a      	ldr	r2, [r3, #32]
 800050a:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 800050e:	f022 0211 	bic.w	r2, r2, #17
 8000512:	621a      	str	r2, [r3, #32]

	//Calculo del prescaler
	TIM3->PSC = psc;
 8000514:	6298      	str	r0, [r3, #40]	@ 0x28

	//Calculo del auto-reload
	TIM3->ARR = arr;
 8000516:	62d9      	str	r1, [r3, #44]	@ 0x2c

	//Actualizamos valores
	TIM3 -> EGR |= TIM_EGR_UG;
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	f042 0201 	orr.w	r2, r2, #1
 800051e:	615a      	str	r2, [r3, #20]

	return;
}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40023800 	.word	0x40023800
 8000528:	40000400 	.word	0x40000400

0800052c <timer3_count_start>:

void timer3_count_start(void)
{
	//Iniciamos conteo en 0
	TIM3 -> CNT = 0;
 800052c:	4b03      	ldr	r3, [pc, #12]	@ (800053c <timer3_count_start+0x10>)
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	@ 0x24

	//Activamos conte
	TIM3->CR1 |= TIM_CR1_CEN;
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	f042 0201 	orr.w	r2, r2, #1
 8000538:	601a      	str	r2, [r3, #0]

	return;
}
 800053a:	4770      	bx	lr
 800053c:	40000400 	.word	0x40000400

08000540 <timer2_count_config>:
 */

void timer2_count_config(uint16_t psc, uint32_t arr)
{
	//Activamos RCC del TIM2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000540:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <timer2_count_config+0x2c>)
 8000542:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6413      	str	r3, [r2, #64]	@ 0x40

	//Deshabilitamos conteo
	TIM2->CR1 &= ~TIM_CR1_CEN;
 800054a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	f022 0201 	bic.w	r2, r2, #1
 8000554:	601a      	str	r2, [r3, #0]

	//Deshabilitamos banderas
	TIM2->SR &= ~(TIM_SR_UIF || TIM_SR_CC1IF || TIM_SR_CC2IF || TIM_SR_CC3IF || TIM_SR_CC4IF);
 8000556:	691a      	ldr	r2, [r3, #16]
 8000558:	f022 0201 	bic.w	r2, r2, #1
 800055c:	611a      	str	r2, [r3, #16]

	//Calculo del prescaler
	TIM2->PSC = psc;
 800055e:	6298      	str	r0, [r3, #40]	@ 0x28

	//Calculo del auto-reload
	TIM2->ARR = arr;
 8000560:	62d9      	str	r1, [r3, #44]	@ 0x2c

	//Actualizamos valores
	TIM2 -> EGR |= TIM_EGR_UG;
 8000562:	695a      	ldr	r2, [r3, #20]
 8000564:	f042 0201 	orr.w	r2, r2, #1
 8000568:	615a      	str	r2, [r3, #20]

	return;
}
 800056a:	4770      	bx	lr
 800056c:	40023800 	.word	0x40023800

08000570 <timer2_count_start>:
 */

void timer2_count_start(void)
{
	//Iniciamos conteo en 0
	TIM2->CNT = 0;
 8000570:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000574:	2200      	movs	r2, #0
 8000576:	625a      	str	r2, [r3, #36]	@ 0x24

	// Habilitamos conteo
	TIM2 -> CR1 |= TIM_CR1_CEN; //TIM2 conteo EN
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	f042 0201 	orr.w	r2, r2, #1
 800057e:	601a      	str	r2, [r3, #0]

	return;
}
 8000580:	4770      	bx	lr
	...

08000584 <timer2_ch3_gpio_config>:
 */

void timer2_ch3_gpio_config(void)
{
	//Pin Config TIM2_CH3 PB10
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000584:	4a0d      	ldr	r2, [pc, #52]	@ (80005bc <timer2_ch3_gpio_config+0x38>)
 8000586:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30

	//Mode AF
	GPIOB -> MODER &= ~GPIO_MODER_MODE10_Msk;
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <timer2_ch3_gpio_config+0x3c>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8000596:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER |= GPIO_MODER_MODE10_1;
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800059e:	601a      	str	r2, [r3, #0]

	//Pull up down
	GPIOB -> PUPDR &= ~GPIO_PUPDR_PUPD10_Msk;
 80005a0:	68da      	ldr	r2, [r3, #12]
 80005a2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80005a6:	60da      	str	r2, [r3, #12]

	//Alternative
	GPIOB -> AFR[1] &= ~GPIO_AFRH_AFSEL10_Msk;
 80005a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005aa:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 80005ae:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOB -> AFR[1] |= GPIO_AFRH_AFSEL10_0;
 80005b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80005b6:	625a      	str	r2, [r3, #36]	@ 0x24

	return;
}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020400 	.word	0x40020400

080005c4 <timer2_ch3_input_capture_config>:
 *
 */


void timer2_ch3_input_capture_config(uint16_t psc, uint32_t arr)
{
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	4605      	mov	r5, r0
 80005c8:	460e      	mov	r6, r1
	//Deshabilitar captura antes de configurar
	TIM2 -> CCER &= ~TIM_CCER_CC3E_Msk;
 80005ca:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 80005ce:	6a23      	ldr	r3, [r4, #32]
 80005d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80005d4:	6223      	str	r3, [r4, #32]

	//Deshabilitar interrupción por captura
	TIM2 -> DIER &= ~TIM_DIER_CC3IE;
 80005d6:	68e3      	ldr	r3, [r4, #12]
 80005d8:	f023 0308 	bic.w	r3, r3, #8
 80005dc:	60e3      	str	r3, [r4, #12]

	//Configuramos pin TIM2_CH3 modo AF
	timer2_ch3_gpio_config();
 80005de:	f7ff ffd1 	bl	8000584 <timer2_ch3_gpio_config>

	//Configuramos timer2
	timer2_count_config(psc, arr);
 80005e2:	4631      	mov	r1, r6
 80005e4:	4628      	mov	r0, r5
 80005e6:	f7ff ffab 	bl	8000540 <timer2_count_config>

	//Programar filtro
	TIM2 -> CCMR2 &= ~TIM_CCMR2_IC3F_Msk;
 80005ea:	69e3      	ldr	r3, [r4, #28]
 80005ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80005f0:	61e3      	str	r3, [r4, #28]
	TIM2 -> CCMR2 |= (0b0011<<TIM_CCMR2_IC3F_Pos);
 80005f2:	69e3      	ldr	r3, [r4, #28]
 80005f4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80005f8:	61e3      	str	r3, [r4, #28]

	//Prescaler
	TIM2 -> CCMR2 &= ~TIM_CCMR2_IC3PSC_Msk;
 80005fa:	69e3      	ldr	r3, [r4, #28]
 80005fc:	f023 030c 	bic.w	r3, r3, #12
 8000600:	61e3      	str	r3, [r4, #28]
	TIM2 -> CCMR2 |= (0b00<<TIM_CCMR2_IC3PSC_Pos);
 8000602:	69e3      	ldr	r3, [r4, #28]
 8000604:	61e3      	str	r3, [r4, #28]

	//Flanco de detección
	TIM2 -> CCER  &= ~TIM_CCER_CC3P_Msk;
 8000606:	6a23      	ldr	r3, [r4, #32]
 8000608:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800060c:	6223      	str	r3, [r4, #32]

	//Enlazar registro CCR a TI3, esto hace que el pin TI3 sea tipo entrada
	TIM2 -> CCMR2 &= ~TIM_CCMR2_CC3S_Msk;
 800060e:	69e3      	ldr	r3, [r4, #28]
 8000610:	f023 0303 	bic.w	r3, r3, #3
 8000614:	61e3      	str	r3, [r4, #28]
	TIM2 -> CCMR2 |= 0b01 << TIM_CCMR2_CC3S_Pos;
 8000616:	69e3      	ldr	r3, [r4, #28]
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	61e3      	str	r3, [r4, #28]

	return;
}
 800061e:	bd70      	pop	{r4, r5, r6, pc}

08000620 <timer2_ch3_input_capture_start>:
 * @brief Timer2 CH3 Input Capture Start with/without interrupt
 *
 */

void timer2_ch3_input_capture_start(uint8_t isr)
{
 8000620:	b508      	push	{r3, lr}
	//Apagamos bandera
	TIM2 -> SR &= ~TIM_SR_CC3IF_Msk;
 8000622:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000626:	6913      	ldr	r3, [r2, #16]
 8000628:	f023 0308 	bic.w	r3, r3, #8
 800062c:	6113      	str	r3, [r2, #16]

	//Activamos interrupción
	if(isr == 1)
 800062e:	2801      	cmp	r0, #1
 8000630:	d008      	beq.n	8000644 <timer2_ch3_input_capture_start+0x24>
		TIM2 -> DIER |= TIM_DIER_CC3IE;
		NVIC_EnableIRQ(TIM2_IRQn);
	}

	//Habilitar captura
	TIM2 -> CCER |= TIM_CCER_CC3E;
 8000632:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000636:	6a13      	ldr	r3, [r2, #32]
 8000638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800063c:	6213      	str	r3, [r2, #32]

	//Comenzamos conteo
	timer2_count_start();
 800063e:	f7ff ff97 	bl	8000570 <timer2_count_start>

	return;
}
 8000642:	bd08      	pop	{r3, pc}
		TIM2 -> DIER |= TIM_DIER_CC3IE;
 8000644:	68d3      	ldr	r3, [r2, #12]
 8000646:	f043 0308 	orr.w	r3, r3, #8
 800064a:	60d3      	str	r3, [r2, #12]
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064c:	4b02      	ldr	r3, [pc, #8]	@ (8000658 <timer2_ch3_input_capture_start+0x38>)
 800064e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000652:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8000654:	e7ed      	b.n	8000632 <timer2_ch3_input_capture_start+0x12>
 8000656:	bf00      	nop
 8000658:	e000e100 	.word	0xe000e100

0800065c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800065c:	480d      	ldr	r0, [pc, #52]	@ (8000694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000660:	f7ff fdb8 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <LoopForever+0x6>)
  ldr r1, =_edata
 8000666:	490d      	ldr	r1, [pc, #52]	@ (800069c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <LoopForever+0xe>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800067c:	4c0a      	ldr	r4, [pc, #40]	@ (80006a8 <LoopForever+0x16>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068a:	f000 f811 	bl	80006b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fe6f 	bl	8000370 <main>

08000692 <LoopForever>:

LoopForever:
  b LoopForever
 8000692:	e7fe      	b.n	8000692 <LoopForever>
  ldr   r0, =_estack
 8000694:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006a0:	08000718 	.word	0x08000718
  ldr r2, =_sbss
 80006a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006a8:	20000034 	.word	0x20000034

080006ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC_IRQHandler>
	...

080006b0 <__libc_init_array>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	4d0d      	ldr	r5, [pc, #52]	@ (80006e8 <__libc_init_array+0x38>)
 80006b4:	4c0d      	ldr	r4, [pc, #52]	@ (80006ec <__libc_init_array+0x3c>)
 80006b6:	1b64      	subs	r4, r4, r5
 80006b8:	10a4      	asrs	r4, r4, #2
 80006ba:	2600      	movs	r6, #0
 80006bc:	42a6      	cmp	r6, r4
 80006be:	d109      	bne.n	80006d4 <__libc_init_array+0x24>
 80006c0:	4d0b      	ldr	r5, [pc, #44]	@ (80006f0 <__libc_init_array+0x40>)
 80006c2:	4c0c      	ldr	r4, [pc, #48]	@ (80006f4 <__libc_init_array+0x44>)
 80006c4:	f000 f818 	bl	80006f8 <_init>
 80006c8:	1b64      	subs	r4, r4, r5
 80006ca:	10a4      	asrs	r4, r4, #2
 80006cc:	2600      	movs	r6, #0
 80006ce:	42a6      	cmp	r6, r4
 80006d0:	d105      	bne.n	80006de <__libc_init_array+0x2e>
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d8:	4798      	blx	r3
 80006da:	3601      	adds	r6, #1
 80006dc:	e7ee      	b.n	80006bc <__libc_init_array+0xc>
 80006de:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e2:	4798      	blx	r3
 80006e4:	3601      	adds	r6, #1
 80006e6:	e7f2      	b.n	80006ce <__libc_init_array+0x1e>
 80006e8:	08000710 	.word	0x08000710
 80006ec:	08000710 	.word	0x08000710
 80006f0:	08000710 	.word	0x08000710
 80006f4:	08000714 	.word	0x08000714

080006f8 <_init>:
 80006f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fa:	bf00      	nop
 80006fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006fe:	bc08      	pop	{r3}
 8000700:	469e      	mov	lr, r3
 8000702:	4770      	bx	lr

08000704 <_fini>:
 8000704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000706:	bf00      	nop
 8000708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070a:	bc08      	pop	{r3}
 800070c:	469e      	mov	lr, r3
 800070e:	4770      	bx	lr
